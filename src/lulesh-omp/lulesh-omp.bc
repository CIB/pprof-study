; ModuleID = 'lulesh-omp.cc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Domain = type { %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector.0", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", %"class.std::vector", double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32 }
%"class.std::vector.0" = type { %"struct.std::_Vector_base.1" }
%"struct.std::_Vector_base.1" = type { %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl" = type { i32*, i32*, i32* }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl" }
%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl" = type { double*, double*, double* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }
%"class.std::allocator" = type { i8 }
%"class.std::allocator.2" = type { i8 }
%"class.__gnu_cxx::new_allocator" = type { i8 }
%"class.__gnu_cxx::new_allocator.3" = type { i8 }
%"class.__gnu_cxx::__normal_iterator" = type { i32* }
%"class.__gnu_cxx::__normal_iterator.5" = type { double* }

$_ZN6DomainC2Ev = comdat any

$_ZN6DomainD2Ev = comdat any

$_ZN6Domain5sizeXEv = comdat any

$_ZN6Domain5sizeYEv = comdat any

$_ZN6Domain5sizeZEv = comdat any

$_ZN6Domain7numElemEv = comdat any

$_ZN6Domain7numNodeEv = comdat any

$_ZN6Domain22AllocateElemPersistentEm = comdat any

$_ZN6Domain21AllocateElemTemporaryEm = comdat any

$_ZN6Domain23AllocateNodalPersistentEm = comdat any

$_ZN6Domain16AllocateNodesetsEm = comdat any

$_ZN6Domain1xEi = comdat any

$_ZN6Domain1yEi = comdat any

$_ZN6Domain1zEi = comdat any

$_ZN6Domain8nodelistEi = comdat any

$_ZN6Domain23AllocateNodeElemIndexesEv = comdat any

$_ZN6Domain11matElemlistEi = comdat any

$_ZN6Domain7dtfixedEv = comdat any

$_ZN6Domain9deltatimeEv = comdat any

$_ZN6Domain15deltatimemultlbEv = comdat any

$_ZN6Domain15deltatimemultubEv = comdat any

$_ZN6Domain8stoptimeEv = comdat any

$_ZN6Domain9dtcourantEv = comdat any

$_ZN6Domain7dthydroEv = comdat any

$_ZN6Domain5dtmaxEv = comdat any

$_ZN6Domain4timeEv = comdat any

$_ZN6Domain5cycleEv = comdat any

$_ZN6Domain5e_cutEv = comdat any

$_ZN6Domain5p_cutEv = comdat any

$_ZN6Domain5q_cutEv = comdat any

$_ZN6Domain5u_cutEv = comdat any

$_ZN6Domain5v_cutEv = comdat any

$_ZN6Domain6hgcoefEv = comdat any

$_ZN6Domain5ss4o3Ev = comdat any

$_ZN6Domain5qstopEv = comdat any

$_ZN6Domain15monoq_max_slopeEv = comdat any

$_ZN6Domain18monoq_limiter_multEv = comdat any

$_ZN6Domain9qlc_monoqEv = comdat any

$_ZN6Domain9qqc_monoqEv = comdat any

$_ZN6Domain3qqcEv = comdat any

$_ZN6Domain4pminEv = comdat any

$_ZN6Domain4eminEv = comdat any

$_ZN6Domain7dvovmaxEv = comdat any

$_ZN6Domain7eosvmaxEv = comdat any

$_ZN6Domain7eosvminEv = comdat any

$_ZN6Domain7refdensEv = comdat any

$_ZN6Domain4voloEi = comdat any

$_ZN6Domain8elemMassEi = comdat any

$_ZN6Domain9nodalMassEi = comdat any

$_ZN6Domain1eEi = comdat any

$_ZN6Domain5symmXEi = comdat any

$_ZN6Domain5symmYEi = comdat any

$_ZN6Domain5symmZEi = comdat any

$_ZN6Domain4lximEi = comdat any

$_ZN6Domain4lxipEi = comdat any

$_ZN6Domain5letamEi = comdat any

$_ZN6Domain5letapEi = comdat any

$_ZN6Domain6lzetamEi = comdat any

$_ZN6Domain6lzetapEi = comdat any

$_ZN6Domain6elemBCEi = comdat any

$_Z4FABSd = comdat any

$_ZNSt6vectorIdSaIdEEC2Ev = comdat any

$_ZNSt6vectorIiSaIiEEC2Ev = comdat any

$_ZNSt6vectorIdSaIdEED2Ev = comdat any

$__clang_call_terminate = comdat any

$_ZNSt6vectorIiSaIiEED2Ev = comdat any

$_ZNSt12_Vector_baseIdSaIdEEC2Ev = comdat any

$_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC2Ev = comdat any

$_ZNSaIdEC2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIdEC2Ev = comdat any

$_ZNSt12_Vector_baseIiSaIiEEC2Ev = comdat any

$_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2Ev = comdat any

$_ZNSaIiEC2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIiEC2Ev = comdat any

$_ZSt8_DestroyIPddEvT_S1_RSaIT0_E = comdat any

$_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv = comdat any

$_ZNSt12_Vector_baseIdSaIdEED2Ev = comdat any

$_ZSt8_DestroyIPdEvT_S1_ = comdat any

$_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_ = comdat any

$_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm = comdat any

$_ZN9__gnu_cxx13new_allocatorIdED2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm = comdat any

$_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E = comdat any

$_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv = comdat any

$_ZNSt12_Vector_baseIiSaIiEED2Ev = comdat any

$_ZSt8_DestroyIPiEvT_S1_ = comdat any

$_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_ = comdat any

$_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim = comdat any

$_ZN9__gnu_cxx13new_allocatorIiED2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim = comdat any

$_ZNSt6vectorIiSaIiEE6resizeEmi = comdat any

$_ZNSt6vectorIdSaIdEE6resizeEmd = comdat any

$_ZNKSt6vectorIiSaIiEE4sizeEv = comdat any

$_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi = comdat any

$_ZNSt6vectorIiSaIiEE3endEv = comdat any

$_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi = comdat any

$_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi = comdat any

$_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_ = comdat any

$_ZSt22__uninitialized_move_aIPiS0_SaIiEET0_T_S3_S2_RT1_ = comdat any

$_ZSt13copy_backwardIPiS0_ET0_T_S2_S1_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv = comdat any

$_ZSt4fillIPiiEvT_S1_RKT0_ = comdat any

$_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_RSaIT2_E = comdat any

$_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc = comdat any

$_ZNSt6vectorIiSaIiEE5beginEv = comdat any

$_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm = comdat any

$_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_ = comdat any

$_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_RSaIT1_E = comdat any

$_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_ = comdat any

$_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPiS2_EET0_T_S4_S3_ = comdat any

$_ZSt4copyIPiS0_ET0_T_S2_S1_ = comdat any

$_ZSt14__copy_move_a2ILb0EPiS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__miter_baseIPiENSt11_Miter_baseIT_E13iterator_typeES2_ = comdat any

$_ZSt13__copy_move_aILb0EPiS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_ = comdat any

$_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_ = comdat any

$_ZSt23__copy_move_backward_a2ILb0EPiS0_ET1_T0_S2_S1_ = comdat any

$_ZSt22__copy_move_backward_aILb0EPiS0_ET1_T0_S2_S1_ = comdat any

$_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIiEEPT_PKS3_S6_S4_ = comdat any

$_ZSt8__fill_aIPiiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any

$_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_ = comdat any

$_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPimiEEvT_T0_RKT1_ = comdat any

$_ZSt6fill_nIPimiET_S1_T0_RKT1_ = comdat any

$_ZSt10__fill_n_aIPimiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_ = comdat any

$_ZNKSt6vectorIiSaIiEE8max_sizeEv = comdat any

$_ZSt3maxImERKT_S2_S2_ = comdat any

$_ZN9__gnu_cxx14__alloc_traitsISaIiEE8max_sizeERKS1_ = comdat any

$_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv = comdat any

$_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC2ERKS1_ = comdat any

$_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv = comdat any

$_ZNKSt6vectorIdSaIdEE4sizeEv = comdat any

$_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd = comdat any

$_ZNSt6vectorIdSaIdEE3endEv = comdat any

$_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd = comdat any

$_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd = comdat any

$_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_ = comdat any

$_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_ = comdat any

$_ZSt13copy_backwardIPdS0_ET0_T_S2_S1_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv = comdat any

$_ZSt4fillIPddEvT_S1_RKT0_ = comdat any

$_ZSt24__uninitialized_fill_n_aIPdmddEvT_T0_RKT1_RSaIT2_E = comdat any

$_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc = comdat any

$_ZNSt6vectorIdSaIdEE5beginEv = comdat any

$_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm = comdat any

$_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_ = comdat any

$_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E = comdat any

$_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_ = comdat any

$_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_ = comdat any

$_ZSt4copyIPdS0_ET0_T_S2_S1_ = comdat any

$_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_ = comdat any

$_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_ = comdat any

$_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_ = comdat any

$_ZSt23__copy_move_backward_a2ILb0EPdS0_ET1_T0_S2_S1_ = comdat any

$_ZSt22__copy_move_backward_aILb0EPdS0_ET1_T0_S2_S1_ = comdat any

$_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_ = comdat any

$_ZSt8__fill_aIPddEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any

$_ZSt20uninitialized_fill_nIPdmdEvT_T0_RKT1_ = comdat any

$_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdmdEEvT_T0_RKT1_ = comdat any

$_ZSt6fill_nIPdmdET_S1_T0_RKT1_ = comdat any

$_ZSt10__fill_n_aIPdmdEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_ = comdat any

$_ZNKSt6vectorIdSaIdEE8max_sizeEv = comdat any

$_ZN9__gnu_cxx14__alloc_traitsISaIdEE8max_sizeERKS1_ = comdat any

$_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv = comdat any

$_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC2ERKS1_ = comdat any

$_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv = comdat any

$_ZNSt6vectorIdSaIdEEixEm = comdat any

$_ZNSt6vectorIiSaIiEEixEm = comdat any

$_ZN6Domain13nodeElemCountEi = comdat any

$_ZN6Domain13nodeElemStartEi = comdat any

$_ZN6Domain18nodeElemCornerListEi = comdat any

$_ZN6Domain2fxEi = comdat any

$_ZN6Domain2fyEi = comdat any

$_ZN6Domain2fzEi = comdat any

$_Z8AllocateIdEPT_m = comdat any

$_Z7ReleaseIdEvPPT_ = comdat any

$_ZN6Domain1pEi = comdat any

$_ZN6Domain1qEi = comdat any

$_ZN6Domain1vEi = comdat any

$_ZN6Domain2ssEi = comdat any

$_Z4CBRTd = comdat any

$_ZN6Domain2xdEi = comdat any

$_ZN6Domain2ydEi = comdat any

$_ZN6Domain2zdEi = comdat any

$_ZN6Domain3xddEi = comdat any

$_ZN6Domain3yddEi = comdat any

$_ZN6Domain3zddEi = comdat any

$_ZN6Domain3dxxEi = comdat any

$_ZN6Domain3dyyEi = comdat any

$_ZN6Domain3dzzEi = comdat any

$_ZN6Domain4vdovEi = comdat any

$_ZN6Domain4vnewEi = comdat any

$_ZN6Domain4delvEi = comdat any

$_ZN6Domain6arealgEi = comdat any

$_ZSt3maxIdERKT_S2_S2_ = comdat any

$_Z4SQRTd = comdat any

$_ZN6Domain9delx_zetaEi = comdat any

$_ZN6Domain9delv_zetaEi = comdat any

$_ZN6Domain7delx_xiEi = comdat any

$_ZN6Domain7delv_xiEi = comdat any

$_ZN6Domain8delx_etaEi = comdat any

$_ZN6Domain8delv_etaEi = comdat any

$_ZN6Domain2qqEi = comdat any

$_ZN6Domain2qlEi = comdat any

@domain = global %struct.Domain zeroinitializer, align 8
@__dso_handle = external global i8
@.str = private unnamed_addr constant [26 x i8] c"\0A\0AElapsed time = %12.6e\0A\0A\00", align 1
@.str1 = private unnamed_addr constant [18 x i8] c"Run completed:  \0A\00", align 1
@.str2 = private unnamed_addr constant [31 x i8] c"   Problem size        =  %i \0A\00", align 1
@.str3 = private unnamed_addr constant [31 x i8] c"   Iteration count     =  %i \0A\00", align 1
@.str4 = private unnamed_addr constant [34 x i8] c"   Final Origin Energy = %12.6e \0A\00", align 1
@.str5 = private unnamed_addr constant [37 x i8] c"   Testing Plane 0 of Energy Array:\0A\00", align 1
@.str6 = private unnamed_addr constant [31 x i8] c"        MaxAbsDiff   = %12.6e\0A\00", align 1
@.str7 = private unnamed_addr constant [31 x i8] c"        TotalAbsDiff = %12.6e\0A\00", align 1
@.str8 = private unnamed_addr constant [32 x i8] c"        MaxRelDiff   = %12.6e\0A\0A\00", align 1
@.str9 = private unnamed_addr constant [23 x i8] c"vector::_M_fill_insert\00", align 1
@stderr = external global %struct._IO_FILE*
@.str10 = private unnamed_addr constant [67 x i8] c"AllocateNodeElemIndexes(): nodeElemCornerList entry out of range!\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_lulesh_omp.cc, i8* null }]

define internal void @__cxx_global_var_init() section ".text.startup" {
  call void @_ZN6DomainC2Ev(%struct.Domain* @domain)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%struct.Domain*)* @_ZN6DomainD2Ev to void (i8*)*), i8* bitcast (%struct.Domain* @domain to i8*), i8* @__dso_handle) #1
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZN6DomainC2Ev(%struct.Domain* %this) unnamed_addr #0 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %4 = load %struct.Domain*, %struct.Domain** %1
  %5 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 0
  call void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %5)
  %6 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 1
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %6)
          to label %7 unwind label %104

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 2
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %8)
          to label %9 unwind label %108

; <label>:9                                       ; preds = %7
  %10 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 3
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %10)
          to label %11 unwind label %112

; <label>:11                                      ; preds = %9
  %12 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 4
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %12)
          to label %13 unwind label %116

; <label>:13                                      ; preds = %11
  %14 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 5
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %14)
          to label %15 unwind label %120

; <label>:15                                      ; preds = %13
  %16 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 6
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %16)
          to label %17 unwind label %124

; <label>:17                                      ; preds = %15
  %18 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 7
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %18)
          to label %19 unwind label %128

; <label>:19                                      ; preds = %17
  %20 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 8
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %20)
          to label %21 unwind label %132

; <label>:21                                      ; preds = %19
  %22 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 9
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %22)
          to label %23 unwind label %136

; <label>:23                                      ; preds = %21
  %24 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 10
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %24)
          to label %25 unwind label %140

; <label>:25                                      ; preds = %23
  %26 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 11
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %26)
          to label %27 unwind label %144

; <label>:27                                      ; preds = %25
  %28 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 12
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %28)
          to label %29 unwind label %148

; <label>:29                                      ; preds = %27
  %30 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 13
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %30)
          to label %31 unwind label %152

; <label>:31                                      ; preds = %29
  %32 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 14
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %32)
          to label %33 unwind label %156

; <label>:33                                      ; preds = %31
  %34 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 15
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %34)
          to label %35 unwind label %160

; <label>:35                                      ; preds = %33
  %36 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 16
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %36)
          to label %37 unwind label %164

; <label>:37                                      ; preds = %35
  %38 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 17
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %38)
          to label %39 unwind label %168

; <label>:39                                      ; preds = %37
  %40 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 18
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %40)
          to label %41 unwind label %172

; <label>:41                                      ; preds = %39
  %42 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 19
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %42)
          to label %43 unwind label %176

; <label>:43                                      ; preds = %41
  %44 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 20
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %44)
          to label %45 unwind label %180

; <label>:45                                      ; preds = %43
  %46 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 21
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %46)
          to label %47 unwind label %184

; <label>:47                                      ; preds = %45
  %48 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 22
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %48)
          to label %49 unwind label %188

; <label>:49                                      ; preds = %47
  %50 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 23
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %50)
          to label %51 unwind label %192

; <label>:51                                      ; preds = %49
  %52 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 24
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %52)
          to label %53 unwind label %196

; <label>:53                                      ; preds = %51
  %54 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 25
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %54)
          to label %55 unwind label %200

; <label>:55                                      ; preds = %53
  %56 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 26
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %56)
          to label %57 unwind label %204

; <label>:57                                      ; preds = %55
  %58 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 27
  invoke void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %58)
          to label %59 unwind label %208

; <label>:59                                      ; preds = %57
  %60 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 28
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %60)
          to label %61 unwind label %212

; <label>:61                                      ; preds = %59
  %62 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 29
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %62)
          to label %63 unwind label %216

; <label>:63                                      ; preds = %61
  %64 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 30
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %64)
          to label %65 unwind label %220

; <label>:65                                      ; preds = %63
  %66 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 31
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %66)
          to label %67 unwind label %224

; <label>:67                                      ; preds = %65
  %68 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 32
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %68)
          to label %69 unwind label %228

; <label>:69                                      ; preds = %67
  %70 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 33
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %70)
          to label %71 unwind label %232

; <label>:71                                      ; preds = %69
  %72 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 34
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %72)
          to label %73 unwind label %236

; <label>:73                                      ; preds = %71
  %74 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 35
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %74)
          to label %75 unwind label %240

; <label>:75                                      ; preds = %73
  %76 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 36
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %76)
          to label %77 unwind label %244

; <label>:77                                      ; preds = %75
  %78 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 37
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %78)
          to label %79 unwind label %248

; <label>:79                                      ; preds = %77
  %80 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 38
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %80)
          to label %81 unwind label %252

; <label>:81                                      ; preds = %79
  %82 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 39
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %82)
          to label %83 unwind label %256

; <label>:83                                      ; preds = %81
  %84 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 40
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %84)
          to label %85 unwind label %260

; <label>:85                                      ; preds = %83
  %86 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 41
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %86)
          to label %87 unwind label %264

; <label>:87                                      ; preds = %85
  %88 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 42
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %88)
          to label %89 unwind label %268

; <label>:89                                      ; preds = %87
  %90 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 43
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %90)
          to label %91 unwind label %272

; <label>:91                                      ; preds = %89
  %92 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 44
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %92)
          to label %93 unwind label %276

; <label>:93                                      ; preds = %91
  %94 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 45
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %94)
          to label %95 unwind label %280

; <label>:95                                      ; preds = %93
  %96 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 46
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %96)
          to label %97 unwind label %284

; <label>:97                                      ; preds = %95
  %98 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 47
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %98)
          to label %99 unwind label %288

; <label>:99                                      ; preds = %97
  %100 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 48
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %100)
          to label %101 unwind label %292

; <label>:101                                     ; preds = %99
  %102 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 49
  invoke void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %102)
          to label %103 unwind label %296

; <label>:103                                     ; preds = %101
  ret void

; <label>:104                                     ; preds = %0
  %105 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %106 = extractvalue { i8*, i32 } %105, 0
  store i8* %106, i8** %2
  %107 = extractvalue { i8*, i32 } %105, 1
  store i32 %107, i32* %3
  br label %395

; <label>:108                                     ; preds = %7
  %109 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %110 = extractvalue { i8*, i32 } %109, 0
  store i8* %110, i8** %2
  %111 = extractvalue { i8*, i32 } %109, 1
  store i32 %111, i32* %3
  br label %393

; <label>:112                                     ; preds = %9
  %113 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %114 = extractvalue { i8*, i32 } %113, 0
  store i8* %114, i8** %2
  %115 = extractvalue { i8*, i32 } %113, 1
  store i32 %115, i32* %3
  br label %391

; <label>:116                                     ; preds = %11
  %117 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %118 = extractvalue { i8*, i32 } %117, 0
  store i8* %118, i8** %2
  %119 = extractvalue { i8*, i32 } %117, 1
  store i32 %119, i32* %3
  br label %389

; <label>:120                                     ; preds = %13
  %121 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %122 = extractvalue { i8*, i32 } %121, 0
  store i8* %122, i8** %2
  %123 = extractvalue { i8*, i32 } %121, 1
  store i32 %123, i32* %3
  br label %387

; <label>:124                                     ; preds = %15
  %125 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %126 = extractvalue { i8*, i32 } %125, 0
  store i8* %126, i8** %2
  %127 = extractvalue { i8*, i32 } %125, 1
  store i32 %127, i32* %3
  br label %385

; <label>:128                                     ; preds = %17
  %129 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %130 = extractvalue { i8*, i32 } %129, 0
  store i8* %130, i8** %2
  %131 = extractvalue { i8*, i32 } %129, 1
  store i32 %131, i32* %3
  br label %383

; <label>:132                                     ; preds = %19
  %133 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %134 = extractvalue { i8*, i32 } %133, 0
  store i8* %134, i8** %2
  %135 = extractvalue { i8*, i32 } %133, 1
  store i32 %135, i32* %3
  br label %381

; <label>:136                                     ; preds = %21
  %137 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %138 = extractvalue { i8*, i32 } %137, 0
  store i8* %138, i8** %2
  %139 = extractvalue { i8*, i32 } %137, 1
  store i32 %139, i32* %3
  br label %379

; <label>:140                                     ; preds = %23
  %141 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %142 = extractvalue { i8*, i32 } %141, 0
  store i8* %142, i8** %2
  %143 = extractvalue { i8*, i32 } %141, 1
  store i32 %143, i32* %3
  br label %377

; <label>:144                                     ; preds = %25
  %145 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %146 = extractvalue { i8*, i32 } %145, 0
  store i8* %146, i8** %2
  %147 = extractvalue { i8*, i32 } %145, 1
  store i32 %147, i32* %3
  br label %375

; <label>:148                                     ; preds = %27
  %149 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %150 = extractvalue { i8*, i32 } %149, 0
  store i8* %150, i8** %2
  %151 = extractvalue { i8*, i32 } %149, 1
  store i32 %151, i32* %3
  br label %373

; <label>:152                                     ; preds = %29
  %153 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %154 = extractvalue { i8*, i32 } %153, 0
  store i8* %154, i8** %2
  %155 = extractvalue { i8*, i32 } %153, 1
  store i32 %155, i32* %3
  br label %371

; <label>:156                                     ; preds = %31
  %157 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %158 = extractvalue { i8*, i32 } %157, 0
  store i8* %158, i8** %2
  %159 = extractvalue { i8*, i32 } %157, 1
  store i32 %159, i32* %3
  br label %369

; <label>:160                                     ; preds = %33
  %161 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %162 = extractvalue { i8*, i32 } %161, 0
  store i8* %162, i8** %2
  %163 = extractvalue { i8*, i32 } %161, 1
  store i32 %163, i32* %3
  br label %367

; <label>:164                                     ; preds = %35
  %165 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %166 = extractvalue { i8*, i32 } %165, 0
  store i8* %166, i8** %2
  %167 = extractvalue { i8*, i32 } %165, 1
  store i32 %167, i32* %3
  br label %365

; <label>:168                                     ; preds = %37
  %169 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %170 = extractvalue { i8*, i32 } %169, 0
  store i8* %170, i8** %2
  %171 = extractvalue { i8*, i32 } %169, 1
  store i32 %171, i32* %3
  br label %363

; <label>:172                                     ; preds = %39
  %173 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %174 = extractvalue { i8*, i32 } %173, 0
  store i8* %174, i8** %2
  %175 = extractvalue { i8*, i32 } %173, 1
  store i32 %175, i32* %3
  br label %361

; <label>:176                                     ; preds = %41
  %177 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %178 = extractvalue { i8*, i32 } %177, 0
  store i8* %178, i8** %2
  %179 = extractvalue { i8*, i32 } %177, 1
  store i32 %179, i32* %3
  br label %359

; <label>:180                                     ; preds = %43
  %181 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %182 = extractvalue { i8*, i32 } %181, 0
  store i8* %182, i8** %2
  %183 = extractvalue { i8*, i32 } %181, 1
  store i32 %183, i32* %3
  br label %357

; <label>:184                                     ; preds = %45
  %185 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %186 = extractvalue { i8*, i32 } %185, 0
  store i8* %186, i8** %2
  %187 = extractvalue { i8*, i32 } %185, 1
  store i32 %187, i32* %3
  br label %355

; <label>:188                                     ; preds = %47
  %189 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %190 = extractvalue { i8*, i32 } %189, 0
  store i8* %190, i8** %2
  %191 = extractvalue { i8*, i32 } %189, 1
  store i32 %191, i32* %3
  br label %353

; <label>:192                                     ; preds = %49
  %193 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %194 = extractvalue { i8*, i32 } %193, 0
  store i8* %194, i8** %2
  %195 = extractvalue { i8*, i32 } %193, 1
  store i32 %195, i32* %3
  br label %351

; <label>:196                                     ; preds = %51
  %197 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %198 = extractvalue { i8*, i32 } %197, 0
  store i8* %198, i8** %2
  %199 = extractvalue { i8*, i32 } %197, 1
  store i32 %199, i32* %3
  br label %349

; <label>:200                                     ; preds = %53
  %201 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %202 = extractvalue { i8*, i32 } %201, 0
  store i8* %202, i8** %2
  %203 = extractvalue { i8*, i32 } %201, 1
  store i32 %203, i32* %3
  br label %347

; <label>:204                                     ; preds = %55
  %205 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %206 = extractvalue { i8*, i32 } %205, 0
  store i8* %206, i8** %2
  %207 = extractvalue { i8*, i32 } %205, 1
  store i32 %207, i32* %3
  br label %345

; <label>:208                                     ; preds = %57
  %209 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %210 = extractvalue { i8*, i32 } %209, 0
  store i8* %210, i8** %2
  %211 = extractvalue { i8*, i32 } %209, 1
  store i32 %211, i32* %3
  br label %343

; <label>:212                                     ; preds = %59
  %213 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %214 = extractvalue { i8*, i32 } %213, 0
  store i8* %214, i8** %2
  %215 = extractvalue { i8*, i32 } %213, 1
  store i32 %215, i32* %3
  br label %341

; <label>:216                                     ; preds = %61
  %217 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %218 = extractvalue { i8*, i32 } %217, 0
  store i8* %218, i8** %2
  %219 = extractvalue { i8*, i32 } %217, 1
  store i32 %219, i32* %3
  br label %339

; <label>:220                                     ; preds = %63
  %221 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %222 = extractvalue { i8*, i32 } %221, 0
  store i8* %222, i8** %2
  %223 = extractvalue { i8*, i32 } %221, 1
  store i32 %223, i32* %3
  br label %337

; <label>:224                                     ; preds = %65
  %225 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %226 = extractvalue { i8*, i32 } %225, 0
  store i8* %226, i8** %2
  %227 = extractvalue { i8*, i32 } %225, 1
  store i32 %227, i32* %3
  br label %335

; <label>:228                                     ; preds = %67
  %229 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %230 = extractvalue { i8*, i32 } %229, 0
  store i8* %230, i8** %2
  %231 = extractvalue { i8*, i32 } %229, 1
  store i32 %231, i32* %3
  br label %333

; <label>:232                                     ; preds = %69
  %233 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %234 = extractvalue { i8*, i32 } %233, 0
  store i8* %234, i8** %2
  %235 = extractvalue { i8*, i32 } %233, 1
  store i32 %235, i32* %3
  br label %331

; <label>:236                                     ; preds = %71
  %237 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %238 = extractvalue { i8*, i32 } %237, 0
  store i8* %238, i8** %2
  %239 = extractvalue { i8*, i32 } %237, 1
  store i32 %239, i32* %3
  br label %329

; <label>:240                                     ; preds = %73
  %241 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %242 = extractvalue { i8*, i32 } %241, 0
  store i8* %242, i8** %2
  %243 = extractvalue { i8*, i32 } %241, 1
  store i32 %243, i32* %3
  br label %327

; <label>:244                                     ; preds = %75
  %245 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %246 = extractvalue { i8*, i32 } %245, 0
  store i8* %246, i8** %2
  %247 = extractvalue { i8*, i32 } %245, 1
  store i32 %247, i32* %3
  br label %325

; <label>:248                                     ; preds = %77
  %249 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %250 = extractvalue { i8*, i32 } %249, 0
  store i8* %250, i8** %2
  %251 = extractvalue { i8*, i32 } %249, 1
  store i32 %251, i32* %3
  br label %323

; <label>:252                                     ; preds = %79
  %253 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %254 = extractvalue { i8*, i32 } %253, 0
  store i8* %254, i8** %2
  %255 = extractvalue { i8*, i32 } %253, 1
  store i32 %255, i32* %3
  br label %321

; <label>:256                                     ; preds = %81
  %257 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %258 = extractvalue { i8*, i32 } %257, 0
  store i8* %258, i8** %2
  %259 = extractvalue { i8*, i32 } %257, 1
  store i32 %259, i32* %3
  br label %319

; <label>:260                                     ; preds = %83
  %261 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %262 = extractvalue { i8*, i32 } %261, 0
  store i8* %262, i8** %2
  %263 = extractvalue { i8*, i32 } %261, 1
  store i32 %263, i32* %3
  br label %317

; <label>:264                                     ; preds = %85
  %265 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %266 = extractvalue { i8*, i32 } %265, 0
  store i8* %266, i8** %2
  %267 = extractvalue { i8*, i32 } %265, 1
  store i32 %267, i32* %3
  br label %315

; <label>:268                                     ; preds = %87
  %269 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %270 = extractvalue { i8*, i32 } %269, 0
  store i8* %270, i8** %2
  %271 = extractvalue { i8*, i32 } %269, 1
  store i32 %271, i32* %3
  br label %313

; <label>:272                                     ; preds = %89
  %273 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %274 = extractvalue { i8*, i32 } %273, 0
  store i8* %274, i8** %2
  %275 = extractvalue { i8*, i32 } %273, 1
  store i32 %275, i32* %3
  br label %311

; <label>:276                                     ; preds = %91
  %277 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %278 = extractvalue { i8*, i32 } %277, 0
  store i8* %278, i8** %2
  %279 = extractvalue { i8*, i32 } %277, 1
  store i32 %279, i32* %3
  br label %309

; <label>:280                                     ; preds = %93
  %281 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %282 = extractvalue { i8*, i32 } %281, 0
  store i8* %282, i8** %2
  %283 = extractvalue { i8*, i32 } %281, 1
  store i32 %283, i32* %3
  br label %307

; <label>:284                                     ; preds = %95
  %285 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %286 = extractvalue { i8*, i32 } %285, 0
  store i8* %286, i8** %2
  %287 = extractvalue { i8*, i32 } %285, 1
  store i32 %287, i32* %3
  br label %305

; <label>:288                                     ; preds = %97
  %289 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %290 = extractvalue { i8*, i32 } %289, 0
  store i8* %290, i8** %2
  %291 = extractvalue { i8*, i32 } %289, 1
  store i32 %291, i32* %3
  br label %303

; <label>:292                                     ; preds = %99
  %293 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %294 = extractvalue { i8*, i32 } %293, 0
  store i8* %294, i8** %2
  %295 = extractvalue { i8*, i32 } %293, 1
  store i32 %295, i32* %3
  br label %301

; <label>:296                                     ; preds = %101
  %297 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %298 = extractvalue { i8*, i32 } %297, 0
  store i8* %298, i8** %2
  %299 = extractvalue { i8*, i32 } %297, 1
  store i32 %299, i32* %3
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %100)
          to label %300 unwind label %402

; <label>:300                                     ; preds = %296
  br label %301

; <label>:301                                     ; preds = %300, %292
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %98)
          to label %302 unwind label %402

; <label>:302                                     ; preds = %301
  br label %303

; <label>:303                                     ; preds = %302, %288
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %96)
          to label %304 unwind label %402

; <label>:304                                     ; preds = %303
  br label %305

; <label>:305                                     ; preds = %304, %284
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %94)
          to label %306 unwind label %402

; <label>:306                                     ; preds = %305
  br label %307

; <label>:307                                     ; preds = %306, %280
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %92)
          to label %308 unwind label %402

; <label>:308                                     ; preds = %307
  br label %309

; <label>:309                                     ; preds = %308, %276
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %90)
          to label %310 unwind label %402

; <label>:310                                     ; preds = %309
  br label %311

; <label>:311                                     ; preds = %310, %272
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %88)
          to label %312 unwind label %402

; <label>:312                                     ; preds = %311
  br label %313

; <label>:313                                     ; preds = %312, %268
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %86)
          to label %314 unwind label %402

; <label>:314                                     ; preds = %313
  br label %315

; <label>:315                                     ; preds = %314, %264
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %84)
          to label %316 unwind label %402

; <label>:316                                     ; preds = %315
  br label %317

; <label>:317                                     ; preds = %316, %260
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %82)
          to label %318 unwind label %402

; <label>:318                                     ; preds = %317
  br label %319

; <label>:319                                     ; preds = %318, %256
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %80)
          to label %320 unwind label %402

; <label>:320                                     ; preds = %319
  br label %321

; <label>:321                                     ; preds = %320, %252
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %78)
          to label %322 unwind label %402

; <label>:322                                     ; preds = %321
  br label %323

; <label>:323                                     ; preds = %322, %248
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %76)
          to label %324 unwind label %402

; <label>:324                                     ; preds = %323
  br label %325

; <label>:325                                     ; preds = %324, %244
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %74)
          to label %326 unwind label %402

; <label>:326                                     ; preds = %325
  br label %327

; <label>:327                                     ; preds = %326, %240
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %72)
          to label %328 unwind label %402

; <label>:328                                     ; preds = %327
  br label %329

; <label>:329                                     ; preds = %328, %236
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %70)
          to label %330 unwind label %402

; <label>:330                                     ; preds = %329
  br label %331

; <label>:331                                     ; preds = %330, %232
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %68)
          to label %332 unwind label %402

; <label>:332                                     ; preds = %331
  br label %333

; <label>:333                                     ; preds = %332, %228
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %66)
          to label %334 unwind label %402

; <label>:334                                     ; preds = %333
  br label %335

; <label>:335                                     ; preds = %334, %224
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %64)
          to label %336 unwind label %402

; <label>:336                                     ; preds = %335
  br label %337

; <label>:337                                     ; preds = %336, %220
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %62)
          to label %338 unwind label %402

; <label>:338                                     ; preds = %337
  br label %339

; <label>:339                                     ; preds = %338, %216
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %60)
          to label %340 unwind label %402

; <label>:340                                     ; preds = %339
  br label %341

; <label>:341                                     ; preds = %340, %212
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %58)
          to label %342 unwind label %402

; <label>:342                                     ; preds = %341
  br label %343

; <label>:343                                     ; preds = %342, %208
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %56)
          to label %344 unwind label %402

; <label>:344                                     ; preds = %343
  br label %345

; <label>:345                                     ; preds = %344, %204
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %54)
          to label %346 unwind label %402

; <label>:346                                     ; preds = %345
  br label %347

; <label>:347                                     ; preds = %346, %200
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %52)
          to label %348 unwind label %402

; <label>:348                                     ; preds = %347
  br label %349

; <label>:349                                     ; preds = %348, %196
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %50)
          to label %350 unwind label %402

; <label>:350                                     ; preds = %349
  br label %351

; <label>:351                                     ; preds = %350, %192
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %48)
          to label %352 unwind label %402

; <label>:352                                     ; preds = %351
  br label %353

; <label>:353                                     ; preds = %352, %188
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %46)
          to label %354 unwind label %402

; <label>:354                                     ; preds = %353
  br label %355

; <label>:355                                     ; preds = %354, %184
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %44)
          to label %356 unwind label %402

; <label>:356                                     ; preds = %355
  br label %357

; <label>:357                                     ; preds = %356, %180
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %42)
          to label %358 unwind label %402

; <label>:358                                     ; preds = %357
  br label %359

; <label>:359                                     ; preds = %358, %176
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %40)
          to label %360 unwind label %402

; <label>:360                                     ; preds = %359
  br label %361

; <label>:361                                     ; preds = %360, %172
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %38)
          to label %362 unwind label %402

; <label>:362                                     ; preds = %361
  br label %363

; <label>:363                                     ; preds = %362, %168
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %36)
          to label %364 unwind label %402

; <label>:364                                     ; preds = %363
  br label %365

; <label>:365                                     ; preds = %364, %164
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %34)
          to label %366 unwind label %402

; <label>:366                                     ; preds = %365
  br label %367

; <label>:367                                     ; preds = %366, %160
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %32)
          to label %368 unwind label %402

; <label>:368                                     ; preds = %367
  br label %369

; <label>:369                                     ; preds = %368, %156
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %30)
          to label %370 unwind label %402

; <label>:370                                     ; preds = %369
  br label %371

; <label>:371                                     ; preds = %370, %152
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %28)
          to label %372 unwind label %402

; <label>:372                                     ; preds = %371
  br label %373

; <label>:373                                     ; preds = %372, %148
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %26)
          to label %374 unwind label %402

; <label>:374                                     ; preds = %373
  br label %375

; <label>:375                                     ; preds = %374, %144
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %24)
          to label %376 unwind label %402

; <label>:376                                     ; preds = %375
  br label %377

; <label>:377                                     ; preds = %376, %140
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %22)
          to label %378 unwind label %402

; <label>:378                                     ; preds = %377
  br label %379

; <label>:379                                     ; preds = %378, %136
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %20)
          to label %380 unwind label %402

; <label>:380                                     ; preds = %379
  br label %381

; <label>:381                                     ; preds = %380, %132
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %18)
          to label %382 unwind label %402

; <label>:382                                     ; preds = %381
  br label %383

; <label>:383                                     ; preds = %382, %128
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %16)
          to label %384 unwind label %402

; <label>:384                                     ; preds = %383
  br label %385

; <label>:385                                     ; preds = %384, %124
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %14)
          to label %386 unwind label %402

; <label>:386                                     ; preds = %385
  br label %387

; <label>:387                                     ; preds = %386, %120
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %12)
          to label %388 unwind label %402

; <label>:388                                     ; preds = %387
  br label %389

; <label>:389                                     ; preds = %388, %116
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %10)
          to label %390 unwind label %402

; <label>:390                                     ; preds = %389
  br label %391

; <label>:391                                     ; preds = %390, %112
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %8)
          to label %392 unwind label %402

; <label>:392                                     ; preds = %391
  br label %393

; <label>:393                                     ; preds = %392, %108
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %6)
          to label %394 unwind label %402

; <label>:394                                     ; preds = %393
  br label %395

; <label>:395                                     ; preds = %394, %104
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %5)
          to label %396 unwind label %402

; <label>:396                                     ; preds = %395
  br label %397

; <label>:397                                     ; preds = %396
  %398 = load i8*, i8** %2
  %399 = load i32, i32* %3
  %400 = insertvalue { i8*, i32 } undef, i8* %398, 0
  %401 = insertvalue { i8*, i32 } %400, i32 %399, 1
  resume { i8*, i32 } %401

; <label>:402                                     ; preds = %395, %393, %391, %389, %387, %385, %383, %381, %379, %377, %375, %373, %371, %369, %367, %365, %363, %361, %359, %357, %355, %353, %351, %349, %347, %345, %343, %341, %339, %337, %335, %333, %331, %329, %327, %325, %323, %321, %319, %317, %315, %313, %311, %309, %307, %305, %303, %301, %296
  %403 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %404 = extractvalue { i8*, i32 } %403, 0
  call void @__clang_call_terminate(i8* %404) #14
  unreachable
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZN6DomainD2Ev(%struct.Domain* %this) unnamed_addr #0 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %4 = load %struct.Domain*, %struct.Domain** %1
  %5 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 49
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %5)
          to label %6 unwind label %104

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 48
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %7)
          to label %8 unwind label %109

; <label>:8                                       ; preds = %6
  %9 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 47
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %9)
          to label %10 unwind label %114

; <label>:10                                      ; preds = %8
  %11 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 46
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %11)
          to label %12 unwind label %121

; <label>:12                                      ; preds = %10
  %13 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 45
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %13)
          to label %14 unwind label %128

; <label>:14                                      ; preds = %12
  %15 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 44
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %15)
          to label %16 unwind label %135

; <label>:16                                      ; preds = %14
  %17 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 43
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %17)
          to label %18 unwind label %142

; <label>:18                                      ; preds = %16
  %19 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 42
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %19)
          to label %20 unwind label %149

; <label>:20                                      ; preds = %18
  %21 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 41
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %21)
          to label %22 unwind label %156

; <label>:22                                      ; preds = %20
  %23 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 40
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %23)
          to label %24 unwind label %163

; <label>:24                                      ; preds = %22
  %25 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 39
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %25)
          to label %26 unwind label %170

; <label>:26                                      ; preds = %24
  %27 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 38
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %27)
          to label %28 unwind label %177

; <label>:28                                      ; preds = %26
  %29 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 37
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %29)
          to label %30 unwind label %184

; <label>:30                                      ; preds = %28
  %31 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 36
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %31)
          to label %32 unwind label %191

; <label>:32                                      ; preds = %30
  %33 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 35
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %33)
          to label %34 unwind label %198

; <label>:34                                      ; preds = %32
  %35 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 34
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %35)
          to label %36 unwind label %205

; <label>:36                                      ; preds = %34
  %37 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 33
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %37)
          to label %38 unwind label %212

; <label>:38                                      ; preds = %36
  %39 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 32
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %39)
          to label %40 unwind label %219

; <label>:40                                      ; preds = %38
  %41 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 31
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %41)
          to label %42 unwind label %226

; <label>:42                                      ; preds = %40
  %43 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 30
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %43)
          to label %44 unwind label %233

; <label>:44                                      ; preds = %42
  %45 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 29
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %45)
          to label %46 unwind label %240

; <label>:46                                      ; preds = %44
  %47 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 28
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %47)
          to label %48 unwind label %247

; <label>:48                                      ; preds = %46
  %49 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 27
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %49)
          to label %50 unwind label %254

; <label>:50                                      ; preds = %48
  %51 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 26
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %51)
          to label %52 unwind label %261

; <label>:52                                      ; preds = %50
  %53 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 25
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %53)
          to label %54 unwind label %268

; <label>:54                                      ; preds = %52
  %55 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 24
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %55)
          to label %56 unwind label %275

; <label>:56                                      ; preds = %54
  %57 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 23
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %57)
          to label %58 unwind label %282

; <label>:58                                      ; preds = %56
  %59 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 22
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %59)
          to label %60 unwind label %289

; <label>:60                                      ; preds = %58
  %61 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 21
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %61)
          to label %62 unwind label %296

; <label>:62                                      ; preds = %60
  %63 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 20
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %63)
          to label %64 unwind label %303

; <label>:64                                      ; preds = %62
  %65 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 19
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %65)
          to label %66 unwind label %310

; <label>:66                                      ; preds = %64
  %67 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 18
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %67)
          to label %68 unwind label %317

; <label>:68                                      ; preds = %66
  %69 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 17
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %69)
          to label %70 unwind label %324

; <label>:70                                      ; preds = %68
  %71 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 16
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %71)
          to label %72 unwind label %331

; <label>:72                                      ; preds = %70
  %73 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 15
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %73)
          to label %74 unwind label %338

; <label>:74                                      ; preds = %72
  %75 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 14
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %75)
          to label %76 unwind label %345

; <label>:76                                      ; preds = %74
  %77 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 13
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %77)
          to label %78 unwind label %352

; <label>:78                                      ; preds = %76
  %79 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 12
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %79)
          to label %80 unwind label %359

; <label>:80                                      ; preds = %78
  %81 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 11
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %81)
          to label %82 unwind label %366

; <label>:82                                      ; preds = %80
  %83 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 10
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %83)
          to label %84 unwind label %373

; <label>:84                                      ; preds = %82
  %85 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 9
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %85)
          to label %86 unwind label %380

; <label>:86                                      ; preds = %84
  %87 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 8
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %87)
          to label %88 unwind label %387

; <label>:88                                      ; preds = %86
  %89 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 7
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %89)
          to label %90 unwind label %394

; <label>:90                                      ; preds = %88
  %91 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 6
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %91)
          to label %92 unwind label %401

; <label>:92                                      ; preds = %90
  %93 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 5
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %93)
          to label %94 unwind label %408

; <label>:94                                      ; preds = %92
  %95 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 4
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %95)
          to label %96 unwind label %415

; <label>:96                                      ; preds = %94
  %97 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 3
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %97)
          to label %98 unwind label %422

; <label>:98                                      ; preds = %96
  %99 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 2
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %99)
          to label %100 unwind label %429

; <label>:100                                     ; preds = %98
  %101 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 1
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %101)
          to label %102 unwind label %436

; <label>:102                                     ; preds = %100
  %103 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 0
  call void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %103)
  ret void

; <label>:104                                     ; preds = %0
  %105 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %106 = extractvalue { i8*, i32 } %105, 0
  store i8* %106, i8** %2
  %107 = extractvalue { i8*, i32 } %105, 1
  store i32 %107, i32* %3
  %108 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 48
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %108)
          to label %113 unwind label %451

; <label>:109                                     ; preds = %6
  %110 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %111 = extractvalue { i8*, i32 } %110, 0
  store i8* %111, i8** %2
  %112 = extractvalue { i8*, i32 } %110, 1
  store i32 %112, i32* %3
  br label %118

; <label>:113                                     ; preds = %104
  br label %118

; <label>:114                                     ; preds = %8
  %115 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %116 = extractvalue { i8*, i32 } %115, 0
  store i8* %116, i8** %2
  %117 = extractvalue { i8*, i32 } %115, 1
  store i32 %117, i32* %3
  br label %125

; <label>:118                                     ; preds = %113, %109
  %119 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 47
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %119)
          to label %120 unwind label %451

; <label>:120                                     ; preds = %118
  br label %125

; <label>:121                                     ; preds = %10
  %122 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %123 = extractvalue { i8*, i32 } %122, 0
  store i8* %123, i8** %2
  %124 = extractvalue { i8*, i32 } %122, 1
  store i32 %124, i32* %3
  br label %132

; <label>:125                                     ; preds = %120, %114
  %126 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 46
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %126)
          to label %127 unwind label %451

; <label>:127                                     ; preds = %125
  br label %132

; <label>:128                                     ; preds = %12
  %129 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %130 = extractvalue { i8*, i32 } %129, 0
  store i8* %130, i8** %2
  %131 = extractvalue { i8*, i32 } %129, 1
  store i32 %131, i32* %3
  br label %139

; <label>:132                                     ; preds = %127, %121
  %133 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 45
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %133)
          to label %134 unwind label %451

; <label>:134                                     ; preds = %132
  br label %139

; <label>:135                                     ; preds = %14
  %136 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %137 = extractvalue { i8*, i32 } %136, 0
  store i8* %137, i8** %2
  %138 = extractvalue { i8*, i32 } %136, 1
  store i32 %138, i32* %3
  br label %146

; <label>:139                                     ; preds = %134, %128
  %140 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 44
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %140)
          to label %141 unwind label %451

; <label>:141                                     ; preds = %139
  br label %146

; <label>:142                                     ; preds = %16
  %143 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %144 = extractvalue { i8*, i32 } %143, 0
  store i8* %144, i8** %2
  %145 = extractvalue { i8*, i32 } %143, 1
  store i32 %145, i32* %3
  br label %153

; <label>:146                                     ; preds = %141, %135
  %147 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 43
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %147)
          to label %148 unwind label %451

; <label>:148                                     ; preds = %146
  br label %153

; <label>:149                                     ; preds = %18
  %150 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %151 = extractvalue { i8*, i32 } %150, 0
  store i8* %151, i8** %2
  %152 = extractvalue { i8*, i32 } %150, 1
  store i32 %152, i32* %3
  br label %160

; <label>:153                                     ; preds = %148, %142
  %154 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 42
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %154)
          to label %155 unwind label %451

; <label>:155                                     ; preds = %153
  br label %160

; <label>:156                                     ; preds = %20
  %157 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %158 = extractvalue { i8*, i32 } %157, 0
  store i8* %158, i8** %2
  %159 = extractvalue { i8*, i32 } %157, 1
  store i32 %159, i32* %3
  br label %167

; <label>:160                                     ; preds = %155, %149
  %161 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 41
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %161)
          to label %162 unwind label %451

; <label>:162                                     ; preds = %160
  br label %167

; <label>:163                                     ; preds = %22
  %164 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %165 = extractvalue { i8*, i32 } %164, 0
  store i8* %165, i8** %2
  %166 = extractvalue { i8*, i32 } %164, 1
  store i32 %166, i32* %3
  br label %174

; <label>:167                                     ; preds = %162, %156
  %168 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 40
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %168)
          to label %169 unwind label %451

; <label>:169                                     ; preds = %167
  br label %174

; <label>:170                                     ; preds = %24
  %171 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %172 = extractvalue { i8*, i32 } %171, 0
  store i8* %172, i8** %2
  %173 = extractvalue { i8*, i32 } %171, 1
  store i32 %173, i32* %3
  br label %181

; <label>:174                                     ; preds = %169, %163
  %175 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 39
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %175)
          to label %176 unwind label %451

; <label>:176                                     ; preds = %174
  br label %181

; <label>:177                                     ; preds = %26
  %178 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %179 = extractvalue { i8*, i32 } %178, 0
  store i8* %179, i8** %2
  %180 = extractvalue { i8*, i32 } %178, 1
  store i32 %180, i32* %3
  br label %188

; <label>:181                                     ; preds = %176, %170
  %182 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 38
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %182)
          to label %183 unwind label %451

; <label>:183                                     ; preds = %181
  br label %188

; <label>:184                                     ; preds = %28
  %185 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %186 = extractvalue { i8*, i32 } %185, 0
  store i8* %186, i8** %2
  %187 = extractvalue { i8*, i32 } %185, 1
  store i32 %187, i32* %3
  br label %195

; <label>:188                                     ; preds = %183, %177
  %189 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 37
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %189)
          to label %190 unwind label %451

; <label>:190                                     ; preds = %188
  br label %195

; <label>:191                                     ; preds = %30
  %192 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %193 = extractvalue { i8*, i32 } %192, 0
  store i8* %193, i8** %2
  %194 = extractvalue { i8*, i32 } %192, 1
  store i32 %194, i32* %3
  br label %202

; <label>:195                                     ; preds = %190, %184
  %196 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 36
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %196)
          to label %197 unwind label %451

; <label>:197                                     ; preds = %195
  br label %202

; <label>:198                                     ; preds = %32
  %199 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %200 = extractvalue { i8*, i32 } %199, 0
  store i8* %200, i8** %2
  %201 = extractvalue { i8*, i32 } %199, 1
  store i32 %201, i32* %3
  br label %209

; <label>:202                                     ; preds = %197, %191
  %203 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 35
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %203)
          to label %204 unwind label %451

; <label>:204                                     ; preds = %202
  br label %209

; <label>:205                                     ; preds = %34
  %206 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %207 = extractvalue { i8*, i32 } %206, 0
  store i8* %207, i8** %2
  %208 = extractvalue { i8*, i32 } %206, 1
  store i32 %208, i32* %3
  br label %216

; <label>:209                                     ; preds = %204, %198
  %210 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 34
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %210)
          to label %211 unwind label %451

; <label>:211                                     ; preds = %209
  br label %216

; <label>:212                                     ; preds = %36
  %213 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %214 = extractvalue { i8*, i32 } %213, 0
  store i8* %214, i8** %2
  %215 = extractvalue { i8*, i32 } %213, 1
  store i32 %215, i32* %3
  br label %223

; <label>:216                                     ; preds = %211, %205
  %217 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 33
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %217)
          to label %218 unwind label %451

; <label>:218                                     ; preds = %216
  br label %223

; <label>:219                                     ; preds = %38
  %220 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %221 = extractvalue { i8*, i32 } %220, 0
  store i8* %221, i8** %2
  %222 = extractvalue { i8*, i32 } %220, 1
  store i32 %222, i32* %3
  br label %230

; <label>:223                                     ; preds = %218, %212
  %224 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 32
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %224)
          to label %225 unwind label %451

; <label>:225                                     ; preds = %223
  br label %230

; <label>:226                                     ; preds = %40
  %227 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %228 = extractvalue { i8*, i32 } %227, 0
  store i8* %228, i8** %2
  %229 = extractvalue { i8*, i32 } %227, 1
  store i32 %229, i32* %3
  br label %237

; <label>:230                                     ; preds = %225, %219
  %231 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 31
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %231)
          to label %232 unwind label %451

; <label>:232                                     ; preds = %230
  br label %237

; <label>:233                                     ; preds = %42
  %234 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %235 = extractvalue { i8*, i32 } %234, 0
  store i8* %235, i8** %2
  %236 = extractvalue { i8*, i32 } %234, 1
  store i32 %236, i32* %3
  br label %244

; <label>:237                                     ; preds = %232, %226
  %238 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 30
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %238)
          to label %239 unwind label %451

; <label>:239                                     ; preds = %237
  br label %244

; <label>:240                                     ; preds = %44
  %241 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %242 = extractvalue { i8*, i32 } %241, 0
  store i8* %242, i8** %2
  %243 = extractvalue { i8*, i32 } %241, 1
  store i32 %243, i32* %3
  br label %251

; <label>:244                                     ; preds = %239, %233
  %245 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 29
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %245)
          to label %246 unwind label %451

; <label>:246                                     ; preds = %244
  br label %251

; <label>:247                                     ; preds = %46
  %248 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %249 = extractvalue { i8*, i32 } %248, 0
  store i8* %249, i8** %2
  %250 = extractvalue { i8*, i32 } %248, 1
  store i32 %250, i32* %3
  br label %258

; <label>:251                                     ; preds = %246, %240
  %252 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 28
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %252)
          to label %253 unwind label %451

; <label>:253                                     ; preds = %251
  br label %258

; <label>:254                                     ; preds = %48
  %255 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %256 = extractvalue { i8*, i32 } %255, 0
  store i8* %256, i8** %2
  %257 = extractvalue { i8*, i32 } %255, 1
  store i32 %257, i32* %3
  br label %265

; <label>:258                                     ; preds = %253, %247
  %259 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 27
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %259)
          to label %260 unwind label %451

; <label>:260                                     ; preds = %258
  br label %265

; <label>:261                                     ; preds = %50
  %262 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %263 = extractvalue { i8*, i32 } %262, 0
  store i8* %263, i8** %2
  %264 = extractvalue { i8*, i32 } %262, 1
  store i32 %264, i32* %3
  br label %272

; <label>:265                                     ; preds = %260, %254
  %266 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 26
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %266)
          to label %267 unwind label %451

; <label>:267                                     ; preds = %265
  br label %272

; <label>:268                                     ; preds = %52
  %269 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %270 = extractvalue { i8*, i32 } %269, 0
  store i8* %270, i8** %2
  %271 = extractvalue { i8*, i32 } %269, 1
  store i32 %271, i32* %3
  br label %279

; <label>:272                                     ; preds = %267, %261
  %273 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 25
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %273)
          to label %274 unwind label %451

; <label>:274                                     ; preds = %272
  br label %279

; <label>:275                                     ; preds = %54
  %276 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %277 = extractvalue { i8*, i32 } %276, 0
  store i8* %277, i8** %2
  %278 = extractvalue { i8*, i32 } %276, 1
  store i32 %278, i32* %3
  br label %286

; <label>:279                                     ; preds = %274, %268
  %280 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 24
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %280)
          to label %281 unwind label %451

; <label>:281                                     ; preds = %279
  br label %286

; <label>:282                                     ; preds = %56
  %283 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %284 = extractvalue { i8*, i32 } %283, 0
  store i8* %284, i8** %2
  %285 = extractvalue { i8*, i32 } %283, 1
  store i32 %285, i32* %3
  br label %293

; <label>:286                                     ; preds = %281, %275
  %287 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 23
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %287)
          to label %288 unwind label %451

; <label>:288                                     ; preds = %286
  br label %293

; <label>:289                                     ; preds = %58
  %290 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %291 = extractvalue { i8*, i32 } %290, 0
  store i8* %291, i8** %2
  %292 = extractvalue { i8*, i32 } %290, 1
  store i32 %292, i32* %3
  br label %300

; <label>:293                                     ; preds = %288, %282
  %294 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 22
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %294)
          to label %295 unwind label %451

; <label>:295                                     ; preds = %293
  br label %300

; <label>:296                                     ; preds = %60
  %297 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %298 = extractvalue { i8*, i32 } %297, 0
  store i8* %298, i8** %2
  %299 = extractvalue { i8*, i32 } %297, 1
  store i32 %299, i32* %3
  br label %307

; <label>:300                                     ; preds = %295, %289
  %301 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 21
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %301)
          to label %302 unwind label %451

; <label>:302                                     ; preds = %300
  br label %307

; <label>:303                                     ; preds = %62
  %304 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %305 = extractvalue { i8*, i32 } %304, 0
  store i8* %305, i8** %2
  %306 = extractvalue { i8*, i32 } %304, 1
  store i32 %306, i32* %3
  br label %314

; <label>:307                                     ; preds = %302, %296
  %308 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 20
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %308)
          to label %309 unwind label %451

; <label>:309                                     ; preds = %307
  br label %314

; <label>:310                                     ; preds = %64
  %311 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %312 = extractvalue { i8*, i32 } %311, 0
  store i8* %312, i8** %2
  %313 = extractvalue { i8*, i32 } %311, 1
  store i32 %313, i32* %3
  br label %321

; <label>:314                                     ; preds = %309, %303
  %315 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 19
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %315)
          to label %316 unwind label %451

; <label>:316                                     ; preds = %314
  br label %321

; <label>:317                                     ; preds = %66
  %318 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %319 = extractvalue { i8*, i32 } %318, 0
  store i8* %319, i8** %2
  %320 = extractvalue { i8*, i32 } %318, 1
  store i32 %320, i32* %3
  br label %328

; <label>:321                                     ; preds = %316, %310
  %322 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 18
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %322)
          to label %323 unwind label %451

; <label>:323                                     ; preds = %321
  br label %328

; <label>:324                                     ; preds = %68
  %325 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %326 = extractvalue { i8*, i32 } %325, 0
  store i8* %326, i8** %2
  %327 = extractvalue { i8*, i32 } %325, 1
  store i32 %327, i32* %3
  br label %335

; <label>:328                                     ; preds = %323, %317
  %329 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 17
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %329)
          to label %330 unwind label %451

; <label>:330                                     ; preds = %328
  br label %335

; <label>:331                                     ; preds = %70
  %332 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %333 = extractvalue { i8*, i32 } %332, 0
  store i8* %333, i8** %2
  %334 = extractvalue { i8*, i32 } %332, 1
  store i32 %334, i32* %3
  br label %342

; <label>:335                                     ; preds = %330, %324
  %336 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 16
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %336)
          to label %337 unwind label %451

; <label>:337                                     ; preds = %335
  br label %342

; <label>:338                                     ; preds = %72
  %339 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %340 = extractvalue { i8*, i32 } %339, 0
  store i8* %340, i8** %2
  %341 = extractvalue { i8*, i32 } %339, 1
  store i32 %341, i32* %3
  br label %349

; <label>:342                                     ; preds = %337, %331
  %343 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 15
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %343)
          to label %344 unwind label %451

; <label>:344                                     ; preds = %342
  br label %349

; <label>:345                                     ; preds = %74
  %346 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %347 = extractvalue { i8*, i32 } %346, 0
  store i8* %347, i8** %2
  %348 = extractvalue { i8*, i32 } %346, 1
  store i32 %348, i32* %3
  br label %356

; <label>:349                                     ; preds = %344, %338
  %350 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 14
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %350)
          to label %351 unwind label %451

; <label>:351                                     ; preds = %349
  br label %356

; <label>:352                                     ; preds = %76
  %353 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %354 = extractvalue { i8*, i32 } %353, 0
  store i8* %354, i8** %2
  %355 = extractvalue { i8*, i32 } %353, 1
  store i32 %355, i32* %3
  br label %363

; <label>:356                                     ; preds = %351, %345
  %357 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 13
  invoke void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %357)
          to label %358 unwind label %451

; <label>:358                                     ; preds = %356
  br label %363

; <label>:359                                     ; preds = %78
  %360 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %361 = extractvalue { i8*, i32 } %360, 0
  store i8* %361, i8** %2
  %362 = extractvalue { i8*, i32 } %360, 1
  store i32 %362, i32* %3
  br label %370

; <label>:363                                     ; preds = %358, %352
  %364 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 12
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %364)
          to label %365 unwind label %451

; <label>:365                                     ; preds = %363
  br label %370

; <label>:366                                     ; preds = %80
  %367 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %368 = extractvalue { i8*, i32 } %367, 0
  store i8* %368, i8** %2
  %369 = extractvalue { i8*, i32 } %367, 1
  store i32 %369, i32* %3
  br label %377

; <label>:370                                     ; preds = %365, %359
  %371 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 11
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %371)
          to label %372 unwind label %451

; <label>:372                                     ; preds = %370
  br label %377

; <label>:373                                     ; preds = %82
  %374 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %375 = extractvalue { i8*, i32 } %374, 0
  store i8* %375, i8** %2
  %376 = extractvalue { i8*, i32 } %374, 1
  store i32 %376, i32* %3
  br label %384

; <label>:377                                     ; preds = %372, %366
  %378 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 10
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %378)
          to label %379 unwind label %451

; <label>:379                                     ; preds = %377
  br label %384

; <label>:380                                     ; preds = %84
  %381 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %382 = extractvalue { i8*, i32 } %381, 0
  store i8* %382, i8** %2
  %383 = extractvalue { i8*, i32 } %381, 1
  store i32 %383, i32* %3
  br label %391

; <label>:384                                     ; preds = %379, %373
  %385 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 9
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %385)
          to label %386 unwind label %451

; <label>:386                                     ; preds = %384
  br label %391

; <label>:387                                     ; preds = %86
  %388 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %389 = extractvalue { i8*, i32 } %388, 0
  store i8* %389, i8** %2
  %390 = extractvalue { i8*, i32 } %388, 1
  store i32 %390, i32* %3
  br label %398

; <label>:391                                     ; preds = %386, %380
  %392 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 8
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %392)
          to label %393 unwind label %451

; <label>:393                                     ; preds = %391
  br label %398

; <label>:394                                     ; preds = %88
  %395 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %396 = extractvalue { i8*, i32 } %395, 0
  store i8* %396, i8** %2
  %397 = extractvalue { i8*, i32 } %395, 1
  store i32 %397, i32* %3
  br label %405

; <label>:398                                     ; preds = %393, %387
  %399 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 7
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %399)
          to label %400 unwind label %451

; <label>:400                                     ; preds = %398
  br label %405

; <label>:401                                     ; preds = %90
  %402 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %403 = extractvalue { i8*, i32 } %402, 0
  store i8* %403, i8** %2
  %404 = extractvalue { i8*, i32 } %402, 1
  store i32 %404, i32* %3
  br label %412

; <label>:405                                     ; preds = %400, %394
  %406 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 6
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %406)
          to label %407 unwind label %451

; <label>:407                                     ; preds = %405
  br label %412

; <label>:408                                     ; preds = %92
  %409 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %410 = extractvalue { i8*, i32 } %409, 0
  store i8* %410, i8** %2
  %411 = extractvalue { i8*, i32 } %409, 1
  store i32 %411, i32* %3
  br label %419

; <label>:412                                     ; preds = %407, %401
  %413 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 5
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %413)
          to label %414 unwind label %451

; <label>:414                                     ; preds = %412
  br label %419

; <label>:415                                     ; preds = %94
  %416 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %417 = extractvalue { i8*, i32 } %416, 0
  store i8* %417, i8** %2
  %418 = extractvalue { i8*, i32 } %416, 1
  store i32 %418, i32* %3
  br label %426

; <label>:419                                     ; preds = %414, %408
  %420 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 4
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %420)
          to label %421 unwind label %451

; <label>:421                                     ; preds = %419
  br label %426

; <label>:422                                     ; preds = %96
  %423 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %424 = extractvalue { i8*, i32 } %423, 0
  store i8* %424, i8** %2
  %425 = extractvalue { i8*, i32 } %423, 1
  store i32 %425, i32* %3
  br label %433

; <label>:426                                     ; preds = %421, %415
  %427 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 3
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %427)
          to label %428 unwind label %451

; <label>:428                                     ; preds = %426
  br label %433

; <label>:429                                     ; preds = %98
  %430 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %431 = extractvalue { i8*, i32 } %430, 0
  store i8* %431, i8** %2
  %432 = extractvalue { i8*, i32 } %430, 1
  store i32 %432, i32* %3
  br label %440

; <label>:433                                     ; preds = %428, %422
  %434 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 2
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %434)
          to label %435 unwind label %451

; <label>:435                                     ; preds = %433
  br label %440

; <label>:436                                     ; preds = %100
  %437 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %438 = extractvalue { i8*, i32 } %437, 0
  store i8* %438, i8** %2
  %439 = extractvalue { i8*, i32 } %437, 1
  store i32 %439, i32* %3
  br label %443

; <label>:440                                     ; preds = %435, %429
  %441 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 1
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %441)
          to label %442 unwind label %451

; <label>:442                                     ; preds = %440
  br label %443

; <label>:443                                     ; preds = %442, %436
  %444 = getelementptr inbounds %struct.Domain, %struct.Domain* %4, i32 0, i32 0
  invoke void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %444)
          to label %445 unwind label %451

; <label>:445                                     ; preds = %443
  br label %446

; <label>:446                                     ; preds = %445
  %447 = load i8*, i8** %2
  %448 = load i32, i32* %3
  %449 = insertvalue { i8*, i32 } undef, i8* %447, 0
  %450 = insertvalue { i8*, i32 } %449, i32 %448, 1
  resume { i8*, i32 } %450

; <label>:451                                     ; preds = %443, %440, %433, %426, %419, %412, %405, %398, %391, %384, %377, %370, %363, %356, %349, %342, %335, %328, %321, %314, %307, %300, %293, %286, %279, %272, %265, %258, %251, %244, %237, %230, %223, %216, %209, %202, %195, %188, %181, %174, %167, %160, %153, %146, %139, %132, %125, %118, %104
  %452 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %453 = extractvalue { i8*, i32 } %452, 0
  call void @__clang_call_terminate(i8* %453) #14
  unreachable
}

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #1

; Function Attrs: uwtable
define i32 @main(i32 %argc, i8** %argv) #2 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8**, align 8
  %edgeElems = alloca i32, align 4
  %edgeNodes = alloca i32, align 4
  %tx = alloca double, align 8
  %ty = alloca double, align 8
  %tz = alloca double, align 8
  %nidx = alloca i32, align 4
  %zidx = alloca i32, align 4
  %domElems = alloca i32, align 4
  %plane = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %plane1 = alloca i32, align 4
  %row2 = alloca i32, align 4
  %col3 = alloca i32, align 4
  %localNode = alloca i32*, align 8
  %i = alloca i32, align 4
  %i4 = alloca i32, align 4
  %x_local = alloca [8 x double], align 16
  %y_local = alloca [8 x double], align 16
  %z_local = alloca [8 x double], align 16
  %elemToNode = alloca i32*, align 8
  %lnode = alloca i32, align 4
  %gnode = alloca i32, align 4
  %volume = alloca double, align 8
  %j = alloca i32, align 4
  %idx = alloca i32, align 4
  %i5 = alloca i32, align 4
  %planeInc = alloca i32, align 4
  %rowInc = alloca i32, align 4
  %j6 = alloca i32, align 4
  %i7 = alloca i32, align 4
  %i8 = alloca i32, align 4
  %i9 = alloca i32, align 4
  %i10 = alloca i32, align 4
  %i11 = alloca i32, align 4
  %i12 = alloca i32, align 4
  %i13 = alloca i32, align 4
  %planeInc14 = alloca i32, align 4
  %rowInc15 = alloca i32, align 4
  %j16 = alloca i32, align 4
  %start = alloca %struct.timeval, align 8
  %end = alloca %struct.timeval, align 8
  %elapsed_time = alloca double, align 8
  %ElemId = alloca i32, align 4
  %MaxAbsDiff = alloca double, align 8
  %TotalAbsDiff = alloca double, align 8
  %MaxRelDiff = alloca double, align 8
  %j17 = alloca i32, align 4
  %k = alloca i32, align 4
  %AbsDiff = alloca double, align 8
  %RelDiff = alloca double, align 8
  store i32 0, i32* %1
  store i32 %argc, i32* %2, align 4, !tbaa !5
  store i8** %argv, i8*** %3, align 8, !tbaa !1
  %4 = load i8**, i8*** %3, align 8, !tbaa !1
  %5 = getelementptr inbounds i8*, i8** %4, i64 1
  %6 = load i8*, i8** %5, align 8, !tbaa !1
  %7 = call i32 @atoi(i8* %6) #15
  store i32 %7, i32* %edgeElems, align 4, !tbaa !5
  %8 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %edgeNodes, align 4, !tbaa !5
  %10 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %11 = call dereferenceable(4) i32* @_ZN6Domain5sizeXEv(%struct.Domain* @domain)
  store i32 %10, i32* %11, !tbaa !5
  %12 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %13 = call dereferenceable(4) i32* @_ZN6Domain5sizeYEv(%struct.Domain* @domain)
  store i32 %12, i32* %13, !tbaa !5
  %14 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %15 = call dereferenceable(4) i32* @_ZN6Domain5sizeZEv(%struct.Domain* @domain)
  store i32 %14, i32* %15, !tbaa !5
  %16 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %17 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %18 = mul nsw i32 %16, %17
  %19 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %20 = mul nsw i32 %18, %19
  %21 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  store i32 %20, i32* %21, !tbaa !5
  %22 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %23 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %24 = mul nsw i32 %22, %23
  %25 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %26 = mul nsw i32 %24, %25
  %27 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  store i32 %26, i32* %27, !tbaa !5
  %28 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %29 = load i32, i32* %28, !tbaa !5
  store i32 %29, i32* %domElems, align 4, !tbaa !5
  %30 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %31 = load i32, i32* %30, !tbaa !5
  %32 = sext i32 %31 to i64
  call void @_ZN6Domain22AllocateElemPersistentEm(%struct.Domain* @domain, i64 %32)
  %33 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %34 = load i32, i32* %33, !tbaa !5
  %35 = sext i32 %34 to i64
  call void @_ZN6Domain21AllocateElemTemporaryEm(%struct.Domain* @domain, i64 %35)
  %36 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %37 = load i32, i32* %36, !tbaa !5
  %38 = sext i32 %37 to i64
  call void @_ZN6Domain23AllocateNodalPersistentEm(%struct.Domain* @domain, i64 %38)
  %39 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %40 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %41 = mul nsw i32 %39, %40
  %42 = sext i32 %41 to i64
  call void @_ZN6Domain16AllocateNodesetsEm(%struct.Domain* @domain, i64 %42)
  store i32 0, i32* %nidx, align 4, !tbaa !5
  store double 0.000000e+00, double* %tz, align 8, !tbaa !7
  store i32 0, i32* %plane, align 4, !tbaa !5
  br label %43

; <label>:43                                      ; preds = %98, %0
  %44 = load i32, i32* %plane, align 4, !tbaa !5
  %45 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %101

; <label>:47                                      ; preds = %43
  store double 0.000000e+00, double* %ty, align 8, !tbaa !7
  store i32 0, i32* %row, align 4, !tbaa !5
  br label %48

; <label>:48                                      ; preds = %87, %47
  %49 = load i32, i32* %row, align 4, !tbaa !5
  %50 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %51 = icmp slt i32 %49, %50
  br i1 %51, label %52, label %90

; <label>:52                                      ; preds = %48
  store double 0.000000e+00, double* %tx, align 8, !tbaa !7
  store i32 0, i32* %col, align 4, !tbaa !5
  br label %53

; <label>:53                                      ; preds = %76, %52
  %54 = load i32, i32* %col, align 4, !tbaa !5
  %55 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %79

; <label>:57                                      ; preds = %53
  %58 = load double, double* %tx, align 8, !tbaa !7
  %59 = load i32, i32* %nidx, align 4, !tbaa !5
  %60 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %59)
  store double %58, double* %60, !tbaa !7
  %61 = load double, double* %ty, align 8, !tbaa !7
  %62 = load i32, i32* %nidx, align 4, !tbaa !5
  %63 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %62)
  store double %61, double* %63, !tbaa !7
  %64 = load double, double* %tz, align 8, !tbaa !7
  %65 = load i32, i32* %nidx, align 4, !tbaa !5
  %66 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %65)
  store double %64, double* %66, !tbaa !7
  %67 = load i32, i32* %nidx, align 4, !tbaa !5
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %nidx, align 4, !tbaa !5
  %69 = load i32, i32* %col, align 4, !tbaa !5
  %70 = add nsw i32 %69, 1
  %71 = sitofp i32 %70 to double
  %72 = fmul double 1.125000e+00, %71
  %73 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %74 = sitofp i32 %73 to double
  %75 = fdiv double %72, %74
  store double %75, double* %tx, align 8, !tbaa !7
  br label %76

; <label>:76                                      ; preds = %57
  %77 = load i32, i32* %col, align 4, !tbaa !5
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %col, align 4, !tbaa !5
  br label %53

; <label>:79                                      ; preds = %53
  %80 = load i32, i32* %row, align 4, !tbaa !5
  %81 = add nsw i32 %80, 1
  %82 = sitofp i32 %81 to double
  %83 = fmul double 1.125000e+00, %82
  %84 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %85 = sitofp i32 %84 to double
  %86 = fdiv double %83, %85
  store double %86, double* %ty, align 8, !tbaa !7
  br label %87

; <label>:87                                      ; preds = %79
  %88 = load i32, i32* %row, align 4, !tbaa !5
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %row, align 4, !tbaa !5
  br label %48

; <label>:90                                      ; preds = %48
  %91 = load i32, i32* %plane, align 4, !tbaa !5
  %92 = add nsw i32 %91, 1
  %93 = sitofp i32 %92 to double
  %94 = fmul double 1.125000e+00, %93
  %95 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %96 = sitofp i32 %95 to double
  %97 = fdiv double %94, %96
  store double %97, double* %tz, align 8, !tbaa !7
  br label %98

; <label>:98                                      ; preds = %90
  %99 = load i32, i32* %plane, align 4, !tbaa !5
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %plane, align 4, !tbaa !5
  br label %43

; <label>:101                                     ; preds = %43
  store i32 0, i32* %nidx, align 4, !tbaa !5
  store i32 0, i32* %zidx, align 4, !tbaa !5
  store i32 0, i32* %plane1, align 4, !tbaa !5
  br label %102

; <label>:102                                     ; preds = %188, %101
  %103 = load i32, i32* %plane1, align 4, !tbaa !5
  %104 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %105 = icmp slt i32 %103, %104
  br i1 %105, label %106, label %191

; <label>:106                                     ; preds = %102
  store i32 0, i32* %row2, align 4, !tbaa !5
  br label %107

; <label>:107                                     ; preds = %181, %106
  %108 = load i32, i32* %row2, align 4, !tbaa !5
  %109 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %111, label %184

; <label>:111                                     ; preds = %107
  store i32 0, i32* %col3, align 4, !tbaa !5
  br label %112

; <label>:112                                     ; preds = %175, %111
  %113 = load i32, i32* %col3, align 4, !tbaa !5
  %114 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %116, label %178

; <label>:116                                     ; preds = %112
  %117 = load i32, i32* %zidx, align 4, !tbaa !5
  %118 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %117)
  store i32* %118, i32** %localNode, align 8, !tbaa !1
  %119 = load i32, i32* %nidx, align 4, !tbaa !5
  %120 = load i32*, i32** %localNode, align 8, !tbaa !1
  %121 = getelementptr inbounds i32, i32* %120, i64 0
  store i32 %119, i32* %121, align 4, !tbaa !5
  %122 = load i32, i32* %nidx, align 4, !tbaa !5
  %123 = add nsw i32 %122, 1
  %124 = load i32*, i32** %localNode, align 8, !tbaa !1
  %125 = getelementptr inbounds i32, i32* %124, i64 1
  store i32 %123, i32* %125, align 4, !tbaa !5
  %126 = load i32, i32* %nidx, align 4, !tbaa !5
  %127 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %128 = add nsw i32 %126, %127
  %129 = add nsw i32 %128, 1
  %130 = load i32*, i32** %localNode, align 8, !tbaa !1
  %131 = getelementptr inbounds i32, i32* %130, i64 2
  store i32 %129, i32* %131, align 4, !tbaa !5
  %132 = load i32, i32* %nidx, align 4, !tbaa !5
  %133 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %134 = add nsw i32 %132, %133
  %135 = load i32*, i32** %localNode, align 8, !tbaa !1
  %136 = getelementptr inbounds i32, i32* %135, i64 3
  store i32 %134, i32* %136, align 4, !tbaa !5
  %137 = load i32, i32* %nidx, align 4, !tbaa !5
  %138 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %139 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %140 = mul nsw i32 %138, %139
  %141 = add nsw i32 %137, %140
  %142 = load i32*, i32** %localNode, align 8, !tbaa !1
  %143 = getelementptr inbounds i32, i32* %142, i64 4
  store i32 %141, i32* %143, align 4, !tbaa !5
  %144 = load i32, i32* %nidx, align 4, !tbaa !5
  %145 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %146 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %147 = mul nsw i32 %145, %146
  %148 = add nsw i32 %144, %147
  %149 = add nsw i32 %148, 1
  %150 = load i32*, i32** %localNode, align 8, !tbaa !1
  %151 = getelementptr inbounds i32, i32* %150, i64 5
  store i32 %149, i32* %151, align 4, !tbaa !5
  %152 = load i32, i32* %nidx, align 4, !tbaa !5
  %153 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %154 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %155 = mul nsw i32 %153, %154
  %156 = add nsw i32 %152, %155
  %157 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %158 = add nsw i32 %156, %157
  %159 = add nsw i32 %158, 1
  %160 = load i32*, i32** %localNode, align 8, !tbaa !1
  %161 = getelementptr inbounds i32, i32* %160, i64 6
  store i32 %159, i32* %161, align 4, !tbaa !5
  %162 = load i32, i32* %nidx, align 4, !tbaa !5
  %163 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %164 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %165 = mul nsw i32 %163, %164
  %166 = add nsw i32 %162, %165
  %167 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %168 = add nsw i32 %166, %167
  %169 = load i32*, i32** %localNode, align 8, !tbaa !1
  %170 = getelementptr inbounds i32, i32* %169, i64 7
  store i32 %168, i32* %170, align 4, !tbaa !5
  %171 = load i32, i32* %zidx, align 4, !tbaa !5
  %172 = add nsw i32 %171, 1
  store i32 %172, i32* %zidx, align 4, !tbaa !5
  %173 = load i32, i32* %nidx, align 4, !tbaa !5
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %nidx, align 4, !tbaa !5
  br label %175

; <label>:175                                     ; preds = %116
  %176 = load i32, i32* %col3, align 4, !tbaa !5
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %col3, align 4, !tbaa !5
  br label %112

; <label>:178                                     ; preds = %112
  %179 = load i32, i32* %nidx, align 4, !tbaa !5
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %nidx, align 4, !tbaa !5
  br label %181

; <label>:181                                     ; preds = %178
  %182 = load i32, i32* %row2, align 4, !tbaa !5
  %183 = add nsw i32 %182, 1
  store i32 %183, i32* %row2, align 4, !tbaa !5
  br label %107

; <label>:184                                     ; preds = %107
  %185 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %186 = load i32, i32* %nidx, align 4, !tbaa !5
  %187 = add nsw i32 %186, %185
  store i32 %187, i32* %nidx, align 4, !tbaa !5
  br label %188

; <label>:188                                     ; preds = %184
  %189 = load i32, i32* %plane1, align 4, !tbaa !5
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %plane1, align 4, !tbaa !5
  br label %102

; <label>:191                                     ; preds = %102
  call void @_ZN6Domain23AllocateNodeElemIndexesEv(%struct.Domain* @domain)
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %192

; <label>:192                                     ; preds = %200, %191
  %193 = load i32, i32* %i, align 4, !tbaa !5
  %194 = load i32, i32* %domElems, align 4, !tbaa !5
  %195 = icmp slt i32 %193, %194
  br i1 %195, label %196, label %203

; <label>:196                                     ; preds = %192
  %197 = load i32, i32* %i, align 4, !tbaa !5
  %198 = load i32, i32* %i, align 4, !tbaa !5
  %199 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %198)
  store i32 %197, i32* %199, !tbaa !5
  br label %200

; <label>:200                                     ; preds = %196
  %201 = load i32, i32* %i, align 4, !tbaa !5
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %i, align 4, !tbaa !5
  br label %192

; <label>:203                                     ; preds = %192
  %204 = call dereferenceable(8) double* @_ZN6Domain7dtfixedEv(%struct.Domain* @domain)
  store double -1.000000e-07, double* %204, !tbaa !7
  %205 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  store double 1.000000e-07, double* %205, !tbaa !7
  %206 = call dereferenceable(8) double* @_ZN6Domain15deltatimemultlbEv(%struct.Domain* @domain)
  store double 1.100000e+00, double* %206, !tbaa !7
  %207 = call dereferenceable(8) double* @_ZN6Domain15deltatimemultubEv(%struct.Domain* @domain)
  store double 1.200000e+00, double* %207, !tbaa !7
  %208 = call dereferenceable(8) double* @_ZN6Domain8stoptimeEv(%struct.Domain* @domain)
  store double 1.000000e-02, double* %208, !tbaa !7
  %209 = call dereferenceable(8) double* @_ZN6Domain9dtcourantEv(%struct.Domain* @domain)
  store double 1.000000e+20, double* %209, !tbaa !7
  %210 = call dereferenceable(8) double* @_ZN6Domain7dthydroEv(%struct.Domain* @domain)
  store double 1.000000e+20, double* %210, !tbaa !7
  %211 = call dereferenceable(8) double* @_ZN6Domain5dtmaxEv(%struct.Domain* @domain)
  store double 1.000000e-02, double* %211, !tbaa !7
  %212 = call dereferenceable(8) double* @_ZN6Domain4timeEv(%struct.Domain* @domain)
  store double 0.000000e+00, double* %212, !tbaa !7
  %213 = call dereferenceable(4) i32* @_ZN6Domain5cycleEv(%struct.Domain* @domain)
  store i32 0, i32* %213, !tbaa !5
  %214 = call dereferenceable(8) double* @_ZN6Domain5e_cutEv(%struct.Domain* @domain)
  store double 1.000000e-07, double* %214, !tbaa !7
  %215 = call dereferenceable(8) double* @_ZN6Domain5p_cutEv(%struct.Domain* @domain)
  store double 1.000000e-07, double* %215, !tbaa !7
  %216 = call dereferenceable(8) double* @_ZN6Domain5q_cutEv(%struct.Domain* @domain)
  store double 1.000000e-07, double* %216, !tbaa !7
  %217 = call dereferenceable(8) double* @_ZN6Domain5u_cutEv(%struct.Domain* @domain)
  store double 1.000000e-07, double* %217, !tbaa !7
  %218 = call dereferenceable(8) double* @_ZN6Domain5v_cutEv(%struct.Domain* @domain)
  store double 1.000000e-10, double* %218, !tbaa !7
  %219 = call dereferenceable(8) double* @_ZN6Domain6hgcoefEv(%struct.Domain* @domain)
  store double 3.000000e+00, double* %219, !tbaa !7
  %220 = call dereferenceable(8) double* @_ZN6Domain5ss4o3Ev(%struct.Domain* @domain)
  store double 0x3FF5555555555555, double* %220, !tbaa !7
  %221 = call dereferenceable(8) double* @_ZN6Domain5qstopEv(%struct.Domain* @domain)
  store double 1.000000e+12, double* %221, !tbaa !7
  %222 = call dereferenceable(8) double* @_ZN6Domain15monoq_max_slopeEv(%struct.Domain* @domain)
  store double 1.000000e+00, double* %222, !tbaa !7
  %223 = call dereferenceable(8) double* @_ZN6Domain18monoq_limiter_multEv(%struct.Domain* @domain)
  store double 2.000000e+00, double* %223, !tbaa !7
  %224 = call dereferenceable(8) double* @_ZN6Domain9qlc_monoqEv(%struct.Domain* @domain)
  store double 5.000000e-01, double* %224, !tbaa !7
  %225 = call dereferenceable(8) double* @_ZN6Domain9qqc_monoqEv(%struct.Domain* @domain)
  store double 0x3FE5555555555555, double* %225, !tbaa !7
  %226 = call dereferenceable(8) double* @_ZN6Domain3qqcEv(%struct.Domain* @domain)
  store double 2.000000e+00, double* %226, !tbaa !7
  %227 = call dereferenceable(8) double* @_ZN6Domain4pminEv(%struct.Domain* @domain)
  store double 0.000000e+00, double* %227, !tbaa !7
  %228 = call dereferenceable(8) double* @_ZN6Domain4eminEv(%struct.Domain* @domain)
  store double -1.000000e+15, double* %228, !tbaa !7
  %229 = call dereferenceable(8) double* @_ZN6Domain7dvovmaxEv(%struct.Domain* @domain)
  store double 1.000000e-01, double* %229, !tbaa !7
  %230 = call dereferenceable(8) double* @_ZN6Domain7eosvmaxEv(%struct.Domain* @domain)
  store double 1.000000e+09, double* %230, !tbaa !7
  %231 = call dereferenceable(8) double* @_ZN6Domain7eosvminEv(%struct.Domain* @domain)
  store double 1.000000e-09, double* %231, !tbaa !7
  %232 = call dereferenceable(8) double* @_ZN6Domain7refdensEv(%struct.Domain* @domain)
  store double 1.000000e+00, double* %232, !tbaa !7
  store i32 0, i32* %i4, align 4, !tbaa !5
  br label %233

; <label>:233                                     ; preds = %306, %203
  %234 = load i32, i32* %i4, align 4, !tbaa !5
  %235 = load i32, i32* %domElems, align 4, !tbaa !5
  %236 = icmp slt i32 %234, %235
  br i1 %236, label %237, label %309

; <label>:237                                     ; preds = %233
  %238 = bitcast [8 x double]* %x_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %238) #1
  %239 = bitcast [8 x double]* %y_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %239) #1
  %240 = bitcast [8 x double]* %z_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %240) #1
  %241 = load i32, i32* %i4, align 4, !tbaa !5
  %242 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %241)
  store i32* %242, i32** %elemToNode, align 8, !tbaa !1
  store i32 0, i32* %lnode, align 4, !tbaa !5
  br label %243

; <label>:243                                     ; preds = %270, %237
  %244 = load i32, i32* %lnode, align 4, !tbaa !5
  %245 = icmp slt i32 %244, 8
  br i1 %245, label %246, label %273

; <label>:246                                     ; preds = %243
  %247 = load i32, i32* %lnode, align 4, !tbaa !5
  %248 = sext i32 %247 to i64
  %249 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %250 = getelementptr inbounds i32, i32* %249, i64 %248
  %251 = load i32, i32* %250, align 4, !tbaa !5
  store i32 %251, i32* %gnode, align 4, !tbaa !5
  %252 = load i32, i32* %gnode, align 4, !tbaa !5
  %253 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %252)
  %254 = load double, double* %253, !tbaa !7
  %255 = load i32, i32* %lnode, align 4, !tbaa !5
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i64 %256
  store double %254, double* %257, align 8, !tbaa !7
  %258 = load i32, i32* %gnode, align 4, !tbaa !5
  %259 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %258)
  %260 = load double, double* %259, !tbaa !7
  %261 = load i32, i32* %lnode, align 4, !tbaa !5
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i64 %262
  store double %260, double* %263, align 8, !tbaa !7
  %264 = load i32, i32* %gnode, align 4, !tbaa !5
  %265 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %264)
  %266 = load double, double* %265, !tbaa !7
  %267 = load i32, i32* %lnode, align 4, !tbaa !5
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i64 %268
  store double %266, double* %269, align 8, !tbaa !7
  br label %270

; <label>:270                                     ; preds = %246
  %271 = load i32, i32* %lnode, align 4, !tbaa !5
  %272 = add nsw i32 %271, 1
  store i32 %272, i32* %lnode, align 4, !tbaa !5
  br label %243

; <label>:273                                     ; preds = %243
  %274 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i32 0
  %275 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i32 0
  %276 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i32 0
  %277 = call double @_ZL14CalcElemVolumePKdS0_S0_(double* %274, double* %275, double* %276)
  store double %277, double* %volume, align 8, !tbaa !7
  %278 = load double, double* %volume, align 8, !tbaa !7
  %279 = load i32, i32* %i4, align 4, !tbaa !5
  %280 = call dereferenceable(8) double* @_ZN6Domain4voloEi(%struct.Domain* @domain, i32 %279)
  store double %278, double* %280, !tbaa !7
  %281 = load double, double* %volume, align 8, !tbaa !7
  %282 = load i32, i32* %i4, align 4, !tbaa !5
  %283 = call dereferenceable(8) double* @_ZN6Domain8elemMassEi(%struct.Domain* @domain, i32 %282)
  store double %281, double* %283, !tbaa !7
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %284

; <label>:284                                     ; preds = %299, %273
  %285 = load i32, i32* %j, align 4, !tbaa !5
  %286 = icmp slt i32 %285, 8
  br i1 %286, label %287, label %302

; <label>:287                                     ; preds = %284
  %288 = load i32, i32* %j, align 4, !tbaa !5
  %289 = sext i32 %288 to i64
  %290 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %291 = getelementptr inbounds i32, i32* %290, i64 %289
  %292 = load i32, i32* %291, align 4, !tbaa !5
  store i32 %292, i32* %idx, align 4, !tbaa !5
  %293 = load double, double* %volume, align 8, !tbaa !7
  %294 = fdiv double %293, 8.000000e+00
  %295 = load i32, i32* %idx, align 4, !tbaa !5
  %296 = call dereferenceable(8) double* @_ZN6Domain9nodalMassEi(%struct.Domain* @domain, i32 %295)
  %297 = load double, double* %296, !tbaa !7
  %298 = fadd double %297, %294
  store double %298, double* %296, !tbaa !7
  br label %299

; <label>:299                                     ; preds = %287
  %300 = load i32, i32* %j, align 4, !tbaa !5
  %301 = add nsw i32 %300, 1
  store i32 %301, i32* %j, align 4, !tbaa !5
  br label %284

; <label>:302                                     ; preds = %284
  %303 = bitcast [8 x double]* %z_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %303) #1
  %304 = bitcast [8 x double]* %y_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %304) #1
  %305 = bitcast [8 x double]* %x_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %305) #1
  br label %306

; <label>:306                                     ; preds = %302
  %307 = load i32, i32* %i4, align 4, !tbaa !5
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %i4, align 4, !tbaa !5
  br label %233

; <label>:309                                     ; preds = %233
  %310 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 0)
  store double 3.948746e+07, double* %310, !tbaa !7
  store i32 0, i32* %nidx, align 4, !tbaa !5
  store i32 0, i32* %i5, align 4, !tbaa !5
  br label %311

; <label>:311                                     ; preds = %352, %309
  %312 = load i32, i32* %i5, align 4, !tbaa !5
  %313 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %314 = icmp slt i32 %312, %313
  br i1 %314, label %315, label %355

; <label>:315                                     ; preds = %311
  %316 = load i32, i32* %i5, align 4, !tbaa !5
  %317 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %318 = mul nsw i32 %316, %317
  %319 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %320 = mul nsw i32 %318, %319
  store i32 %320, i32* %planeInc, align 4, !tbaa !5
  %321 = load i32, i32* %i5, align 4, !tbaa !5
  %322 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %323 = mul nsw i32 %321, %322
  store i32 %323, i32* %rowInc, align 4, !tbaa !5
  store i32 0, i32* %j6, align 4, !tbaa !5
  br label %324

; <label>:324                                     ; preds = %348, %315
  %325 = load i32, i32* %j6, align 4, !tbaa !5
  %326 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %327 = icmp slt i32 %325, %326
  br i1 %327, label %328, label %351

; <label>:328                                     ; preds = %324
  %329 = load i32, i32* %planeInc, align 4, !tbaa !5
  %330 = load i32, i32* %j6, align 4, !tbaa !5
  %331 = load i32, i32* %edgeNodes, align 4, !tbaa !5
  %332 = mul nsw i32 %330, %331
  %333 = add nsw i32 %329, %332
  %334 = load i32, i32* %nidx, align 4, !tbaa !5
  %335 = call dereferenceable(4) i32* @_ZN6Domain5symmXEi(%struct.Domain* @domain, i32 %334)
  store i32 %333, i32* %335, !tbaa !5
  %336 = load i32, i32* %planeInc, align 4, !tbaa !5
  %337 = load i32, i32* %j6, align 4, !tbaa !5
  %338 = add nsw i32 %336, %337
  %339 = load i32, i32* %nidx, align 4, !tbaa !5
  %340 = call dereferenceable(4) i32* @_ZN6Domain5symmYEi(%struct.Domain* @domain, i32 %339)
  store i32 %338, i32* %340, !tbaa !5
  %341 = load i32, i32* %rowInc, align 4, !tbaa !5
  %342 = load i32, i32* %j6, align 4, !tbaa !5
  %343 = add nsw i32 %341, %342
  %344 = load i32, i32* %nidx, align 4, !tbaa !5
  %345 = call dereferenceable(4) i32* @_ZN6Domain5symmZEi(%struct.Domain* @domain, i32 %344)
  store i32 %343, i32* %345, !tbaa !5
  %346 = load i32, i32* %nidx, align 4, !tbaa !5
  %347 = add nsw i32 %346, 1
  store i32 %347, i32* %nidx, align 4, !tbaa !5
  br label %348

; <label>:348                                     ; preds = %328
  %349 = load i32, i32* %j6, align 4, !tbaa !5
  %350 = add nsw i32 %349, 1
  store i32 %350, i32* %j6, align 4, !tbaa !5
  br label %324

; <label>:351                                     ; preds = %324
  br label %352

; <label>:352                                     ; preds = %351
  %353 = load i32, i32* %i5, align 4, !tbaa !5
  %354 = add nsw i32 %353, 1
  store i32 %354, i32* %i5, align 4, !tbaa !5
  br label %311

; <label>:355                                     ; preds = %311
  %356 = call dereferenceable(4) i32* @_ZN6Domain4lximEi(%struct.Domain* @domain, i32 0)
  store i32 0, i32* %356, !tbaa !5
  store i32 1, i32* %i7, align 4, !tbaa !5
  br label %357

; <label>:357                                     ; preds = %370, %355
  %358 = load i32, i32* %i7, align 4, !tbaa !5
  %359 = load i32, i32* %domElems, align 4, !tbaa !5
  %360 = icmp slt i32 %358, %359
  br i1 %360, label %361, label %373

; <label>:361                                     ; preds = %357
  %362 = load i32, i32* %i7, align 4, !tbaa !5
  %363 = sub nsw i32 %362, 1
  %364 = load i32, i32* %i7, align 4, !tbaa !5
  %365 = call dereferenceable(4) i32* @_ZN6Domain4lximEi(%struct.Domain* @domain, i32 %364)
  store i32 %363, i32* %365, !tbaa !5
  %366 = load i32, i32* %i7, align 4, !tbaa !5
  %367 = load i32, i32* %i7, align 4, !tbaa !5
  %368 = sub nsw i32 %367, 1
  %369 = call dereferenceable(4) i32* @_ZN6Domain4lxipEi(%struct.Domain* @domain, i32 %368)
  store i32 %366, i32* %369, !tbaa !5
  br label %370

; <label>:370                                     ; preds = %361
  %371 = load i32, i32* %i7, align 4, !tbaa !5
  %372 = add nsw i32 %371, 1
  store i32 %372, i32* %i7, align 4, !tbaa !5
  br label %357

; <label>:373                                     ; preds = %357
  %374 = load i32, i32* %domElems, align 4, !tbaa !5
  %375 = sub nsw i32 %374, 1
  %376 = load i32, i32* %domElems, align 4, !tbaa !5
  %377 = sub nsw i32 %376, 1
  %378 = call dereferenceable(4) i32* @_ZN6Domain4lxipEi(%struct.Domain* @domain, i32 %377)
  store i32 %375, i32* %378, !tbaa !5
  store i32 0, i32* %i8, align 4, !tbaa !5
  br label %379

; <label>:379                                     ; preds = %398, %373
  %380 = load i32, i32* %i8, align 4, !tbaa !5
  %381 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %382 = icmp slt i32 %380, %381
  br i1 %382, label %383, label %401

; <label>:383                                     ; preds = %379
  %384 = load i32, i32* %i8, align 4, !tbaa !5
  %385 = load i32, i32* %i8, align 4, !tbaa !5
  %386 = call dereferenceable(4) i32* @_ZN6Domain5letamEi(%struct.Domain* @domain, i32 %385)
  store i32 %384, i32* %386, !tbaa !5
  %387 = load i32, i32* %domElems, align 4, !tbaa !5
  %388 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %389 = sub nsw i32 %387, %388
  %390 = load i32, i32* %i8, align 4, !tbaa !5
  %391 = add nsw i32 %389, %390
  %392 = load i32, i32* %domElems, align 4, !tbaa !5
  %393 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %394 = sub nsw i32 %392, %393
  %395 = load i32, i32* %i8, align 4, !tbaa !5
  %396 = add nsw i32 %394, %395
  %397 = call dereferenceable(4) i32* @_ZN6Domain5letapEi(%struct.Domain* @domain, i32 %396)
  store i32 %391, i32* %397, !tbaa !5
  br label %398

; <label>:398                                     ; preds = %383
  %399 = load i32, i32* %i8, align 4, !tbaa !5
  %400 = add nsw i32 %399, 1
  store i32 %400, i32* %i8, align 4, !tbaa !5
  br label %379

; <label>:401                                     ; preds = %379
  %402 = load i32, i32* %edgeElems, align 4, !tbaa !5
  store i32 %402, i32* %i9, align 4, !tbaa !5
  br label %403

; <label>:403                                     ; preds = %418, %401
  %404 = load i32, i32* %i9, align 4, !tbaa !5
  %405 = load i32, i32* %domElems, align 4, !tbaa !5
  %406 = icmp slt i32 %404, %405
  br i1 %406, label %407, label %421

; <label>:407                                     ; preds = %403
  %408 = load i32, i32* %i9, align 4, !tbaa !5
  %409 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %410 = sub nsw i32 %408, %409
  %411 = load i32, i32* %i9, align 4, !tbaa !5
  %412 = call dereferenceable(4) i32* @_ZN6Domain5letamEi(%struct.Domain* @domain, i32 %411)
  store i32 %410, i32* %412, !tbaa !5
  %413 = load i32, i32* %i9, align 4, !tbaa !5
  %414 = load i32, i32* %i9, align 4, !tbaa !5
  %415 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %416 = sub nsw i32 %414, %415
  %417 = call dereferenceable(4) i32* @_ZN6Domain5letapEi(%struct.Domain* @domain, i32 %416)
  store i32 %413, i32* %417, !tbaa !5
  br label %418

; <label>:418                                     ; preds = %407
  %419 = load i32, i32* %i9, align 4, !tbaa !5
  %420 = add nsw i32 %419, 1
  store i32 %420, i32* %i9, align 4, !tbaa !5
  br label %403

; <label>:421                                     ; preds = %403
  store i32 0, i32* %i10, align 4, !tbaa !5
  br label %422

; <label>:422                                     ; preds = %447, %421
  %423 = load i32, i32* %i10, align 4, !tbaa !5
  %424 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %425 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %426 = mul nsw i32 %424, %425
  %427 = icmp slt i32 %423, %426
  br i1 %427, label %428, label %450

; <label>:428                                     ; preds = %422
  %429 = load i32, i32* %i10, align 4, !tbaa !5
  %430 = load i32, i32* %i10, align 4, !tbaa !5
  %431 = call dereferenceable(4) i32* @_ZN6Domain6lzetamEi(%struct.Domain* @domain, i32 %430)
  store i32 %429, i32* %431, !tbaa !5
  %432 = load i32, i32* %domElems, align 4, !tbaa !5
  %433 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %434 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %435 = mul nsw i32 %433, %434
  %436 = sub nsw i32 %432, %435
  %437 = load i32, i32* %i10, align 4, !tbaa !5
  %438 = add nsw i32 %436, %437
  %439 = load i32, i32* %domElems, align 4, !tbaa !5
  %440 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %441 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %442 = mul nsw i32 %440, %441
  %443 = sub nsw i32 %439, %442
  %444 = load i32, i32* %i10, align 4, !tbaa !5
  %445 = add nsw i32 %443, %444
  %446 = call dereferenceable(4) i32* @_ZN6Domain6lzetapEi(%struct.Domain* @domain, i32 %445)
  store i32 %438, i32* %446, !tbaa !5
  br label %447

; <label>:447                                     ; preds = %428
  %448 = load i32, i32* %i10, align 4, !tbaa !5
  %449 = add nsw i32 %448, 1
  store i32 %449, i32* %i10, align 4, !tbaa !5
  br label %422

; <label>:450                                     ; preds = %422
  %451 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %452 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %453 = mul nsw i32 %451, %452
  store i32 %453, i32* %i11, align 4, !tbaa !5
  br label %454

; <label>:454                                     ; preds = %473, %450
  %455 = load i32, i32* %i11, align 4, !tbaa !5
  %456 = load i32, i32* %domElems, align 4, !tbaa !5
  %457 = icmp slt i32 %455, %456
  br i1 %457, label %458, label %476

; <label>:458                                     ; preds = %454
  %459 = load i32, i32* %i11, align 4, !tbaa !5
  %460 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %461 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %462 = mul nsw i32 %460, %461
  %463 = sub nsw i32 %459, %462
  %464 = load i32, i32* %i11, align 4, !tbaa !5
  %465 = call dereferenceable(4) i32* @_ZN6Domain6lzetamEi(%struct.Domain* @domain, i32 %464)
  store i32 %463, i32* %465, !tbaa !5
  %466 = load i32, i32* %i11, align 4, !tbaa !5
  %467 = load i32, i32* %i11, align 4, !tbaa !5
  %468 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %469 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %470 = mul nsw i32 %468, %469
  %471 = sub nsw i32 %467, %470
  %472 = call dereferenceable(4) i32* @_ZN6Domain6lzetapEi(%struct.Domain* @domain, i32 %471)
  store i32 %466, i32* %472, !tbaa !5
  br label %473

; <label>:473                                     ; preds = %458
  %474 = load i32, i32* %i11, align 4, !tbaa !5
  %475 = add nsw i32 %474, 1
  store i32 %475, i32* %i11, align 4, !tbaa !5
  br label %454

; <label>:476                                     ; preds = %454
  store i32 0, i32* %i12, align 4, !tbaa !5
  br label %477

; <label>:477                                     ; preds = %484, %476
  %478 = load i32, i32* %i12, align 4, !tbaa !5
  %479 = load i32, i32* %domElems, align 4, !tbaa !5
  %480 = icmp slt i32 %478, %479
  br i1 %480, label %481, label %487

; <label>:481                                     ; preds = %477
  %482 = load i32, i32* %i12, align 4, !tbaa !5
  %483 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %482)
  store i32 0, i32* %483, !tbaa !5
  br label %484

; <label>:484                                     ; preds = %481
  %485 = load i32, i32* %i12, align 4, !tbaa !5
  %486 = add nsw i32 %485, 1
  store i32 %486, i32* %i12, align 4, !tbaa !5
  br label %477

; <label>:487                                     ; preds = %477
  store i32 0, i32* %i13, align 4, !tbaa !5
  br label %488

; <label>:488                                     ; preds = %565, %487
  %489 = load i32, i32* %i13, align 4, !tbaa !5
  %490 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %491 = icmp slt i32 %489, %490
  br i1 %491, label %492, label %568

; <label>:492                                     ; preds = %488
  %493 = load i32, i32* %i13, align 4, !tbaa !5
  %494 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %495 = mul nsw i32 %493, %494
  %496 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %497 = mul nsw i32 %495, %496
  store i32 %497, i32* %planeInc14, align 4, !tbaa !5
  %498 = load i32, i32* %i13, align 4, !tbaa !5
  %499 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %500 = mul nsw i32 %498, %499
  store i32 %500, i32* %rowInc15, align 4, !tbaa !5
  store i32 0, i32* %j16, align 4, !tbaa !5
  br label %501

; <label>:501                                     ; preds = %561, %492
  %502 = load i32, i32* %j16, align 4, !tbaa !5
  %503 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %504 = icmp slt i32 %502, %503
  br i1 %504, label %505, label %564

; <label>:505                                     ; preds = %501
  %506 = load i32, i32* %planeInc14, align 4, !tbaa !5
  %507 = load i32, i32* %j16, align 4, !tbaa !5
  %508 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %509 = mul nsw i32 %507, %508
  %510 = add nsw i32 %506, %509
  %511 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %510)
  %512 = load i32, i32* %511, !tbaa !5
  %513 = or i32 %512, 1
  store i32 %513, i32* %511, !tbaa !5
  %514 = load i32, i32* %planeInc14, align 4, !tbaa !5
  %515 = load i32, i32* %j16, align 4, !tbaa !5
  %516 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %517 = mul nsw i32 %515, %516
  %518 = add nsw i32 %514, %517
  %519 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %520 = add nsw i32 %518, %519
  %521 = sub nsw i32 %520, 1
  %522 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %521)
  %523 = load i32, i32* %522, !tbaa !5
  %524 = or i32 %523, 8
  store i32 %524, i32* %522, !tbaa !5
  %525 = load i32, i32* %planeInc14, align 4, !tbaa !5
  %526 = load i32, i32* %j16, align 4, !tbaa !5
  %527 = add nsw i32 %525, %526
  %528 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %527)
  %529 = load i32, i32* %528, !tbaa !5
  %530 = or i32 %529, 16
  store i32 %530, i32* %528, !tbaa !5
  %531 = load i32, i32* %planeInc14, align 4, !tbaa !5
  %532 = load i32, i32* %j16, align 4, !tbaa !5
  %533 = add nsw i32 %531, %532
  %534 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %535 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %536 = mul nsw i32 %534, %535
  %537 = add nsw i32 %533, %536
  %538 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %539 = sub nsw i32 %537, %538
  %540 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %539)
  %541 = load i32, i32* %540, !tbaa !5
  %542 = or i32 %541, 128
  store i32 %542, i32* %540, !tbaa !5
  %543 = load i32, i32* %rowInc15, align 4, !tbaa !5
  %544 = load i32, i32* %j16, align 4, !tbaa !5
  %545 = add nsw i32 %543, %544
  %546 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %545)
  %547 = load i32, i32* %546, !tbaa !5
  %548 = or i32 %547, 256
  store i32 %548, i32* %546, !tbaa !5
  %549 = load i32, i32* %rowInc15, align 4, !tbaa !5
  %550 = load i32, i32* %j16, align 4, !tbaa !5
  %551 = add nsw i32 %549, %550
  %552 = load i32, i32* %domElems, align 4, !tbaa !5
  %553 = add nsw i32 %551, %552
  %554 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %555 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %556 = mul nsw i32 %554, %555
  %557 = sub nsw i32 %553, %556
  %558 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %557)
  %559 = load i32, i32* %558, !tbaa !5
  %560 = or i32 %559, 2048
  store i32 %560, i32* %558, !tbaa !5
  br label %561

; <label>:561                                     ; preds = %505
  %562 = load i32, i32* %j16, align 4, !tbaa !5
  %563 = add nsw i32 %562, 1
  store i32 %563, i32* %j16, align 4, !tbaa !5
  br label %501

; <label>:564                                     ; preds = %501
  br label %565

; <label>:565                                     ; preds = %564
  %566 = load i32, i32* %i13, align 4, !tbaa !5
  %567 = add nsw i32 %566, 1
  store i32 %567, i32* %i13, align 4, !tbaa !5
  br label %488

; <label>:568                                     ; preds = %488
  %569 = call i32 @gettimeofday(%struct.timeval* %start, %struct.timezone* null) #1
  br label %570

; <label>:570                                     ; preds = %576, %568
  %571 = call dereferenceable(8) double* @_ZN6Domain4timeEv(%struct.Domain* @domain)
  %572 = load double, double* %571, !tbaa !7
  %573 = call dereferenceable(8) double* @_ZN6Domain8stoptimeEv(%struct.Domain* @domain)
  %574 = load double, double* %573, !tbaa !7
  %575 = fcmp olt double %572, %574
  br i1 %575, label %576, label %577

; <label>:576                                     ; preds = %570
  call void @_ZL13TimeIncrementv()
  call void @_ZL16LagrangeLeapFrogv()
  br label %570

; <label>:577                                     ; preds = %570
  %578 = call i32 @gettimeofday(%struct.timeval* %end, %struct.timezone* null) #1
  %579 = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i32 0, i32 0
  %580 = load i64, i64* %579, align 8, !tbaa !9
  %581 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i32 0, i32 0
  %582 = load i64, i64* %581, align 8, !tbaa !9
  %583 = sub nsw i64 %580, %582
  %584 = sitofp i64 %583 to double
  %585 = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i32 0, i32 1
  %586 = load i64, i64* %585, align 8, !tbaa !12
  %587 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i32 0, i32 1
  %588 = load i64, i64* %587, align 8, !tbaa !12
  %589 = sub nsw i64 %586, %588
  %590 = sitofp i64 %589 to double
  %591 = fmul double %590, 1.000000e-06
  %592 = fadd double %584, %591
  store double %592, double* %elapsed_time, align 8, !tbaa !7
  %593 = load double, double* %elapsed_time, align 8, !tbaa !7
  %594 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([26 x i8]* @.str, i32 0, i32 0), double %593)
  store i32 0, i32* %ElemId, align 4, !tbaa !5
  %595 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str1, i32 0, i32 0))
  %596 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %597 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str2, i32 0, i32 0), i32 %596)
  %598 = call dereferenceable(4) i32* @_ZN6Domain5cycleEv(%struct.Domain* @domain)
  %599 = load i32, i32* %598, !tbaa !5
  %600 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str3, i32 0, i32 0), i32 %599)
  %601 = load i32, i32* %ElemId, align 4, !tbaa !5
  %602 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 %601)
  %603 = load double, double* %602, !tbaa !7
  %604 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str4, i32 0, i32 0), double %603)
  store double 0.000000e+00, double* %MaxAbsDiff, align 8, !tbaa !7
  store double 0.000000e+00, double* %TotalAbsDiff, align 8, !tbaa !7
  store double 0.000000e+00, double* %MaxRelDiff, align 8, !tbaa !7
  store i32 0, i32* %j17, align 4, !tbaa !5
  br label %605

; <label>:605                                     ; preds = %661, %577
  %606 = load i32, i32* %j17, align 4, !tbaa !5
  %607 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %608 = icmp slt i32 %606, %607
  br i1 %608, label %609, label %664

; <label>:609                                     ; preds = %605
  %610 = load i32, i32* %j17, align 4, !tbaa !5
  %611 = add nsw i32 %610, 1
  store i32 %611, i32* %k, align 4, !tbaa !5
  br label %612

; <label>:612                                     ; preds = %657, %609
  %613 = load i32, i32* %k, align 4, !tbaa !5
  %614 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %615 = icmp slt i32 %613, %614
  br i1 %615, label %616, label %660

; <label>:616                                     ; preds = %612
  %617 = load i32, i32* %j17, align 4, !tbaa !5
  %618 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %619 = mul nsw i32 %617, %618
  %620 = load i32, i32* %k, align 4, !tbaa !5
  %621 = add nsw i32 %619, %620
  %622 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 %621)
  %623 = load double, double* %622, !tbaa !7
  %624 = load i32, i32* %k, align 4, !tbaa !5
  %625 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %626 = mul nsw i32 %624, %625
  %627 = load i32, i32* %j17, align 4, !tbaa !5
  %628 = add nsw i32 %626, %627
  %629 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 %628)
  %630 = load double, double* %629, !tbaa !7
  %631 = fsub double %623, %630
  %632 = call double @_Z4FABSd(double %631)
  store double %632, double* %AbsDiff, align 8, !tbaa !7
  %633 = load double, double* %AbsDiff, align 8, !tbaa !7
  %634 = load double, double* %TotalAbsDiff, align 8, !tbaa !7
  %635 = fadd double %634, %633
  store double %635, double* %TotalAbsDiff, align 8, !tbaa !7
  %636 = load double, double* %MaxAbsDiff, align 8, !tbaa !7
  %637 = load double, double* %AbsDiff, align 8, !tbaa !7
  %638 = fcmp olt double %636, %637
  br i1 %638, label %639, label %641

; <label>:639                                     ; preds = %616
  %640 = load double, double* %AbsDiff, align 8, !tbaa !7
  store double %640, double* %MaxAbsDiff, align 8, !tbaa !7
  br label %641

; <label>:641                                     ; preds = %639, %616
  %642 = load double, double* %AbsDiff, align 8, !tbaa !7
  %643 = load i32, i32* %k, align 4, !tbaa !5
  %644 = load i32, i32* %edgeElems, align 4, !tbaa !5
  %645 = mul nsw i32 %643, %644
  %646 = load i32, i32* %j17, align 4, !tbaa !5
  %647 = add nsw i32 %645, %646
  %648 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 %647)
  %649 = load double, double* %648, !tbaa !7
  %650 = fdiv double %642, %649
  store double %650, double* %RelDiff, align 8, !tbaa !7
  %651 = load double, double* %MaxRelDiff, align 8, !tbaa !7
  %652 = load double, double* %RelDiff, align 8, !tbaa !7
  %653 = fcmp olt double %651, %652
  br i1 %653, label %654, label %656

; <label>:654                                     ; preds = %641
  %655 = load double, double* %RelDiff, align 8, !tbaa !7
  store double %655, double* %MaxRelDiff, align 8, !tbaa !7
  br label %656

; <label>:656                                     ; preds = %654, %641
  br label %657

; <label>:657                                     ; preds = %656
  %658 = load i32, i32* %k, align 4, !tbaa !5
  %659 = add nsw i32 %658, 1
  store i32 %659, i32* %k, align 4, !tbaa !5
  br label %612

; <label>:660                                     ; preds = %612
  br label %661

; <label>:661                                     ; preds = %660
  %662 = load i32, i32* %j17, align 4, !tbaa !5
  %663 = add nsw i32 %662, 1
  store i32 %663, i32* %j17, align 4, !tbaa !5
  br label %605

; <label>:664                                     ; preds = %605
  %665 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([37 x i8]* @.str5, i32 0, i32 0))
  %666 = load double, double* %MaxAbsDiff, align 8, !tbaa !7
  %667 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str6, i32 0, i32 0), double %666)
  %668 = load double, double* %TotalAbsDiff, align 8, !tbaa !7
  %669 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str7, i32 0, i32 0), double %668)
  %670 = load double, double* %MaxRelDiff, align 8, !tbaa !7
  %671 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([32 x i8]* @.str8, i32 0, i32 0), double %670)
  ret i32 0
}

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally i32 @atoi(i8* nonnull %__nptr) #3 {
  %1 = alloca i8*, align 8
  store i8* %__nptr, i8** %1, align 8, !tbaa !1
  %2 = load i8*, i8** %1, align 8, !tbaa !1
  %3 = call i64 @strtol(i8* %2, i8** null, i32 10) #1
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5sizeXEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 79
  ret i32* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5sizeYEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 80
  ret i32* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5sizeZEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 81
  ret i32* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 82
  ret i32* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 83
  ret i32* %3
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN6Domain22AllocateElemPersistentEm(%struct.Domain* %this, i64 %size) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i64, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i64 %size, i64* %2, align 8, !tbaa !13
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 19
  %5 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %4, i64 %5, i32 0)
  %6 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 20
  %7 = load i64, i64* %2, align 8, !tbaa !13
  %8 = mul i64 8, %7
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %6, i64 %8, i32 0)
  %9 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 21
  %10 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %9, i64 %10, i32 0)
  %11 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 22
  %12 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %11, i64 %12, i32 0)
  %13 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 23
  %14 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %13, i64 %14, i32 0)
  %15 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 24
  %16 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %15, i64 %16, i32 0)
  %17 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 25
  %18 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %17, i64 %18, i32 0)
  %19 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 26
  %20 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %19, i64 %20, i32 0)
  %21 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 27
  %22 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %21, i64 %22, i32 0)
  %23 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 37
  %24 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %23, i64 %24, double 0.000000e+00)
  %25 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 38
  %26 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %25, i64 %26, double 0.000000e+00)
  %27 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 39
  %28 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %27, i64 %28, double 0.000000e+00)
  %29 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 40
  %30 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %29, i64 %30, double 0.000000e+00)
  %31 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 41
  %32 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %31, i64 %32, double 0.000000e+00)
  %33 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 42
  %34 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %33, i64 %34, double 1.000000e+00)
  %35 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 43
  %36 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %35, i64 %36, double 0.000000e+00)
  %37 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 45
  %38 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %37, i64 %38, double 0.000000e+00)
  %39 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 46
  %40 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %39, i64 %40, double 0.000000e+00)
  %41 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 47
  %42 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %41, i64 %42, double 0.000000e+00)
  %43 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 48
  %44 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %43, i64 %44, double 0.000000e+00)
  %45 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 49
  %46 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %45, i64 %46, double 0.000000e+00)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN6Domain21AllocateElemTemporaryEm(%struct.Domain* %this, i64 %size) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i64, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i64 %size, i64* %2, align 8, !tbaa !13
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 28
  %5 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %4, i64 %5, double 0.000000e+00)
  %6 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 29
  %7 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %6, i64 %7, double 0.000000e+00)
  %8 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 30
  %9 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %8, i64 %9, double 0.000000e+00)
  %10 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 31
  %11 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %10, i64 %11, double 0.000000e+00)
  %12 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 32
  %13 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %12, i64 %13, double 0.000000e+00)
  %14 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 33
  %15 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %14, i64 %15, double 0.000000e+00)
  %16 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 34
  %17 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %16, i64 %17, double 0.000000e+00)
  %18 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 35
  %19 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %18, i64 %19, double 0.000000e+00)
  %20 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 36
  %21 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %20, i64 %21, double 0.000000e+00)
  %22 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 44
  %23 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %22, i64 %23, double 0.000000e+00)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN6Domain23AllocateNodalPersistentEm(%struct.Domain* %this, i64 %size) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i64, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i64 %size, i64* %2, align 8, !tbaa !13
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 0
  %5 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %4, i64 %5, double 0.000000e+00)
  %6 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 1
  %7 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %6, i64 %7, double 0.000000e+00)
  %8 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 2
  %9 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %8, i64 %9, double 0.000000e+00)
  %10 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 3
  %11 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %10, i64 %11, double 0.000000e+00)
  %12 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 4
  %13 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %12, i64 %13, double 0.000000e+00)
  %14 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 5
  %15 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %14, i64 %15, double 0.000000e+00)
  %16 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 6
  %17 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %16, i64 %17, double 0.000000e+00)
  %18 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 7
  %19 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %18, i64 %19, double 0.000000e+00)
  %20 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 8
  %21 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %20, i64 %21, double 0.000000e+00)
  %22 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 9
  %23 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %22, i64 %23, double 0.000000e+00)
  %24 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 10
  %25 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %24, i64 %25, double 0.000000e+00)
  %26 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 11
  %27 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %26, i64 %27, double 0.000000e+00)
  %28 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 12
  %29 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %28, i64 %29, double 0.000000e+00)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN6Domain16AllocateNodesetsEm(%struct.Domain* %this, i64 %size) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i64, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i64 %size, i64* %2, align 8, !tbaa !13
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 13
  %5 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %4, i64 %5, i32 0)
  %6 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 14
  %7 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %6, i64 %7, i32 0)
  %8 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 15
  %9 = load i64, i64* %2, align 8, !tbaa !13
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %8, i64 %9, i32 0)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* %this, i32 %idx) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 0
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 1
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 2
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: uwtable
define linkonce_odr i32* @_ZN6Domain8nodelistEi(%struct.Domain* %this, i32 %idx) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 20
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = mul nsw i32 8, %5
  %7 = sext i32 %6 to i64
  %8 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %7)
  ret i32* %8
}

; Function Attrs: uwtable
define linkonce_odr void @_ZN6Domain23AllocateNodeElemIndexesEv(%struct.Domain* %this) #2 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %m = alloca i32, align 4
  %numElem = alloca i32, align 4
  %numNode = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %nl = alloca i32*, align 8
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %i4 = alloca i32, align 4
  %nl5 = alloca i32*, align 8
  %j6 = alloca i32, align 4
  %m7 = alloca i32, align 4
  %k = alloca i32, align 4
  %offset = alloca i32, align 4
  %clSize = alloca i32, align 4
  %i8 = alloca i32, align 4
  %clv = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* %2)
  %4 = load i32, i32* %3, !tbaa !5
  store i32 %4, i32* %numElem, align 4, !tbaa !5
  %5 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* %2)
  %6 = load i32, i32* %5, !tbaa !5
  store i32 %6, i32* %numNode, align 4, !tbaa !5
  %7 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 16
  %8 = load i32, i32* %numNode, align 4, !tbaa !5
  %9 = sext i32 %8 to i64
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %7, i64 %9, i32 0)
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %10

; <label>:10                                      ; preds = %17, %0
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %12 = load i32, i32* %numNode, align 4, !tbaa !5
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %20

; <label>:14                                      ; preds = %10
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %16 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %15)
  store i32 0, i32* %16, !tbaa !5
  br label %17

; <label>:17                                      ; preds = %14
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %i, align 4, !tbaa !5
  br label %10

; <label>:20                                      ; preds = %10
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %21

; <label>:21                                      ; preds = %44, %20
  %22 = load i32, i32* %i1, align 4, !tbaa !5
  %23 = load i32, i32* %numElem, align 4, !tbaa !5
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %47

; <label>:25                                      ; preds = %21
  %26 = load i32, i32* %i1, align 4, !tbaa !5
  %27 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* %2, i32 %26)
  store i32* %27, i32** %nl, align 8, !tbaa !1
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %28

; <label>:28                                      ; preds = %40, %25
  %29 = load i32, i32* %j, align 4, !tbaa !5
  %30 = icmp slt i32 %29, 8
  br i1 %30, label %31, label %43

; <label>:31                                      ; preds = %28
  %32 = load i32, i32* %j, align 4, !tbaa !5
  %33 = sext i32 %32 to i64
  %34 = load i32*, i32** %nl, align 8, !tbaa !1
  %35 = getelementptr inbounds i32, i32* %34, i64 %33
  %36 = load i32, i32* %35, align 4, !tbaa !5
  %37 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %36)
  %38 = load i32, i32* %37, !tbaa !5
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %37, !tbaa !5
  br label %40

; <label>:40                                      ; preds = %31
  %41 = load i32, i32* %j, align 4, !tbaa !5
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %j, align 4, !tbaa !5
  br label %28

; <label>:43                                      ; preds = %28
  br label %44

; <label>:44                                      ; preds = %43
  %45 = load i32, i32* %i1, align 4, !tbaa !5
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %i1, align 4, !tbaa !5
  br label %21

; <label>:47                                      ; preds = %21
  %48 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 17
  %49 = load i32, i32* %numNode, align 4, !tbaa !5
  %50 = sext i32 %49 to i64
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %48, i64 %50, i32 0)
  %51 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* %2, i32 0)
  store i32 0, i32* %51, !tbaa !5
  store i32 1, i32* %i2, align 4, !tbaa !5
  br label %52

; <label>:52                                      ; preds = %68, %47
  %53 = load i32, i32* %i2, align 4, !tbaa !5
  %54 = load i32, i32* %numNode, align 4, !tbaa !5
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %71

; <label>:56                                      ; preds = %52
  %57 = load i32, i32* %i2, align 4, !tbaa !5
  %58 = sub nsw i32 %57, 1
  %59 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* %2, i32 %58)
  %60 = load i32, i32* %59, !tbaa !5
  %61 = load i32, i32* %i2, align 4, !tbaa !5
  %62 = sub nsw i32 %61, 1
  %63 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %62)
  %64 = load i32, i32* %63, !tbaa !5
  %65 = add nsw i32 %60, %64
  %66 = load i32, i32* %i2, align 4, !tbaa !5
  %67 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* %2, i32 %66)
  store i32 %65, i32* %67, !tbaa !5
  br label %68

; <label>:68                                      ; preds = %56
  %69 = load i32, i32* %i2, align 4, !tbaa !5
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %i2, align 4, !tbaa !5
  br label %52

; <label>:71                                      ; preds = %52
  %72 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 18
  %73 = load i32, i32* %numNode, align 4, !tbaa !5
  %74 = sub nsw i32 %73, 1
  %75 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* %2, i32 %74)
  %76 = load i32, i32* %75, !tbaa !5
  %77 = load i32, i32* %numNode, align 4, !tbaa !5
  %78 = sub nsw i32 %77, 1
  %79 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %78)
  %80 = load i32, i32* %79, !tbaa !5
  %81 = add nsw i32 %76, %80
  %82 = sext i32 %81 to i64
  call void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %72, i64 %82, i32 0)
  store i32 0, i32* %i3, align 4, !tbaa !5
  br label %83

; <label>:83                                      ; preds = %90, %71
  %84 = load i32, i32* %i3, align 4, !tbaa !5
  %85 = load i32, i32* %numNode, align 4, !tbaa !5
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %87, label %93

; <label>:87                                      ; preds = %83
  %88 = load i32, i32* %i3, align 4, !tbaa !5
  %89 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %88)
  store i32 0, i32* %89, !tbaa !5
  br label %90

; <label>:90                                      ; preds = %87
  %91 = load i32, i32* %i3, align 4, !tbaa !5
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %i3, align 4, !tbaa !5
  br label %83

; <label>:93                                      ; preds = %83
  store i32 0, i32* %i4, align 4, !tbaa !5
  br label %94

; <label>:94                                      ; preds = %132, %93
  %95 = load i32, i32* %i4, align 4, !tbaa !5
  %96 = load i32, i32* %numElem, align 4, !tbaa !5
  %97 = icmp slt i32 %95, %96
  br i1 %97, label %98, label %135

; <label>:98                                      ; preds = %94
  %99 = load i32, i32* %i4, align 4, !tbaa !5
  %100 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* %2, i32 %99)
  store i32* %100, i32** %nl5, align 8, !tbaa !1
  store i32 0, i32* %j6, align 4, !tbaa !5
  br label %101

; <label>:101                                     ; preds = %128, %98
  %102 = load i32, i32* %j6, align 4, !tbaa !5
  %103 = icmp slt i32 %102, 8
  br i1 %103, label %104, label %131

; <label>:104                                     ; preds = %101
  %105 = load i32, i32* %j6, align 4, !tbaa !5
  %106 = sext i32 %105 to i64
  %107 = load i32*, i32** %nl5, align 8, !tbaa !1
  %108 = getelementptr inbounds i32, i32* %107, i64 %106
  %109 = load i32, i32* %108, align 4, !tbaa !5
  store i32 %109, i32* %m7, align 4, !tbaa !5
  %110 = load i32, i32* %i4, align 4, !tbaa !5
  %111 = mul nsw i32 %110, 8
  %112 = load i32, i32* %j6, align 4, !tbaa !5
  %113 = add nsw i32 %111, %112
  store i32 %113, i32* %k, align 4, !tbaa !5
  %114 = load i32, i32* %m7, align 4, !tbaa !5
  %115 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* %2, i32 %114)
  %116 = load i32, i32* %115, !tbaa !5
  %117 = load i32, i32* %m7, align 4, !tbaa !5
  %118 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %117)
  %119 = load i32, i32* %118, !tbaa !5
  %120 = add nsw i32 %116, %119
  store i32 %120, i32* %offset, align 4, !tbaa !5
  %121 = load i32, i32* %k, align 4, !tbaa !5
  %122 = load i32, i32* %offset, align 4, !tbaa !5
  %123 = call dereferenceable(4) i32* @_ZN6Domain18nodeElemCornerListEi(%struct.Domain* %2, i32 %122)
  store i32 %121, i32* %123, !tbaa !5
  %124 = load i32, i32* %m7, align 4, !tbaa !5
  %125 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %2, i32 %124)
  %126 = load i32, i32* %125, !tbaa !5
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %125, !tbaa !5
  br label %128

; <label>:128                                     ; preds = %104
  %129 = load i32, i32* %j6, align 4, !tbaa !5
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %j6, align 4, !tbaa !5
  br label %101

; <label>:131                                     ; preds = %101
  br label %132

; <label>:132                                     ; preds = %131
  %133 = load i32, i32* %i4, align 4, !tbaa !5
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %i4, align 4, !tbaa !5
  br label %94

; <label>:135                                     ; preds = %94
  %136 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 18
  %137 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %136)
  %138 = trunc i64 %137 to i32
  store i32 %138, i32* %clSize, align 4, !tbaa !5
  store i32 0, i32* %i8, align 4, !tbaa !5
  br label %139

; <label>:139                                     ; preds = %158, %135
  %140 = load i32, i32* %i8, align 4, !tbaa !5
  %141 = load i32, i32* %clSize, align 4, !tbaa !5
  %142 = icmp slt i32 %140, %141
  br i1 %142, label %143, label %161

; <label>:143                                     ; preds = %139
  %144 = load i32, i32* %i8, align 4, !tbaa !5
  %145 = call dereferenceable(4) i32* @_ZN6Domain18nodeElemCornerListEi(%struct.Domain* %2, i32 %144)
  %146 = load i32, i32* %145, !tbaa !5
  store i32 %146, i32* %clv, align 4, !tbaa !5
  %147 = load i32, i32* %clv, align 4, !tbaa !5
  %148 = icmp slt i32 %147, 0
  br i1 %148, label %154, label %149

; <label>:149                                     ; preds = %143
  %150 = load i32, i32* %clv, align 4, !tbaa !5
  %151 = load i32, i32* %numElem, align 4, !tbaa !5
  %152 = mul nsw i32 %151, 8
  %153 = icmp sgt i32 %150, %152
  br i1 %153, label %154, label %157

; <label>:154                                     ; preds = %149, %143
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !1
  %156 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %155, i8* getelementptr inbounds ([67 x i8]* @.str10, i32 0, i32 0))
  call void @exit(i32 1) #14
  unreachable

; <label>:157                                     ; preds = %149
  br label %158

; <label>:158                                     ; preds = %157
  %159 = load i32, i32* %i8, align 4, !tbaa !5
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %i8, align 4, !tbaa !5
  br label %139

; <label>:161                                     ; preds = %139
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 19
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7dtfixedEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 50
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 52
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain15deltatimemultlbEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 53
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain15deltatimemultubEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 54
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain8stoptimeEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 55
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9dtcourantEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 75
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7dthydroEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 76
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5dtmaxEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 77
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4timeEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 51
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5cycleEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 78
  ret i32* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5e_cutEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 61
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5p_cutEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 62
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5q_cutEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 64
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5u_cutEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 56
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5v_cutEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 65
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain6hgcoefEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 57
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5ss4o3Ev(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 63
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain5qstopEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 58
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain15monoq_max_slopeEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 59
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain18monoq_limiter_multEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 60
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9qlc_monoqEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 66
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9qqc_monoqEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 67
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3qqcEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 68
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4pminEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 71
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4eminEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 72
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7dvovmaxEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 73
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7eosvmaxEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 69
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7eosvminEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 70
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7refdensEv(%struct.Domain* %this) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  %2 = load %struct.Domain*, %struct.Domain** %1
  %3 = getelementptr inbounds %struct.Domain, %struct.Domain* %2, i32 0, i32 74
  ret double* %3
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: inlinehint uwtable
define internal double @_ZL14CalcElemVolumePKdS0_S0_(double* %x, double* %y, double* %z) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %x, double** %1, align 8, !tbaa !1
  store double* %y, double** %2, align 8, !tbaa !1
  store double* %z, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = getelementptr inbounds double, double* %4, i64 0
  %6 = load double, double* %5, align 8, !tbaa !7
  %7 = load double*, double** %1, align 8, !tbaa !1
  %8 = getelementptr inbounds double, double* %7, i64 1
  %9 = load double, double* %8, align 8, !tbaa !7
  %10 = load double*, double** %1, align 8, !tbaa !1
  %11 = getelementptr inbounds double, double* %10, i64 2
  %12 = load double, double* %11, align 8, !tbaa !7
  %13 = load double*, double** %1, align 8, !tbaa !1
  %14 = getelementptr inbounds double, double* %13, i64 3
  %15 = load double, double* %14, align 8, !tbaa !7
  %16 = load double*, double** %1, align 8, !tbaa !1
  %17 = getelementptr inbounds double, double* %16, i64 4
  %18 = load double, double* %17, align 8, !tbaa !7
  %19 = load double*, double** %1, align 8, !tbaa !1
  %20 = getelementptr inbounds double, double* %19, i64 5
  %21 = load double, double* %20, align 8, !tbaa !7
  %22 = load double*, double** %1, align 8, !tbaa !1
  %23 = getelementptr inbounds double, double* %22, i64 6
  %24 = load double, double* %23, align 8, !tbaa !7
  %25 = load double*, double** %1, align 8, !tbaa !1
  %26 = getelementptr inbounds double, double* %25, i64 7
  %27 = load double, double* %26, align 8, !tbaa !7
  %28 = load double*, double** %2, align 8, !tbaa !1
  %29 = getelementptr inbounds double, double* %28, i64 0
  %30 = load double, double* %29, align 8, !tbaa !7
  %31 = load double*, double** %2, align 8, !tbaa !1
  %32 = getelementptr inbounds double, double* %31, i64 1
  %33 = load double, double* %32, align 8, !tbaa !7
  %34 = load double*, double** %2, align 8, !tbaa !1
  %35 = getelementptr inbounds double, double* %34, i64 2
  %36 = load double, double* %35, align 8, !tbaa !7
  %37 = load double*, double** %2, align 8, !tbaa !1
  %38 = getelementptr inbounds double, double* %37, i64 3
  %39 = load double, double* %38, align 8, !tbaa !7
  %40 = load double*, double** %2, align 8, !tbaa !1
  %41 = getelementptr inbounds double, double* %40, i64 4
  %42 = load double, double* %41, align 8, !tbaa !7
  %43 = load double*, double** %2, align 8, !tbaa !1
  %44 = getelementptr inbounds double, double* %43, i64 5
  %45 = load double, double* %44, align 8, !tbaa !7
  %46 = load double*, double** %2, align 8, !tbaa !1
  %47 = getelementptr inbounds double, double* %46, i64 6
  %48 = load double, double* %47, align 8, !tbaa !7
  %49 = load double*, double** %2, align 8, !tbaa !1
  %50 = getelementptr inbounds double, double* %49, i64 7
  %51 = load double, double* %50, align 8, !tbaa !7
  %52 = load double*, double** %3, align 8, !tbaa !1
  %53 = getelementptr inbounds double, double* %52, i64 0
  %54 = load double, double* %53, align 8, !tbaa !7
  %55 = load double*, double** %3, align 8, !tbaa !1
  %56 = getelementptr inbounds double, double* %55, i64 1
  %57 = load double, double* %56, align 8, !tbaa !7
  %58 = load double*, double** %3, align 8, !tbaa !1
  %59 = getelementptr inbounds double, double* %58, i64 2
  %60 = load double, double* %59, align 8, !tbaa !7
  %61 = load double*, double** %3, align 8, !tbaa !1
  %62 = getelementptr inbounds double, double* %61, i64 3
  %63 = load double, double* %62, align 8, !tbaa !7
  %64 = load double*, double** %3, align 8, !tbaa !1
  %65 = getelementptr inbounds double, double* %64, i64 4
  %66 = load double, double* %65, align 8, !tbaa !7
  %67 = load double*, double** %3, align 8, !tbaa !1
  %68 = getelementptr inbounds double, double* %67, i64 5
  %69 = load double, double* %68, align 8, !tbaa !7
  %70 = load double*, double** %3, align 8, !tbaa !1
  %71 = getelementptr inbounds double, double* %70, i64 6
  %72 = load double, double* %71, align 8, !tbaa !7
  %73 = load double*, double** %3, align 8, !tbaa !1
  %74 = getelementptr inbounds double, double* %73, i64 7
  %75 = load double, double* %74, align 8, !tbaa !7
  %76 = call double @_ZL14CalcElemVolumedddddddddddddddddddddddd(double %6, double %9, double %12, double %15, double %18, double %21, double %24, double %27, double %30, double %33, double %36, double %39, double %42, double %45, double %48, double %51, double %54, double %57, double %60, double %63, double %66, double %69, double %72, double %75)
  ret double %76
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4voloEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 43
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain8elemMassEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 49
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9nodalMassEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 12
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 37
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5symmXEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 13
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5symmYEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 14
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5symmZEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 15
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain4lximEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 21
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain4lxipEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 22
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5letamEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 23
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain5letapEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 24
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain6lzetamEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 25
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain6lzetapEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 26
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 27
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #5

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL13TimeIncrementv() #6 {
  %targetdt = alloca double, align 8
  %ratio = alloca double, align 8
  %olddt = alloca double, align 8
  %newdt = alloca double, align 8
  %1 = call dereferenceable(8) double* @_ZN6Domain8stoptimeEv(%struct.Domain* @domain)
  %2 = load double, double* %1, !tbaa !7
  %3 = call dereferenceable(8) double* @_ZN6Domain4timeEv(%struct.Domain* @domain)
  %4 = load double, double* %3, !tbaa !7
  %5 = fsub double %2, %4
  store double %5, double* %targetdt, align 8, !tbaa !7
  %6 = call dereferenceable(8) double* @_ZN6Domain7dtfixedEv(%struct.Domain* @domain)
  %7 = load double, double* %6, !tbaa !7
  %8 = fcmp ole double %7, 0.000000e+00
  br i1 %8, label %9, label %70

; <label>:9                                       ; preds = %0
  %10 = call dereferenceable(4) i32* @_ZN6Domain5cycleEv(%struct.Domain* @domain)
  %11 = load i32, i32* %10, !tbaa !5
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %70

; <label>:13                                      ; preds = %9
  %14 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %15 = load double, double* %14, !tbaa !7
  store double %15, double* %olddt, align 8, !tbaa !7
  store double 1.000000e+20, double* %newdt, align 8, !tbaa !7
  %16 = call dereferenceable(8) double* @_ZN6Domain9dtcourantEv(%struct.Domain* @domain)
  %17 = load double, double* %16, !tbaa !7
  %18 = load double, double* %newdt, align 8, !tbaa !7
  %19 = fcmp olt double %17, %18
  br i1 %19, label %20, label %24

; <label>:20                                      ; preds = %13
  %21 = call dereferenceable(8) double* @_ZN6Domain9dtcourantEv(%struct.Domain* @domain)
  %22 = load double, double* %21, !tbaa !7
  %23 = fdiv double %22, 2.000000e+00
  store double %23, double* %newdt, align 8, !tbaa !7
  br label %24

; <label>:24                                      ; preds = %20, %13
  %25 = call dereferenceable(8) double* @_ZN6Domain7dthydroEv(%struct.Domain* @domain)
  %26 = load double, double* %25, !tbaa !7
  %27 = load double, double* %newdt, align 8, !tbaa !7
  %28 = fcmp olt double %26, %27
  br i1 %28, label %29, label %34

; <label>:29                                      ; preds = %24
  %30 = call dereferenceable(8) double* @_ZN6Domain7dthydroEv(%struct.Domain* @domain)
  %31 = load double, double* %30, !tbaa !7
  %32 = fmul double %31, 2.000000e+00
  %33 = fdiv double %32, 3.000000e+00
  store double %33, double* %newdt, align 8, !tbaa !7
  br label %34

; <label>:34                                      ; preds = %29, %24
  %35 = load double, double* %newdt, align 8, !tbaa !7
  %36 = load double, double* %olddt, align 8, !tbaa !7
  %37 = fdiv double %35, %36
  store double %37, double* %ratio, align 8, !tbaa !7
  %38 = load double, double* %ratio, align 8, !tbaa !7
  %39 = fcmp oge double %38, 1.000000e+00
  br i1 %39, label %40, label %59

; <label>:40                                      ; preds = %34
  %41 = load double, double* %ratio, align 8, !tbaa !7
  %42 = call dereferenceable(8) double* @_ZN6Domain15deltatimemultlbEv(%struct.Domain* @domain)
  %43 = load double, double* %42, !tbaa !7
  %44 = fcmp olt double %41, %43
  br i1 %44, label %45, label %47

; <label>:45                                      ; preds = %40
  %46 = load double, double* %olddt, align 8, !tbaa !7
  store double %46, double* %newdt, align 8, !tbaa !7
  br label %58

; <label>:47                                      ; preds = %40
  %48 = load double, double* %ratio, align 8, !tbaa !7
  %49 = call dereferenceable(8) double* @_ZN6Domain15deltatimemultubEv(%struct.Domain* @domain)
  %50 = load double, double* %49, !tbaa !7
  %51 = fcmp ogt double %48, %50
  br i1 %51, label %52, label %57

; <label>:52                                      ; preds = %47
  %53 = load double, double* %olddt, align 8, !tbaa !7
  %54 = call dereferenceable(8) double* @_ZN6Domain15deltatimemultubEv(%struct.Domain* @domain)
  %55 = load double, double* %54, !tbaa !7
  %56 = fmul double %53, %55
  store double %56, double* %newdt, align 8, !tbaa !7
  br label %57

; <label>:57                                      ; preds = %52, %47
  br label %58

; <label>:58                                      ; preds = %57, %45
  br label %59

; <label>:59                                      ; preds = %58, %34
  %60 = load double, double* %newdt, align 8, !tbaa !7
  %61 = call dereferenceable(8) double* @_ZN6Domain5dtmaxEv(%struct.Domain* @domain)
  %62 = load double, double* %61, !tbaa !7
  %63 = fcmp ogt double %60, %62
  br i1 %63, label %64, label %67

; <label>:64                                      ; preds = %59
  %65 = call dereferenceable(8) double* @_ZN6Domain5dtmaxEv(%struct.Domain* @domain)
  %66 = load double, double* %65, !tbaa !7
  store double %66, double* %newdt, align 8, !tbaa !7
  br label %67

; <label>:67                                      ; preds = %64, %59
  %68 = load double, double* %newdt, align 8, !tbaa !7
  %69 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  store double %68, double* %69, !tbaa !7
  br label %70

; <label>:70                                      ; preds = %67, %9, %0
  %71 = load double, double* %targetdt, align 8, !tbaa !7
  %72 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %73 = load double, double* %72, !tbaa !7
  %74 = fcmp ogt double %71, %73
  br i1 %74, label %75, label %87

; <label>:75                                      ; preds = %70
  %76 = load double, double* %targetdt, align 8, !tbaa !7
  %77 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %78 = load double, double* %77, !tbaa !7
  %79 = fmul double 4.000000e+00, %78
  %80 = fdiv double %79, 3.000000e+00
  %81 = fcmp olt double %76, %80
  br i1 %81, label %82, label %87

; <label>:82                                      ; preds = %75
  %83 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %84 = load double, double* %83, !tbaa !7
  %85 = fmul double 2.000000e+00, %84
  %86 = fdiv double %85, 3.000000e+00
  store double %86, double* %targetdt, align 8, !tbaa !7
  br label %87

; <label>:87                                      ; preds = %82, %75, %70
  %88 = load double, double* %targetdt, align 8, !tbaa !7
  %89 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %90 = load double, double* %89, !tbaa !7
  %91 = fcmp olt double %88, %90
  br i1 %91, label %92, label %95

; <label>:92                                      ; preds = %87
  %93 = load double, double* %targetdt, align 8, !tbaa !7
  %94 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  store double %93, double* %94, !tbaa !7
  br label %95

; <label>:95                                      ; preds = %92, %87
  %96 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %97 = load double, double* %96, !tbaa !7
  %98 = call dereferenceable(8) double* @_ZN6Domain4timeEv(%struct.Domain* @domain)
  %99 = load double, double* %98, !tbaa !7
  %100 = fadd double %99, %97
  store double %100, double* %98, !tbaa !7
  %101 = call dereferenceable(4) i32* @_ZN6Domain5cycleEv(%struct.Domain* @domain)
  %102 = load i32, i32* %101, !tbaa !5
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %101, !tbaa !5
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL16LagrangeLeapFrogv() #0 {
  call void @_ZL13LagrangeNodalv()
  call void @_ZL16LagrangeElementsv()
  call void @_ZL27CalcTimeConstraintsForElemsv()
  ret void
}

declare i32 @printf(i8*, ...) #7

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr double @_Z4FABSd(double %arg) #6 comdat {
  %1 = alloca double, align 8
  store double %arg, double* %1, align 8, !tbaa !7
  %2 = load double, double* %1, align 8, !tbaa !7
  %3 = call double @fabs(double %2) #16
  ret double %3
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIdSaIdEEC2Ev(%"class.std::vector"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  %2 = load %"class.std::vector"*, %"class.std::vector"** %1
  %3 = bitcast %"class.std::vector"* %2 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIdSaIdEEC2Ev(%"struct.std::_Vector_base"* %3)
  ret void
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIiSaIiEEC2Ev(%"class.std::vector.0"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  %2 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %3 = bitcast %"class.std::vector.0"* %2 to %"struct.std::_Vector_base.1"*
  call void @_ZNSt12_Vector_baseIiSaIiEEC2Ev(%"struct.std::_Vector_base.1"* %3)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIdSaIdEED2Ev(%"class.std::vector"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  %4 = load %"class.std::vector"*, %"class.std::vector"** %1
  %5 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %6, i32 0, i32 0
  %8 = load double*, double** %7, align 8, !tbaa !14
  %9 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  %10 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %9, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %10, i32 0, i32 1
  %12 = load double*, double** %11, align 8, !tbaa !17
  %13 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  %14 = invoke dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %13)
          to label %15 unwind label %18

; <label>:15                                      ; preds = %0
  invoke void @_ZSt8_DestroyIPddEvT_S1_RSaIT0_E(double* %8, double* %12, %"class.std::allocator"* dereferenceable(1) %14)
          to label %16 unwind label %18

; <label>:16                                      ; preds = %15
  %17 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIdSaIdEED2Ev(%"struct.std::_Vector_base"* %17)
  ret void

; <label>:18                                      ; preds = %15, %0
  %19 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %20 = extractvalue { i8*, i32 } %19, 0
  store i8* %20, i8** %2
  %21 = extractvalue { i8*, i32 } %19, 1
  store i32 %21, i32* %3
  %22 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  invoke void @_ZNSt12_Vector_baseIdSaIdEED2Ev(%"struct.std::_Vector_base"* %22)
          to label %23 unwind label %29

; <label>:23                                      ; preds = %18
  br label %24

; <label>:24                                      ; preds = %23
  %25 = load i8*, i8** %2
  %26 = load i32, i32* %3
  %27 = insertvalue { i8*, i32 } undef, i8* %25, 0
  %28 = insertvalue { i8*, i32 } %27, i32 %26, 1
  resume { i8*, i32 } %28

; <label>:29                                      ; preds = %18
  %30 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %31 = extractvalue { i8*, i32 } %30, 0
  call void @__clang_call_terminate(i8* %31) #14
  unreachable
}

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #8 comdat {
  %2 = call i8* @__cxa_begin_catch(i8* %0) #1
  call void @_ZSt9terminatev() #14
  unreachable
}

declare i8* @__cxa_begin_catch(i8*)

declare void @_ZSt9terminatev()

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIiSaIiEED2Ev(%"class.std::vector.0"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  %4 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %5 = bitcast %"class.std::vector.0"* %4 to %"struct.std::_Vector_base.1"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %6, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8, !tbaa !18
  %9 = bitcast %"class.std::vector.0"* %4 to %"struct.std::_Vector_base.1"*
  %10 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %9, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %10, i32 0, i32 1
  %12 = load i32*, i32** %11, align 8, !tbaa !21
  %13 = bitcast %"class.std::vector.0"* %4 to %"struct.std::_Vector_base.1"*
  %14 = invoke dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %13)
          to label %15 unwind label %18

; <label>:15                                      ; preds = %0
  invoke void @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(i32* %8, i32* %12, %"class.std::allocator.2"* dereferenceable(1) %14)
          to label %16 unwind label %18

; <label>:16                                      ; preds = %15
  %17 = bitcast %"class.std::vector.0"* %4 to %"struct.std::_Vector_base.1"*
  call void @_ZNSt12_Vector_baseIiSaIiEED2Ev(%"struct.std::_Vector_base.1"* %17)
  ret void

; <label>:18                                      ; preds = %15, %0
  %19 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %20 = extractvalue { i8*, i32 } %19, 0
  store i8* %20, i8** %2
  %21 = extractvalue { i8*, i32 } %19, 1
  store i32 %21, i32* %3
  %22 = bitcast %"class.std::vector.0"* %4 to %"struct.std::_Vector_base.1"*
  invoke void @_ZNSt12_Vector_baseIiSaIiEED2Ev(%"struct.std::_Vector_base.1"* %22)
          to label %23 unwind label %29

; <label>:23                                      ; preds = %18
  br label %24

; <label>:24                                      ; preds = %23
  %25 = load i8*, i8** %2
  %26 = load i32, i32* %3
  %27 = insertvalue { i8*, i32 } undef, i8* %25, 0
  %28 = insertvalue { i8*, i32 } %27, i32 %26, 1
  resume { i8*, i32 } %28

; <label>:29                                      ; preds = %18
  %30 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %31 = extractvalue { i8*, i32 } %30, 0
  call void @__clang_call_terminate(i8* %31) #14
  unreachable
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIdSaIdEEC2Ev(%"struct.std::_Vector_base"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %this, %"struct.std::_Vector_base"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %1
  %3 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %2, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC2Ev(%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC2Ev(%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %this, %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"*, %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"** %1
  %3 = bitcast %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %2 to %"class.std::allocator"*
  call void @_ZNSaIdEC2Ev(%"class.std::allocator"* %3) #1
  %4 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %2, i32 0, i32 0
  store double* null, double** %4, align 8, !tbaa !22
  %5 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %2, i32 0, i32 1
  store double* null, double** %5, align 8, !tbaa !23
  %6 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %2, i32 0, i32 2
  store double* null, double** %6, align 8, !tbaa !24
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZNSaIdEC2Ev(%"class.std::allocator"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %this, %"class.std::allocator"** %1, align 8, !tbaa !1
  %2 = load %"class.std::allocator"*, %"class.std::allocator"** %1
  %3 = bitcast %"class.std::allocator"* %2 to %"class.__gnu_cxx::new_allocator"*
  call void @_ZN9__gnu_cxx13new_allocatorIdEC2Ev(%"class.__gnu_cxx::new_allocator"* %3) #1
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIdEC2Ev(%"class.__gnu_cxx::new_allocator"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %this, %"class.__gnu_cxx::new_allocator"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %1
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIiSaIiEEC2Ev(%"struct.std::_Vector_base.1"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base.1"*, align 8
  store %"struct.std::_Vector_base.1"* %this, %"struct.std::_Vector_base.1"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base.1"*, %"struct.std::_Vector_base.1"** %1
  %3 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %2, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2Ev(%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2Ev(%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %this, %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"*, %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"** %1
  %3 = bitcast %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %2 to %"class.std::allocator.2"*
  call void @_ZNSaIiEC2Ev(%"class.std::allocator.2"* %3) #1
  %4 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %2, i32 0, i32 0
  store i32* null, i32** %4, align 8, !tbaa !25
  %5 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %2, i32 0, i32 1
  store i32* null, i32** %5, align 8, !tbaa !26
  %6 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %2, i32 0, i32 2
  store i32* null, i32** %6, align 8, !tbaa !27
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZNSaIiEC2Ev(%"class.std::allocator.2"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.std::allocator.2"*, align 8
  store %"class.std::allocator.2"* %this, %"class.std::allocator.2"** %1, align 8, !tbaa !1
  %2 = load %"class.std::allocator.2"*, %"class.std::allocator.2"** %1
  %3 = bitcast %"class.std::allocator.2"* %2 to %"class.__gnu_cxx::new_allocator.3"*
  call void @_ZN9__gnu_cxx13new_allocatorIiEC2Ev(%"class.__gnu_cxx::new_allocator.3"* %3) #1
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIiEC2Ev(%"class.__gnu_cxx::new_allocator.3"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::new_allocator.3"*, align 8
  store %"class.__gnu_cxx::new_allocator.3"* %this, %"class.__gnu_cxx::new_allocator.3"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::new_allocator.3"*, %"class.__gnu_cxx::new_allocator.3"** %1
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt8_DestroyIPddEvT_S1_RSaIT0_E(double* %__first, double* %__last, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca %"class.std::allocator"*, align 8
  store double* %__first, double** %2, align 8, !tbaa !1
  store double* %__last, double** %3, align 8, !tbaa !1
  store %"class.std::allocator"* %0, %"class.std::allocator"** %4, align 8, !tbaa !28
  %5 = load double*, double** %2, align 8, !tbaa !1
  %6 = load double*, double** %3, align 8, !tbaa !1
  call void @_ZSt8_DestroyIPdEvT_S1_(double* %5, double* %6)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %this) #4 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %this, %"struct.std::_Vector_base"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %1
  %3 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %2, i32 0, i32 0
  %4 = bitcast %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %3 to %"class.std::allocator"*
  ret %"class.std::allocator"* %4
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIdSaIdEED2Ev(%"struct.std::_Vector_base"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base"*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %"struct.std::_Vector_base"* %this, %"struct.std::_Vector_base"** %1, align 8, !tbaa !1
  %4 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %1
  %5 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %5, i32 0, i32 0
  %7 = load double*, double** %6, align 8, !tbaa !14
  %8 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %8, i32 0, i32 2
  %10 = load double*, double** %9, align 8, !tbaa !29
  %11 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %11, i32 0, i32 0
  %13 = load double*, double** %12, align 8, !tbaa !14
  %14 = ptrtoint double* %10 to i64
  %15 = ptrtoint double* %13 to i64
  %16 = sub i64 %14, %15
  %17 = sdiv exact i64 %16, 8
  invoke void @_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm(%"struct.std::_Vector_base"* %4, double* %7, i64 %17)
          to label %18 unwind label %20

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  call void bitcast (void (%"class.__gnu_cxx::new_allocator"*)* @_ZN9__gnu_cxx13new_allocatorIdED2Ev to void (%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"*)*)(%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %19) #1
  ret void

; <label>:20                                      ; preds = %0
  %21 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %22 = extractvalue { i8*, i32 } %21, 0
  store i8* %22, i8** %2
  %23 = extractvalue { i8*, i32 } %21, 1
  store i32 %23, i32* %3
  %24 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  call void bitcast (void (%"class.__gnu_cxx::new_allocator"*)* @_ZN9__gnu_cxx13new_allocatorIdED2Ev to void (%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"*)*)(%"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %24) #1
  br label %25

; <label>:25                                      ; preds = %20
  %26 = load i8*, i8** %2
  %27 = load i32, i32* %3
  %28 = insertvalue { i8*, i32 } undef, i8* %26, 0
  %29 = insertvalue { i8*, i32 } %28, i32 %27, 1
  resume { i8*, i32 } %29
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt8_DestroyIPdEvT_S1_(double* %__first, double* %__last) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  %3 = load double*, double** %1, align 8, !tbaa !1
  %4 = load double*, double** %2, align 8, !tbaa !1
  call void @_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_(double* %3, double* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_(double*, double*) #4 comdat align 2 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  store double* %0, double** %3, align 8, !tbaa !1
  store double* %1, double** %4, align 8, !tbaa !1
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm(%"struct.std::_Vector_base"* %this, double* %__p, i64 %__n) #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base"*, align 8
  %2 = alloca double*, align 8
  %3 = alloca i64, align 8
  store %"struct.std::_Vector_base"* %this, %"struct.std::_Vector_base"** %1, align 8, !tbaa !1
  store double* %__p, double** %2, align 8, !tbaa !1
  store i64 %__n, i64* %3, align 8, !tbaa !13
  %4 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %1
  %5 = load double*, double** %2, align 8, !tbaa !1
  %6 = icmp ne double* %5, null
  br i1 %6, label %7, label %12

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %9 = bitcast %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %8 to %"class.__gnu_cxx::new_allocator"*
  %10 = load double*, double** %2, align 8, !tbaa !1
  %11 = load i64, i64* %3, align 8, !tbaa !13
  call void @_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm(%"class.__gnu_cxx::new_allocator"* %9, double* %10, i64 %11)
  br label %12

; <label>:12                                      ; preds = %7, %0
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIdED2Ev(%"class.__gnu_cxx::new_allocator"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %this, %"class.__gnu_cxx::new_allocator"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %1
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm(%"class.__gnu_cxx::new_allocator"* %this, double* %__p, i64) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %3 = alloca double*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator"* %this, %"class.__gnu_cxx::new_allocator"** %2, align 8, !tbaa !1
  store double* %__p, double** %3, align 8, !tbaa !1
  store i64 %0, i64* %4, align 8, !tbaa !13
  %5 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2
  %6 = load double*, double** %3, align 8, !tbaa !1
  %7 = bitcast double* %6 to i8*
  call void @_ZdlPv(i8* %7) #1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #9

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(i32* %__first, i32* %__last, %"class.std::allocator.2"* dereferenceable(1)) #0 comdat {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"class.std::allocator.2"*, align 8
  store i32* %__first, i32** %2, align 8, !tbaa !1
  store i32* %__last, i32** %3, align 8, !tbaa !1
  store %"class.std::allocator.2"* %0, %"class.std::allocator.2"** %4, align 8, !tbaa !28
  %5 = load i32*, i32** %2, align 8, !tbaa !1
  %6 = load i32*, i32** %3, align 8, !tbaa !1
  call void @_ZSt8_DestroyIPiEvT_S1_(i32* %5, i32* %6)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %this) #4 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base.1"*, align 8
  store %"struct.std::_Vector_base.1"* %this, %"struct.std::_Vector_base.1"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base.1"*, %"struct.std::_Vector_base.1"** %1
  %3 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %2, i32 0, i32 0
  %4 = bitcast %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %3 to %"class.std::allocator.2"*
  ret %"class.std::allocator.2"* %4
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIiSaIiEED2Ev(%"struct.std::_Vector_base.1"* %this) unnamed_addr #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base.1"*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %"struct.std::_Vector_base.1"* %this, %"struct.std::_Vector_base.1"** %1, align 8, !tbaa !1
  %4 = load %"struct.std::_Vector_base.1"*, %"struct.std::_Vector_base.1"** %1
  %5 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %5, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !18
  %8 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %8, i32 0, i32 2
  %10 = load i32*, i32** %9, align 8, !tbaa !30
  %11 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %11, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8, !tbaa !18
  %14 = ptrtoint i32* %10 to i64
  %15 = ptrtoint i32* %13 to i64
  %16 = sub i64 %14, %15
  %17 = sdiv exact i64 %16, 4
  invoke void @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%"struct.std::_Vector_base.1"* %4, i32* %7, i64 %17)
          to label %18 unwind label %20

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  call void bitcast (void (%"class.__gnu_cxx::new_allocator.3"*)* @_ZN9__gnu_cxx13new_allocatorIiED2Ev to void (%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"*)*)(%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %19) #1
  ret void

; <label>:20                                      ; preds = %0
  %21 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %22 = extractvalue { i8*, i32 } %21, 0
  store i8* %22, i8** %2
  %23 = extractvalue { i8*, i32 } %21, 1
  store i32 %23, i32* %3
  %24 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  call void bitcast (void (%"class.__gnu_cxx::new_allocator.3"*)* @_ZN9__gnu_cxx13new_allocatorIiED2Ev to void (%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"*)*)(%"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %24) #1
  br label %25

; <label>:25                                      ; preds = %20
  %26 = load i8*, i8** %2
  %27 = load i32, i32* %3
  %28 = insertvalue { i8*, i32 } undef, i8* %26, 0
  %29 = insertvalue { i8*, i32 } %28, i32 %27, 1
  resume { i8*, i32 } %29
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt8_DestroyIPiEvT_S1_(i32* %__first, i32* %__last) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  %3 = load i32*, i32** %1, align 8, !tbaa !1
  %4 = load i32*, i32** %2, align 8, !tbaa !1
  call void @_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_(i32* %3, i32* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZNSt12_Destroy_auxILb1EE9__destroyIPiEEvT_S3_(i32*, i32*) #4 comdat align 2 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  store i32* %0, i32** %3, align 8, !tbaa !1
  store i32* %1, i32** %4, align 8, !tbaa !1
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%"struct.std::_Vector_base.1"* %this, i32* %__p, i64 %__n) #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base.1"*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i64, align 8
  store %"struct.std::_Vector_base.1"* %this, %"struct.std::_Vector_base.1"** %1, align 8, !tbaa !1
  store i32* %__p, i32** %2, align 8, !tbaa !1
  store i64 %__n, i64* %3, align 8, !tbaa !13
  %4 = load %"struct.std::_Vector_base.1"*, %"struct.std::_Vector_base.1"** %1
  %5 = load i32*, i32** %2, align 8, !tbaa !1
  %6 = icmp ne i32* %5, null
  br i1 %6, label %7, label %12

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %9 = bitcast %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %8 to %"class.__gnu_cxx::new_allocator.3"*
  %10 = load i32*, i32** %2, align 8, !tbaa !1
  %11 = load i64, i64* %3, align 8, !tbaa !13
  call void @_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim(%"class.__gnu_cxx::new_allocator.3"* %9, i32* %10, i64 %11)
  br label %12

; <label>:12                                      ; preds = %7, %0
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIiED2Ev(%"class.__gnu_cxx::new_allocator.3"* %this) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::new_allocator.3"*, align 8
  store %"class.__gnu_cxx::new_allocator.3"* %this, %"class.__gnu_cxx::new_allocator.3"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::new_allocator.3"*, %"class.__gnu_cxx::new_allocator.3"** %1
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim(%"class.__gnu_cxx::new_allocator.3"* %this, i32* %__p, i64) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.3"*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator.3"* %this, %"class.__gnu_cxx::new_allocator.3"** %2, align 8, !tbaa !1
  store i32* %__p, i32** %3, align 8, !tbaa !1
  store i64 %0, i64* %4, align 8, !tbaa !13
  %5 = load %"class.__gnu_cxx::new_allocator.3"*, %"class.__gnu_cxx::new_allocator.3"** %2
  %6 = load i32*, i32** %3, align 8, !tbaa !1
  %7 = bitcast i32* %6 to i8*
  call void @_ZdlPv(i8* %7) #1
  ret void
}

; Function Attrs: nounwind
declare i64 @strtol(i8*, i8**, i32) #5

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIiSaIiEE6resizeEmi(%"class.std::vector.0"* %this, i64 %__new_size, i32 %__x) #2 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  store i64 %__new_size, i64* %2, align 8, !tbaa !13
  store i32 %__x, i32* %3, align 4, !tbaa !5
  %5 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %6 = load i64, i64* %2, align 8, !tbaa !13
  %7 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  %8 = icmp ugt i64 %6, %7
  br i1 %8, label %9, label %17

; <label>:9                                       ; preds = %0
  %10 = call i32* @_ZNSt6vectorIiSaIiEE3endEv(%"class.std::vector.0"* %5)
  %11 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store i32* %10, i32** %11
  %12 = load i64, i64* %2, align 8, !tbaa !13
  %13 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  %14 = sub i64 %12, %13
  %15 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  %16 = load i32*, i32** %15
  call void @_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi(%"class.std::vector.0"* %5, i32* %16, i64 %14, i32* dereferenceable(4) %3)
  br label %29

; <label>:17                                      ; preds = %0
  %18 = load i64, i64* %2, align 8, !tbaa !13
  %19 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  %20 = icmp ult i64 %18, %19
  br i1 %20, label %21, label %28

; <label>:21                                      ; preds = %17
  %22 = bitcast %"class.std::vector.0"* %5 to %"struct.std::_Vector_base.1"*
  %23 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %22, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %23, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8, !tbaa !18
  %26 = load i64, i64* %2, align 8, !tbaa !13
  %27 = getelementptr inbounds i32, i32* %25, i64 %26
  call void @_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi(%"class.std::vector.0"* %5, i32* %27)
  br label %28

; <label>:28                                      ; preds = %21, %17
  br label %29

; <label>:29                                      ; preds = %28, %9
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIdSaIdEE6resizeEmd(%"class.std::vector"* %this, i64 %__new_size, double %__x) #2 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  store i64 %__new_size, i64* %2, align 8, !tbaa !13
  store double %__x, double* %3, align 8, !tbaa !7
  %5 = load %"class.std::vector"*, %"class.std::vector"** %1
  %6 = load i64, i64* %2, align 8, !tbaa !13
  %7 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  %8 = icmp ugt i64 %6, %7
  br i1 %8, label %9, label %17

; <label>:9                                       ; preds = %0
  %10 = call double* @_ZNSt6vectorIdSaIdEE3endEv(%"class.std::vector"* %5)
  %11 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %4, i32 0, i32 0
  store double* %10, double** %11
  %12 = load i64, i64* %2, align 8, !tbaa !13
  %13 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  %14 = sub i64 %12, %13
  %15 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %4, i32 0, i32 0
  %16 = load double*, double** %15
  call void @_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd(%"class.std::vector"* %5, double* %16, i64 %14, double* dereferenceable(8) %3)
  br label %29

; <label>:17                                      ; preds = %0
  %18 = load i64, i64* %2, align 8, !tbaa !13
  %19 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  %20 = icmp ult i64 %18, %19
  br i1 %20, label %21, label %28

; <label>:21                                      ; preds = %17
  %22 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %23 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %22, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %23, i32 0, i32 0
  %25 = load double*, double** %24, align 8, !tbaa !14
  %26 = load i64, i64* %2, align 8, !tbaa !13
  %27 = getelementptr inbounds double, double* %25, i64 %26
  call void @_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd(%"class.std::vector"* %5, double* %27)
  br label %28

; <label>:28                                      ; preds = %21, %17
  br label %29

; <label>:29                                      ; preds = %28, %9
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %this) #4 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  %2 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %3 = bitcast %"class.std::vector.0"* %2 to %"struct.std::_Vector_base.1"*
  %4 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %3, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %4, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8, !tbaa !21
  %7 = bitcast %"class.std::vector.0"* %2 to %"struct.std::_Vector_base.1"*
  %8 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %7, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %8, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !18
  %11 = ptrtoint i32* %6 to i64
  %12 = ptrtoint i32* %10 to i64
  %13 = sub i64 %11, %12
  %14 = sdiv exact i64 %13, 4
  ret i64 %14
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi(%"class.std::vector.0"* %this, i32* %__position.coerce, i64 %__n, i32* dereferenceable(4) %__x) #2 comdat align 2 {
  %__position = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %__position, i32 0, i32 0
  store i32* %__position.coerce, i32** %5
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i32* %__x, i32** %3, align 8, !tbaa !28
  %6 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %7 = bitcast %"class.__gnu_cxx::__normal_iterator"* %4 to i8*
  %8 = bitcast %"class.__gnu_cxx::__normal_iterator"* %__position to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 8, i1 false), !tbaa.struct !31
  %9 = load i64, i64* %2, align 8, !tbaa !13
  %10 = load i32*, i32** %3, align 8
  %11 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  %12 = load i32*, i32** %11
  call void @_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi(%"class.std::vector.0"* %6, i32* %12, i64 %9, i32* dereferenceable(4) %10)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr i32* @_ZNSt6vectorIiSaIiEE3endEv(%"class.std::vector.0"* %this) #2 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %2 = alloca %"class.std::vector.0"*, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %2, align 8, !tbaa !1
  %3 = load %"class.std::vector.0"*, %"class.std::vector.0"** %2
  %4 = bitcast %"class.std::vector.0"* %3 to %"struct.std::_Vector_base.1"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %5, i32 0, i32 1
  call void @_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %1, i32** dereferenceable(8) %6)
  %7 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %1, i32 0, i32 0
  %8 = load i32*, i32** %7
  ret i32* %8
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIiSaIiEE15_M_erase_at_endEPi(%"class.std::vector.0"* %this, i32* %__pos) #2 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i32*, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  store i32* %__pos, i32** %2, align 8, !tbaa !1
  %3 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %4 = load i32*, i32** %2, align 8, !tbaa !1
  %5 = bitcast %"class.std::vector.0"* %3 to %"struct.std::_Vector_base.1"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %6, i32 0, i32 1
  %8 = load i32*, i32** %7, align 8, !tbaa !21
  %9 = bitcast %"class.std::vector.0"* %3 to %"struct.std::_Vector_base.1"*
  %10 = call dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %9)
  call void @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(i32* %4, i32* %8, %"class.std::allocator.2"* dereferenceable(1) %10)
  %11 = load i32*, i32** %2, align 8, !tbaa !1
  %12 = bitcast %"class.std::vector.0"* %3 to %"struct.std::_Vector_base.1"*
  %13 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %12, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %13, i32 0, i32 1
  store i32* %11, i32** %14, align 8, !tbaa !21
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi(%"class.std::vector.0"* %this, i32* %__position.coerce, i64 %__n, i32* dereferenceable(4) %__x) #2 comdat align 2 {
  %__position = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  %__x_copy = alloca i32, align 4
  %__elems_after = alloca i64, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %__old_finish = alloca i32*, align 8
  %__len = alloca i64, align 8
  %__elems_before = alloca i64, align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %__new_start = alloca i32*, align 8
  %__new_finish = alloca i32*, align 8
  %6 = alloca i8*
  %7 = alloca i32
  %8 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %__position, i32 0, i32 0
  store i32* %__position.coerce, i32** %8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i32* %__x, i32** %3, align 8, !tbaa !28
  %9 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %10 = load i64, i64* %2, align 8, !tbaa !13
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %247

; <label>:12                                      ; preds = %0
  %13 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %14 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %13, i32 0, i32 0
  %15 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %14, i32 0, i32 2
  %16 = load i32*, i32** %15, align 8, !tbaa !30
  %17 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %18 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %17, i32 0, i32 0
  %19 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %18, i32 0, i32 1
  %20 = load i32*, i32** %19, align 8, !tbaa !21
  %21 = ptrtoint i32* %16 to i64
  %22 = ptrtoint i32* %20 to i64
  %23 = sub i64 %21, %22
  %24 = sdiv exact i64 %23, 4
  %25 = load i64, i64* %2, align 8, !tbaa !13
  %26 = icmp uge i64 %24, %25
  br i1 %26, label %27, label %117

; <label>:27                                      ; preds = %12
  %28 = load i32*, i32** %3, align 8
  %29 = load i32, i32* %28, align 4, !tbaa !5
  store i32 %29, i32* %__x_copy, align 4, !tbaa !5
  %30 = call i32* @_ZNSt6vectorIiSaIiEE3endEv(%"class.std::vector.0"* %9)
  %31 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store i32* %30, i32** %31
  %32 = call i64 @_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %4, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %__position)
  store i64 %32, i64* %__elems_after, align 8, !tbaa !13
  %33 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %34 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %33, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %34, i32 0, i32 1
  %36 = load i32*, i32** %35, align 8, !tbaa !21
  store i32* %36, i32** %__old_finish, align 8, !tbaa !1
  %37 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %38 = load i64, i64* %2, align 8, !tbaa !13
  %39 = icmp ugt i64 %37, %38
  br i1 %39, label %40, label %79

; <label>:40                                      ; preds = %27
  %41 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %42 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %41, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %42, i32 0, i32 1
  %44 = load i32*, i32** %43, align 8, !tbaa !21
  %45 = load i64, i64* %2, align 8, !tbaa !13
  %46 = sub i64 0, %45
  %47 = getelementptr inbounds i32, i32* %44, i64 %46
  %48 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %49 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %48, i32 0, i32 0
  %50 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %49, i32 0, i32 1
  %51 = load i32*, i32** %50, align 8, !tbaa !21
  %52 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %53 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %52, i32 0, i32 0
  %54 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %53, i32 0, i32 1
  %55 = load i32*, i32** %54, align 8, !tbaa !21
  %56 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %57 = call dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %56)
  %58 = call i32* @_ZSt22__uninitialized_move_aIPiS0_SaIiEET0_T_S3_S2_RT1_(i32* %47, i32* %51, i32* %55, %"class.std::allocator.2"* dereferenceable(1) %57)
  %59 = load i64, i64* %2, align 8, !tbaa !13
  %60 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %61 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %60, i32 0, i32 0
  %62 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %61, i32 0, i32 1
  %63 = load i32*, i32** %62, align 8, !tbaa !21
  %64 = getelementptr inbounds i32, i32* %63, i64 %59
  store i32* %64, i32** %62, align 8, !tbaa !21
  %65 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
  %66 = load i32*, i32** %65, !tbaa !1
  %67 = load i32*, i32** %__old_finish, align 8, !tbaa !1
  %68 = load i64, i64* %2, align 8, !tbaa !13
  %69 = sub i64 0, %68
  %70 = getelementptr inbounds i32, i32* %67, i64 %69
  %71 = load i32*, i32** %__old_finish, align 8, !tbaa !1
  %72 = call i32* @_ZSt13copy_backwardIPiS0_ET0_T_S2_S1_(i32* %66, i32* %70, i32* %71)
  %73 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
  %74 = load i32*, i32** %73, !tbaa !1
  %75 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
  %76 = load i32*, i32** %75, !tbaa !1
  %77 = load i64, i64* %2, align 8, !tbaa !13
  %78 = getelementptr inbounds i32, i32* %76, i64 %77
  call void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* %74, i32* %78, i32* dereferenceable(4) %__x_copy)
  br label %116

; <label>:79                                      ; preds = %27
  %80 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %81 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %80, i32 0, i32 0
  %82 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %81, i32 0, i32 1
  %83 = load i32*, i32** %82, align 8, !tbaa !21
  %84 = load i64, i64* %2, align 8, !tbaa !13
  %85 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %86 = sub i64 %84, %85
  %87 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %88 = call dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %87)
  call void @_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_RSaIT2_E(i32* %83, i64 %86, i32* dereferenceable(4) %__x_copy, %"class.std::allocator.2"* dereferenceable(1) %88)
  %89 = load i64, i64* %2, align 8, !tbaa !13
  %90 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %91 = sub i64 %89, %90
  %92 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %93 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %92, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %93, i32 0, i32 1
  %95 = load i32*, i32** %94, align 8, !tbaa !21
  %96 = getelementptr inbounds i32, i32* %95, i64 %91
  store i32* %96, i32** %94, align 8, !tbaa !21
  %97 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
  %98 = load i32*, i32** %97, !tbaa !1
  %99 = load i32*, i32** %__old_finish, align 8, !tbaa !1
  %100 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %101 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %100, i32 0, i32 0
  %102 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %101, i32 0, i32 1
  %103 = load i32*, i32** %102, align 8, !tbaa !21
  %104 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %105 = call dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %104)
  %106 = call i32* @_ZSt22__uninitialized_move_aIPiS0_SaIiEET0_T_S3_S2_RT1_(i32* %98, i32* %99, i32* %103, %"class.std::allocator.2"* dereferenceable(1) %105)
  %107 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %108 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %109 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %108, i32 0, i32 0
  %110 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %109, i32 0, i32 1
  %111 = load i32*, i32** %110, align 8, !tbaa !21
  %112 = getelementptr inbounds i32, i32* %111, i64 %107
  store i32* %112, i32** %110, align 8, !tbaa !21
  %113 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
  %114 = load i32*, i32** %113, !tbaa !1
  %115 = load i32*, i32** %__old_finish, align 8, !tbaa !1
  call void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* %114, i32* %115, i32* dereferenceable(4) %__x_copy)
  br label %116

; <label>:116                                     ; preds = %79, %40
  br label %246

; <label>:117                                     ; preds = %12
  %118 = load i64, i64* %2, align 8, !tbaa !13
  %119 = call i64 @_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc(%"class.std::vector.0"* %9, i64 %118, i8* getelementptr inbounds ([23 x i8]* @.str9, i32 0, i32 0))
  store i64 %119, i64* %__len, align 8, !tbaa !13
  %120 = call i32* @_ZNSt6vectorIiSaIiEE5beginEv(%"class.std::vector.0"* %9)
  %121 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store i32* %120, i32** %121
  %122 = call i64 @_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %__position, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5)
  store i64 %122, i64* %__elems_before, align 8, !tbaa !13
  %123 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %124 = load i64, i64* %__len, align 8, !tbaa !13
  %125 = call i32* @_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm(%"struct.std::_Vector_base.1"* %123, i64 %124)
  store i32* %125, i32** %__new_start, align 8, !tbaa !1
  %126 = load i32*, i32** %__new_start, align 8, !tbaa !1
  store i32* %126, i32** %__new_finish, align 8, !tbaa !1
  %127 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %128 = load i64, i64* %__elems_before, align 8, !tbaa !13
  %129 = getelementptr inbounds i32, i32* %127, i64 %128
  %130 = load i64, i64* %2, align 8, !tbaa !13
  %131 = load i32*, i32** %3, align 8
  %132 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %133 = invoke dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %132)
          to label %134 unwind label %165

; <label>:134                                     ; preds = %117
  invoke void @_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_RSaIT2_E(i32* %129, i64 %130, i32* dereferenceable(4) %131, %"class.std::allocator.2"* dereferenceable(1) %133)
          to label %135 unwind label %165

; <label>:135                                     ; preds = %134
  store i32* null, i32** %__new_finish, align 8, !tbaa !1
  %136 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %137 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %136, i32 0, i32 0
  %138 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %137, i32 0, i32 0
  %139 = load i32*, i32** %138, align 8, !tbaa !18
  %140 = invoke dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
          to label %141 unwind label %165

; <label>:141                                     ; preds = %135
  %142 = load i32*, i32** %140, !tbaa !1
  %143 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %144 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %145 = invoke dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %144)
          to label %146 unwind label %165

; <label>:146                                     ; preds = %141
  %147 = invoke i32* @_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_(i32* %139, i32* %142, i32* %143, %"class.std::allocator.2"* dereferenceable(1) %145)
          to label %148 unwind label %165

; <label>:148                                     ; preds = %146
  store i32* %147, i32** %__new_finish, align 8, !tbaa !1
  %149 = load i64, i64* %2, align 8, !tbaa !13
  %150 = load i32*, i32** %__new_finish, align 8, !tbaa !1
  %151 = getelementptr inbounds i32, i32* %150, i64 %149
  store i32* %151, i32** %__new_finish, align 8, !tbaa !1
  %152 = invoke dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %__position)
          to label %153 unwind label %165

; <label>:153                                     ; preds = %148
  %154 = load i32*, i32** %152, !tbaa !1
  %155 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %156 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %155, i32 0, i32 0
  %157 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %156, i32 0, i32 1
  %158 = load i32*, i32** %157, align 8, !tbaa !21
  %159 = load i32*, i32** %__new_finish, align 8, !tbaa !1
  %160 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %161 = invoke dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %160)
          to label %162 unwind label %165

; <label>:162                                     ; preds = %153
  %163 = invoke i32* @_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_(i32* %154, i32* %158, i32* %159, %"class.std::allocator.2"* dereferenceable(1) %161)
          to label %164 unwind label %165

; <label>:164                                     ; preds = %162
  store i32* %163, i32** %__new_finish, align 8, !tbaa !1
  br label %204

; <label>:165                                     ; preds = %162, %153, %148, %146, %141, %135, %134, %117
  %166 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %167 = extractvalue { i8*, i32 } %166, 0
  store i8* %167, i8** %6
  %168 = extractvalue { i8*, i32 } %166, 1
  store i32 %168, i32* %7
  br label %169

; <label>:169                                     ; preds = %165
  %170 = load i8*, i8** %6
  %171 = call i8* @__cxa_begin_catch(i8* %170) #1
  %172 = load i32*, i32** %__new_finish, align 8, !tbaa !1
  %173 = icmp ne i32* %172, null
  br i1 %173, label %191, label %174

; <label>:174                                     ; preds = %169
  %175 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %176 = load i64, i64* %__elems_before, align 8, !tbaa !13
  %177 = getelementptr inbounds i32, i32* %175, i64 %176
  %178 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %179 = load i64, i64* %__elems_before, align 8, !tbaa !13
  %180 = getelementptr inbounds i32, i32* %178, i64 %179
  %181 = load i64, i64* %2, align 8, !tbaa !13
  %182 = getelementptr inbounds i32, i32* %180, i64 %181
  %183 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %184 = invoke dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %183)
          to label %185 unwind label %187

; <label>:185                                     ; preds = %174
  invoke void @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(i32* %177, i32* %182, %"class.std::allocator.2"* dereferenceable(1) %184)
          to label %186 unwind label %187

; <label>:186                                     ; preds = %185
  br label %198

; <label>:187                                     ; preds = %202, %198, %196, %191, %185, %174
  %188 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %189 = extractvalue { i8*, i32 } %188, 0
  store i8* %189, i8** %6
  %190 = extractvalue { i8*, i32 } %188, 1
  store i32 %190, i32* %7
  invoke void @__cxa_end_catch()
          to label %203 unwind label %253

; <label>:191                                     ; preds = %169
  %192 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %193 = load i32*, i32** %__new_finish, align 8, !tbaa !1
  %194 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %195 = invoke dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %194)
          to label %196 unwind label %187

; <label>:196                                     ; preds = %191
  invoke void @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(i32* %192, i32* %193, %"class.std::allocator.2"* dereferenceable(1) %195)
          to label %197 unwind label %187

; <label>:197                                     ; preds = %196
  br label %198

; <label>:198                                     ; preds = %197, %186
  %199 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %200 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %201 = load i64, i64* %__len, align 8, !tbaa !13
  invoke void @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%"struct.std::_Vector_base.1"* %199, i32* %200, i64 %201)
          to label %202 unwind label %187

; <label>:202                                     ; preds = %198
  invoke void @__cxa_rethrow() #17
          to label %256 unwind label %187

; <label>:203                                     ; preds = %187
  br label %248

; <label>:204                                     ; preds = %164
  %205 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %206 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %205, i32 0, i32 0
  %207 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %206, i32 0, i32 0
  %208 = load i32*, i32** %207, align 8, !tbaa !18
  %209 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %210 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %209, i32 0, i32 0
  %211 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %210, i32 0, i32 1
  %212 = load i32*, i32** %211, align 8, !tbaa !21
  %213 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %214 = call dereferenceable(1) %"class.std::allocator.2"* @_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %213)
  call void @_ZSt8_DestroyIPiiEvT_S1_RSaIT0_E(i32* %208, i32* %212, %"class.std::allocator.2"* dereferenceable(1) %214)
  %215 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %216 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %217 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %216, i32 0, i32 0
  %218 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %217, i32 0, i32 0
  %219 = load i32*, i32** %218, align 8, !tbaa !18
  %220 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %221 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %220, i32 0, i32 0
  %222 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %221, i32 0, i32 2
  %223 = load i32*, i32** %222, align 8, !tbaa !30
  %224 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %225 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %224, i32 0, i32 0
  %226 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %225, i32 0, i32 0
  %227 = load i32*, i32** %226, align 8, !tbaa !18
  %228 = ptrtoint i32* %223 to i64
  %229 = ptrtoint i32* %227 to i64
  %230 = sub i64 %228, %229
  %231 = sdiv exact i64 %230, 4
  call void @_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim(%"struct.std::_Vector_base.1"* %215, i32* %219, i64 %231)
  %232 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %233 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %234 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %233, i32 0, i32 0
  %235 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %234, i32 0, i32 0
  store i32* %232, i32** %235, align 8, !tbaa !18
  %236 = load i32*, i32** %__new_finish, align 8, !tbaa !1
  %237 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %238 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %237, i32 0, i32 0
  %239 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %238, i32 0, i32 1
  store i32* %236, i32** %239, align 8, !tbaa !21
  %240 = load i32*, i32** %__new_start, align 8, !tbaa !1
  %241 = load i64, i64* %__len, align 8, !tbaa !13
  %242 = getelementptr inbounds i32, i32* %240, i64 %241
  %243 = bitcast %"class.std::vector.0"* %9 to %"struct.std::_Vector_base.1"*
  %244 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %243, i32 0, i32 0
  %245 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %244, i32 0, i32 2
  store i32* %242, i32** %245, align 8, !tbaa !30
  br label %246

; <label>:246                                     ; preds = %204, %116
  br label %247

; <label>:247                                     ; preds = %246, %0
  ret void

; <label>:248                                     ; preds = %203
  %249 = load i8*, i8** %6
  %250 = load i32, i32* %7
  %251 = insertvalue { i8*, i32 } undef, i8* %249, 0
  %252 = insertvalue { i8*, i32 } %251, i32 %250, 1
  resume { i8*, i32 } %252

; <label>:253                                     ; preds = %187
  %254 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %255 = extractvalue { i8*, i32 } %254, 0
  call void @__clang_call_terminate(i8* %255) #14
  unreachable

; <label>:256                                     ; preds = %202
  unreachable
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: inlinehint uwtable
define linkonce_odr i64 @_ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %__lhs, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %__rhs) #0 comdat {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %2 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %__lhs, %"class.__gnu_cxx::__normal_iterator"** %1, align 8, !tbaa !28
  store %"class.__gnu_cxx::__normal_iterator"* %__rhs, %"class.__gnu_cxx::__normal_iterator"** %2, align 8, !tbaa !28
  %3 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %1, align 8
  %4 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %3)
  %5 = load i32*, i32** %4, !tbaa !1
  %6 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %7 = call dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %6)
  %8 = load i32*, i32** %7, !tbaa !1
  %9 = ptrtoint i32* %5 to i64
  %10 = ptrtoint i32* %8 to i64
  %11 = sub i64 %9, %10
  %12 = sdiv exact i64 %11, 4
  ret i64 %12
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt22__uninitialized_move_aIPiS0_SaIiEET0_T_S3_S2_RT1_(i32* %__first, i32* %__last, i32* %__result, %"class.std::allocator.2"* dereferenceable(1) %__alloc) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"class.std::allocator.2"*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  store %"class.std::allocator.2"* %__alloc, %"class.std::allocator.2"** %4, align 8, !tbaa !28
  %5 = load i32*, i32** %1, align 8, !tbaa !1
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = load i32*, i32** %3, align 8, !tbaa !1
  %8 = load %"class.std::allocator.2"*, %"class.std::allocator.2"** %4, align 8
  %9 = call i32* @_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_RSaIT1_E(i32* %5, i32* %6, i32* %7, %"class.std::allocator.2"* dereferenceable(1) %8)
  ret i32* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt13copy_backwardIPiS0_ET0_T_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = call i32* @_ZSt12__miter_baseIPiENSt11_Miter_baseIT_E13iterator_typeES2_(i32* %4)
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = call i32* @_ZSt12__miter_baseIPiENSt11_Miter_baseIT_E13iterator_typeES2_(i32* %6)
  %8 = load i32*, i32** %3, align 8, !tbaa !1
  %9 = call i32* @_ZSt23__copy_move_backward_a2ILb0EPiS0_ET1_T0_S2_S1_(i32* %5, i32* %7, i32* %8)
  ret i32* %9
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) i32** @_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %this) #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %this, %"class.__gnu_cxx::__normal_iterator"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %1
  %3 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  ret i32** %3
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* %__first, i32* %__last, i32* dereferenceable(4) %__value) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__value, i32** %3, align 8, !tbaa !28
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %4)
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %6)
  %8 = load i32*, i32** %3, align 8
  call void @_ZSt8__fill_aIPiiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i32* %5, i32* %7, i32* dereferenceable(4) %8)
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_RSaIT2_E(i32* %__first, i64 %__n, i32* dereferenceable(4) %__x, %"class.std::allocator.2"* dereferenceable(1)) #0 comdat {
  %2 = alloca i32*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32*, align 8
  %5 = alloca %"class.std::allocator.2"*, align 8
  store i32* %__first, i32** %2, align 8, !tbaa !1
  store i64 %__n, i64* %3, align 8, !tbaa !13
  store i32* %__x, i32** %4, align 8, !tbaa !28
  store %"class.std::allocator.2"* %0, %"class.std::allocator.2"** %5, align 8, !tbaa !28
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = load i64, i64* %3, align 8, !tbaa !13
  %8 = load i32*, i32** %4, align 8
  call void @_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_(i32* %6, i64 %7, i32* dereferenceable(4) %8)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr i64 @_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc(%"class.std::vector.0"* %this, i64 %__n, i8* %__s) #2 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %__len = alloca i64, align 8
  %4 = alloca i64, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i8* %__s, i8** %3, align 8, !tbaa !1
  %5 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %6 = call i64 @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%"class.std::vector.0"* %5)
  %7 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  %8 = sub i64 %6, %7
  %9 = load i64, i64* %2, align 8, !tbaa !13
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = load i8*, i8** %3, align 8, !tbaa !1
  call void @_ZSt20__throw_length_errorPKc(i8* %12) #17
  unreachable

; <label>:13                                      ; preds = %0
  %14 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  %15 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  store i64 %15, i64* %4, !tbaa !13
  %16 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %4, i64* dereferenceable(8) %2)
  %17 = load i64, i64* %16, !tbaa !13
  %18 = add i64 %14, %17
  store i64 %18, i64* %__len, align 8, !tbaa !13
  %19 = load i64, i64* %__len, align 8, !tbaa !13
  %20 = call i64 @_ZNKSt6vectorIiSaIiEE4sizeEv(%"class.std::vector.0"* %5)
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %26, label %22

; <label>:22                                      ; preds = %13
  %23 = load i64, i64* %__len, align 8, !tbaa !13
  %24 = call i64 @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%"class.std::vector.0"* %5)
  %25 = icmp ugt i64 %23, %24
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %22, %13
  %27 = call i64 @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%"class.std::vector.0"* %5)
  br label %30

; <label>:28                                      ; preds = %22
  %29 = load i64, i64* %__len, align 8, !tbaa !13
  br label %30

; <label>:30                                      ; preds = %28, %26
  %31 = phi i64 [ %27, %26 ], [ %29, %28 ]
  ret i64 %31
}

; Function Attrs: uwtable
define linkonce_odr i32* @_ZNSt6vectorIiSaIiEE5beginEv(%"class.std::vector.0"* %this) #2 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %2 = alloca %"class.std::vector.0"*, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %2, align 8, !tbaa !1
  %3 = load %"class.std::vector.0"*, %"class.std::vector.0"** %2
  %4 = bitcast %"class.std::vector.0"* %3 to %"struct.std::_Vector_base.1"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %5, i32 0, i32 0
  call void @_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %1, i32** dereferenceable(8) %6)
  %7 = getelementptr %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %1, i32 0, i32 0
  %8 = load i32*, i32** %7
  ret i32* %8
}

; Function Attrs: uwtable
define linkonce_odr i32* @_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm(%"struct.std::_Vector_base.1"* %this, i64 %__n) #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base.1"*, align 8
  %2 = alloca i64, align 8
  store %"struct.std::_Vector_base.1"* %this, %"struct.std::_Vector_base.1"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  %3 = load %"struct.std::_Vector_base.1"*, %"struct.std::_Vector_base.1"** %1
  %4 = load i64, i64* %2, align 8, !tbaa !13
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %3, i32 0, i32 0
  %8 = bitcast %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %7 to %"class.__gnu_cxx::new_allocator.3"*
  %9 = load i64, i64* %2, align 8, !tbaa !13
  %10 = call i32* @_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.3"* %8, i64 %9, i8* null)
  br label %12

; <label>:11                                      ; preds = %0
  br label %12

; <label>:12                                      ; preds = %11, %6
  %13 = phi i32* [ %10, %6 ], [ null, %11 ]
  ret i32* %13
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt34__uninitialized_move_if_noexcept_aIPiS0_SaIiEET0_T_S3_S2_RT1_(i32* %__first, i32* %__last, i32* %__result, %"class.std::allocator.2"* dereferenceable(1) %__alloc) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"class.std::allocator.2"*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  store %"class.std::allocator.2"* %__alloc, %"class.std::allocator.2"** %4, align 8, !tbaa !28
  %5 = load i32*, i32** %1, align 8, !tbaa !1
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = load i32*, i32** %3, align 8, !tbaa !1
  %8 = load %"class.std::allocator.2"*, %"class.std::allocator.2"** %4, align 8
  %9 = call i32* @_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_RSaIT1_E(i32* %5, i32* %6, i32* %7, %"class.std::allocator.2"* dereferenceable(1) %8)
  ret i32* %9
}

declare void @__cxa_rethrow()

declare void @__cxa_end_catch()

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_RSaIT1_E(i32* %__first, i32* %__last, i32* %__result, %"class.std::allocator.2"* dereferenceable(1)) #0 comdat {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca %"class.std::allocator.2"*, align 8
  store i32* %__first, i32** %2, align 8, !tbaa !1
  store i32* %__last, i32** %3, align 8, !tbaa !1
  store i32* %__result, i32** %4, align 8, !tbaa !1
  store %"class.std::allocator.2"* %0, %"class.std::allocator.2"** %5, align 8, !tbaa !28
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = load i32*, i32** %3, align 8, !tbaa !1
  %8 = load i32*, i32** %4, align 8, !tbaa !1
  %9 = call i32* @_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_(i32* %6, i32* %7, i32* %8)
  ret i32* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = load i32*, i32** %2, align 8, !tbaa !1
  %6 = load i32*, i32** %3, align 8, !tbaa !1
  %7 = call i32* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPiS2_EET0_T_S4_S3_(i32* %4, i32* %5, i32* %6)
  ret i32* %7
}

; Function Attrs: uwtable
define linkonce_odr i32* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPiS2_EET0_T_S4_S3_(i32* %__first, i32* %__last, i32* %__result) #2 comdat align 2 {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = load i32*, i32** %2, align 8, !tbaa !1
  %6 = load i32*, i32** %3, align 8, !tbaa !1
  %7 = call i32* @_ZSt4copyIPiS0_ET0_T_S2_S1_(i32* %4, i32* %5, i32* %6)
  ret i32* %7
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt4copyIPiS0_ET0_T_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = call i32* @_ZSt12__miter_baseIPiENSt11_Miter_baseIT_E13iterator_typeES2_(i32* %4)
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = call i32* @_ZSt12__miter_baseIPiENSt11_Miter_baseIT_E13iterator_typeES2_(i32* %6)
  %8 = load i32*, i32** %3, align 8, !tbaa !1
  %9 = call i32* @_ZSt14__copy_move_a2ILb0EPiS0_ET1_T0_S2_S1_(i32* %5, i32* %7, i32* %8)
  ret i32* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt14__copy_move_a2ILb0EPiS0_ET1_T0_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %4)
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %6)
  %8 = load i32*, i32** %3, align 8, !tbaa !1
  %9 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %8)
  %10 = call i32* @_ZSt13__copy_move_aILb0EPiS0_ET1_T0_S2_S1_(i32* %5, i32* %7, i32* %9)
  ret i32* %10
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr i32* @_ZSt12__miter_baseIPiENSt11_Miter_baseIT_E13iterator_typeES2_(i32* %__it) #6 comdat {
  %1 = alloca i32*, align 8
  store i32* %__it, i32** %1, align 8, !tbaa !1
  %2 = load i32*, i32** %1, align 8, !tbaa !1
  %3 = call i32* @_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_(i32* %2)
  ret i32* %3
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt13__copy_move_aILb0EPiS0_ET1_T0_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %__simple = alloca i8, align 1
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  store i8 1, i8* %__simple, align 1, !tbaa !32
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = load i32*, i32** %2, align 8, !tbaa !1
  %6 = load i32*, i32** %3, align 8, !tbaa !1
  %7 = call i32* @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(i32* %4, i32* %5, i32* %6)
  ret i32* %7
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %__it) #0 comdat {
  %1 = alloca i32*, align 8
  store i32* %__it, i32** %1, align 8, !tbaa !1
  %2 = load i32*, i32** %1, align 8, !tbaa !1
  %3 = call i32* @_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_(i32* %2)
  ret i32* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr i32* @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_(i32* %__first, i32* %__last, i32* %__result) #4 comdat align 2 {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %_Num = alloca i64, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %2, align 8, !tbaa !1
  %5 = load i32*, i32** %1, align 8, !tbaa !1
  %6 = ptrtoint i32* %4 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = sdiv exact i64 %8, 4
  store i64 %9, i64* %_Num, align 8, !tbaa !13
  %10 = load i64, i64* %_Num, align 8, !tbaa !13
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %19

; <label>:12                                      ; preds = %0
  %13 = load i32*, i32** %3, align 8, !tbaa !1
  %14 = bitcast i32* %13 to i8*
  %15 = load i32*, i32** %1, align 8, !tbaa !1
  %16 = bitcast i32* %15 to i8*
  %17 = load i64, i64* %_Num, align 8, !tbaa !13
  %18 = mul i64 4, %17
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %14, i8* %16, i64 %18, i32 4, i1 false)
  br label %19

; <label>:19                                      ; preds = %12, %0
  %20 = load i32*, i32** %3, align 8, !tbaa !1
  %21 = load i64, i64* %_Num, align 8, !tbaa !13
  %22 = getelementptr inbounds i32, i32* %20, i64 %21
  ret i32* %22
}

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define linkonce_odr i32* @_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_(i32* %__it) #4 comdat align 2 {
  %1 = alloca i32*, align 8
  store i32* %__it, i32** %1, align 8, !tbaa !1
  %2 = load i32*, i32** %1, align 8, !tbaa !1
  ret i32* %2
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt23__copy_move_backward_a2ILb0EPiS0_ET1_T0_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %4)
  %6 = load i32*, i32** %2, align 8, !tbaa !1
  %7 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %6)
  %8 = load i32*, i32** %3, align 8, !tbaa !1
  %9 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %8)
  %10 = call i32* @_ZSt22__copy_move_backward_aILb0EPiS0_ET1_T0_S2_S1_(i32* %5, i32* %7, i32* %9)
  ret i32* %10
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt22__copy_move_backward_aILb0EPiS0_ET1_T0_S2_S1_(i32* %__first, i32* %__last, i32* %__result) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %__simple = alloca i8, align 1
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  store i8 1, i8* %__simple, align 1, !tbaa !32
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = load i32*, i32** %2, align 8, !tbaa !1
  %6 = load i32*, i32** %3, align 8, !tbaa !1
  %7 = call i32* @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIiEEPT_PKS3_S6_S4_(i32* %4, i32* %5, i32* %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr i32* @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIiEEPT_PKS3_S6_S4_(i32* %__first, i32* %__last, i32* %__result) #4 comdat align 2 {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %_Num = alloca i64, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__result, i32** %3, align 8, !tbaa !1
  %4 = load i32*, i32** %2, align 8, !tbaa !1
  %5 = load i32*, i32** %1, align 8, !tbaa !1
  %6 = ptrtoint i32* %4 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = sdiv exact i64 %8, 4
  store i64 %9, i64* %_Num, align 8, !tbaa !13
  %10 = load i64, i64* %_Num, align 8, !tbaa !13
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %22

; <label>:12                                      ; preds = %0
  %13 = load i32*, i32** %3, align 8, !tbaa !1
  %14 = load i64, i64* %_Num, align 8, !tbaa !13
  %15 = sub i64 0, %14
  %16 = getelementptr inbounds i32, i32* %13, i64 %15
  %17 = bitcast i32* %16 to i8*
  %18 = load i32*, i32** %1, align 8, !tbaa !1
  %19 = bitcast i32* %18 to i8*
  %20 = load i64, i64* %_Num, align 8, !tbaa !13
  %21 = mul i64 4, %20
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %17, i8* %19, i64 %21, i32 4, i1 false)
  br label %22

; <label>:22                                      ; preds = %12, %0
  %23 = load i32*, i32** %3, align 8, !tbaa !1
  %24 = load i64, i64* %_Num, align 8, !tbaa !13
  %25 = sub i64 0, %24
  %26 = getelementptr inbounds i32, i32* %23, i64 %25
  ret i32* %26
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIPiiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i32* %__first, i32* %__last, i32* dereferenceable(4) %__value) #6 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %__tmp = alloca i32, align 4
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i32* %__last, i32** %2, align 8, !tbaa !1
  store i32* %__value, i32** %3, align 8, !tbaa !28
  %4 = load i32*, i32** %3, align 8
  %5 = load i32, i32* %4, align 4, !tbaa !5
  store i32 %5, i32* %__tmp, align 4, !tbaa !5
  br label %6

; <label>:6                                       ; preds = %13, %0
  %7 = load i32*, i32** %1, align 8, !tbaa !1
  %8 = load i32*, i32** %2, align 8, !tbaa !1
  %9 = icmp ne i32* %7, %8
  br i1 %9, label %10, label %16

; <label>:10                                      ; preds = %6
  %11 = load i32, i32* %__tmp, align 4, !tbaa !5
  %12 = load i32*, i32** %1, align 8, !tbaa !1
  store i32 %11, i32* %12, align 4, !tbaa !5
  br label %13

; <label>:13                                      ; preds = %10
  %14 = load i32*, i32** %1, align 8, !tbaa !1
  %15 = getelementptr inbounds i32, i32* %14, i32 1
  store i32* %15, i32** %1, align 8, !tbaa !1
  br label %6

; <label>:16                                      ; preds = %6
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_(i32* %__first, i64 %__n, i32* dereferenceable(4) %__x) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i32* %__x, i32** %3, align 8, !tbaa !28
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = load i64, i64* %2, align 8, !tbaa !13
  %6 = load i32*, i32** %3, align 8
  call void @_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPimiEEvT_T0_RKT1_(i32* %4, i64 %5, i32* dereferenceable(4) %6)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPimiEEvT_T0_RKT1_(i32* %__first, i64 %__n, i32* dereferenceable(4) %__x) #2 comdat align 2 {
  %1 = alloca i32*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i32* %__x, i32** %3, align 8, !tbaa !28
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = load i64, i64* %2, align 8, !tbaa !13
  %6 = load i32*, i32** %3, align 8
  %7 = call i32* @_ZSt6fill_nIPimiET_S1_T0_RKT1_(i32* %4, i64 %5, i32* dereferenceable(4) %6)
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i32* @_ZSt6fill_nIPimiET_S1_T0_RKT1_(i32* %__first, i64 %__n, i32* dereferenceable(4) %__value) #0 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i32* %__value, i32** %3, align 8, !tbaa !28
  %4 = load i32*, i32** %1, align 8, !tbaa !1
  %5 = call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %4)
  %6 = load i64, i64* %2, align 8, !tbaa !13
  %7 = load i32*, i32** %3, align 8
  %8 = call i32* @_ZSt10__fill_n_aIPimiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i32* %5, i64 %6, i32* dereferenceable(4) %7)
  ret i32* %8
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr i32* @_ZSt10__fill_n_aIPimiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i32* %__first, i64 %__n, i32* dereferenceable(4) %__value) #6 comdat {
  %1 = alloca i32*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i32*, align 8
  %__tmp = alloca i32, align 4
  %__niter = alloca i64, align 8
  store i32* %__first, i32** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i32* %__value, i32** %3, align 8, !tbaa !28
  %4 = load i32*, i32** %3, align 8
  %5 = load i32, i32* %4, align 4, !tbaa !5
  store i32 %5, i32* %__tmp, align 4, !tbaa !5
  %6 = load i64, i64* %2, align 8, !tbaa !13
  store i64 %6, i64* %__niter, align 8, !tbaa !13
  br label %7

; <label>:7                                       ; preds = %13, %0
  %8 = load i64, i64* %__niter, align 8, !tbaa !13
  %9 = icmp ugt i64 %8, 0
  br i1 %9, label %10, label %18

; <label>:10                                      ; preds = %7
  %11 = load i32, i32* %__tmp, align 4, !tbaa !5
  %12 = load i32*, i32** %1, align 8, !tbaa !1
  store i32 %11, i32* %12, align 4, !tbaa !5
  br label %13

; <label>:13                                      ; preds = %10
  %14 = load i64, i64* %__niter, align 8, !tbaa !13
  %15 = add i64 %14, -1
  store i64 %15, i64* %__niter, align 8, !tbaa !13
  %16 = load i32*, i32** %1, align 8, !tbaa !1
  %17 = getelementptr inbounds i32, i32* %16, i32 1
  store i32* %17, i32** %1, align 8, !tbaa !1
  br label %7

; <label>:18                                      ; preds = %7
  %19 = load i32*, i32** %1, align 8, !tbaa !1
  ret i32* %19
}

; Function Attrs: uwtable
define linkonce_odr i64 @_ZNKSt6vectorIiSaIiEE8max_sizeEv(%"class.std::vector.0"* %this) #2 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  %2 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %3 = bitcast %"class.std::vector.0"* %2 to %"struct.std::_Vector_base.1"*
  %4 = call dereferenceable(1) %"class.std::allocator.2"* @_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %3)
  %5 = call i64 @_ZN9__gnu_cxx14__alloc_traitsISaIiEE8max_sizeERKS1_(%"class.std::allocator.2"* dereferenceable(1) %4)
  ret i64 %5
}

; Function Attrs: noreturn
declare void @_ZSt20__throw_length_errorPKc(i8*) #10

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %__a, i64* dereferenceable(8) %__b) #6 comdat {
  %1 = alloca i64*, align 8
  %2 = alloca i64*, align 8
  %3 = alloca i64*, align 8
  store i64* %__a, i64** %2, align 8, !tbaa !28
  store i64* %__b, i64** %3, align 8, !tbaa !28
  %4 = load i64*, i64** %2, align 8
  %5 = load i64, i64* %4, align 8, !tbaa !13
  %6 = load i64*, i64** %3, align 8
  %7 = load i64, i64* %6, align 8, !tbaa !13
  %8 = icmp ult i64 %5, %7
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = load i64*, i64** %3, align 8
  store i64* %10, i64** %1
  br label %13

; <label>:11                                      ; preds = %0
  %12 = load i64*, i64** %2, align 8
  store i64* %12, i64** %1
  br label %13

; <label>:13                                      ; preds = %11, %9
  %14 = load i64*, i64** %1
  ret i64* %14
}

; Function Attrs: nounwind uwtable
define linkonce_odr i64 @_ZN9__gnu_cxx14__alloc_traitsISaIiEE8max_sizeERKS1_(%"class.std::allocator.2"* dereferenceable(1) %__a) #4 comdat align 2 {
  %1 = alloca %"class.std::allocator.2"*, align 8
  store %"class.std::allocator.2"* %__a, %"class.std::allocator.2"** %1, align 8, !tbaa !28
  %2 = load %"class.std::allocator.2"*, %"class.std::allocator.2"** %1, align 8
  %3 = bitcast %"class.std::allocator.2"* %2 to %"class.__gnu_cxx::new_allocator.3"*
  %4 = call i64 @_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv(%"class.__gnu_cxx::new_allocator.3"* %3) #1
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.2"* @_ZNKSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.1"* %this) #4 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base.1"*, align 8
  store %"struct.std::_Vector_base.1"* %this, %"struct.std::_Vector_base.1"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base.1"*, %"struct.std::_Vector_base.1"** %1
  %3 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %2, i32 0, i32 0
  %4 = bitcast %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %3 to %"class.std::allocator.2"*
  ret %"class.std::allocator.2"* %4
}

; Function Attrs: nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv(%"class.__gnu_cxx::new_allocator.3"* %this) #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::new_allocator.3"*, align 8
  store %"class.__gnu_cxx::new_allocator.3"* %this, %"class.__gnu_cxx::new_allocator.3"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::new_allocator.3"*, %"class.__gnu_cxx::new_allocator.3"** %1
  ret i64 4611686018427387903
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %this, i32** dereferenceable(8) %__i) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %2 = alloca i32**, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %this, %"class.__gnu_cxx::__normal_iterator"** %1, align 8, !tbaa !1
  store i32** %__i, i32*** %2, align 8, !tbaa !28
  %3 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %1
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %5 = load i32**, i32*** %2, align 8
  %6 = load i32*, i32** %5, align 8, !tbaa !1
  store i32* %6, i32** %4, align 8, !tbaa !34
  ret void
}

; Function Attrs: uwtable
define linkonce_odr i32* @_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.3"* %this, i64 %__n, i8*) #2 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.3"*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator.3"* %this, %"class.__gnu_cxx::new_allocator.3"** %2, align 8, !tbaa !1
  store i64 %__n, i64* %3, align 8, !tbaa !13
  store i8* %0, i8** %4, align 8, !tbaa !1
  %5 = load %"class.__gnu_cxx::new_allocator.3"*, %"class.__gnu_cxx::new_allocator.3"** %2
  %6 = load i64, i64* %3, align 8, !tbaa !13
  %7 = call i64 @_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv(%"class.__gnu_cxx::new_allocator.3"* %5) #1
  %8 = icmp ugt i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %1
  call void @_ZSt17__throw_bad_allocv() #17
  unreachable

; <label>:10                                      ; preds = %1
  %11 = load i64, i64* %3, align 8, !tbaa !13
  %12 = mul i64 %11, 4
  %13 = call noalias i8* @_Znwm(i64 %12)
  %14 = bitcast i8* %13 to i32*
  ret i32* %14
}

; Function Attrs: noreturn
declare void @_ZSt17__throw_bad_allocv() #10

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #11

; Function Attrs: nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %this) #4 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  %2 = load %"class.std::vector"*, %"class.std::vector"** %1
  %3 = bitcast %"class.std::vector"* %2 to %"struct.std::_Vector_base"*
  %4 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %3, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %4, i32 0, i32 1
  %6 = load double*, double** %5, align 8, !tbaa !17
  %7 = bitcast %"class.std::vector"* %2 to %"struct.std::_Vector_base"*
  %8 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %7, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %8, i32 0, i32 0
  %10 = load double*, double** %9, align 8, !tbaa !14
  %11 = ptrtoint double* %6 to i64
  %12 = ptrtoint double* %10 to i64
  %13 = sub i64 %11, %12
  %14 = sdiv exact i64 %13, 8
  ret i64 %14
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd(%"class.std::vector"* %this, double* %__position.coerce, i64 %__n, double* dereferenceable(8) %__x) #2 comdat align 2 {
  %__position = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double*, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %5 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %__position, i32 0, i32 0
  store double* %__position.coerce, double** %5
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store double* %__x, double** %3, align 8, !tbaa !28
  %6 = load %"class.std::vector"*, %"class.std::vector"** %1
  %7 = bitcast %"class.__gnu_cxx::__normal_iterator.5"* %4 to i8*
  %8 = bitcast %"class.__gnu_cxx::__normal_iterator.5"* %__position to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 8, i32 8, i1 false), !tbaa.struct !31
  %9 = load i64, i64* %2, align 8, !tbaa !13
  %10 = load double*, double** %3, align 8
  %11 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %4, i32 0, i32 0
  %12 = load double*, double** %11
  call void @_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd(%"class.std::vector"* %6, double* %12, i64 %9, double* dereferenceable(8) %10)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr double* @_ZNSt6vectorIdSaIdEE3endEv(%"class.std::vector"* %this) #2 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %2 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %2, align 8, !tbaa !1
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %5, i32 0, i32 1
  call void @_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.5"* %1, double** dereferenceable(8) %6)
  %7 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %1, i32 0, i32 0
  %8 = load double*, double** %7
  ret double* %8
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd(%"class.std::vector"* %this, double* %__pos) #2 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca double*, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  store double* %__pos, double** %2, align 8, !tbaa !1
  %3 = load %"class.std::vector"*, %"class.std::vector"** %1
  %4 = load double*, double** %2, align 8, !tbaa !1
  %5 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %6, i32 0, i32 1
  %8 = load double*, double** %7, align 8, !tbaa !17
  %9 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %10 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %9)
  call void @_ZSt8_DestroyIPddEvT_S1_RSaIT0_E(double* %4, double* %8, %"class.std::allocator"* dereferenceable(1) %10)
  %11 = load double*, double** %2, align 8, !tbaa !1
  %12 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %13 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %12, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %13, i32 0, i32 1
  store double* %11, double** %14, align 8, !tbaa !17
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEmRKd(%"class.std::vector"* %this, double* %__position.coerce, i64 %__n, double* dereferenceable(8) %__x) #2 comdat align 2 {
  %__position = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double*, align 8
  %__x_copy = alloca double, align 8
  %__elems_after = alloca i64, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %__old_finish = alloca double*, align 8
  %__len = alloca i64, align 8
  %__elems_before = alloca i64, align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %__new_start = alloca double*, align 8
  %__new_finish = alloca double*, align 8
  %6 = alloca i8*
  %7 = alloca i32
  %8 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %__position, i32 0, i32 0
  store double* %__position.coerce, double** %8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store double* %__x, double** %3, align 8, !tbaa !28
  %9 = load %"class.std::vector"*, %"class.std::vector"** %1
  %10 = load i64, i64* %2, align 8, !tbaa !13
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %247

; <label>:12                                      ; preds = %0
  %13 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %14 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %13, i32 0, i32 0
  %15 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %14, i32 0, i32 2
  %16 = load double*, double** %15, align 8, !tbaa !29
  %17 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %18 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %17, i32 0, i32 0
  %19 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %18, i32 0, i32 1
  %20 = load double*, double** %19, align 8, !tbaa !17
  %21 = ptrtoint double* %16 to i64
  %22 = ptrtoint double* %20 to i64
  %23 = sub i64 %21, %22
  %24 = sdiv exact i64 %23, 8
  %25 = load i64, i64* %2, align 8, !tbaa !13
  %26 = icmp uge i64 %24, %25
  br i1 %26, label %27, label %117

; <label>:27                                      ; preds = %12
  %28 = load double*, double** %3, align 8
  %29 = load double, double* %28, align 8, !tbaa !7
  store double %29, double* %__x_copy, align 8, !tbaa !7
  %30 = call double* @_ZNSt6vectorIdSaIdEE3endEv(%"class.std::vector"* %9)
  %31 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %4, i32 0, i32 0
  store double* %30, double** %31
  %32 = call i64 @_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.5"* dereferenceable(8) %4, %"class.__gnu_cxx::__normal_iterator.5"* dereferenceable(8) %__position)
  store i64 %32, i64* %__elems_after, align 8, !tbaa !13
  %33 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %34 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %33, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %34, i32 0, i32 1
  %36 = load double*, double** %35, align 8, !tbaa !17
  store double* %36, double** %__old_finish, align 8, !tbaa !1
  %37 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %38 = load i64, i64* %2, align 8, !tbaa !13
  %39 = icmp ugt i64 %37, %38
  br i1 %39, label %40, label %79

; <label>:40                                      ; preds = %27
  %41 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %42 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %41, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %42, i32 0, i32 1
  %44 = load double*, double** %43, align 8, !tbaa !17
  %45 = load i64, i64* %2, align 8, !tbaa !13
  %46 = sub i64 0, %45
  %47 = getelementptr inbounds double, double* %44, i64 %46
  %48 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %49 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %48, i32 0, i32 0
  %50 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %49, i32 0, i32 1
  %51 = load double*, double** %50, align 8, !tbaa !17
  %52 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %53 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %52, i32 0, i32 0
  %54 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %53, i32 0, i32 1
  %55 = load double*, double** %54, align 8, !tbaa !17
  %56 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %57 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %56)
  %58 = call double* @_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_(double* %47, double* %51, double* %55, %"class.std::allocator"* dereferenceable(1) %57)
  %59 = load i64, i64* %2, align 8, !tbaa !13
  %60 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %61 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %60, i32 0, i32 0
  %62 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %61, i32 0, i32 1
  %63 = load double*, double** %62, align 8, !tbaa !17
  %64 = getelementptr inbounds double, double* %63, i64 %59
  store double* %64, double** %62, align 8, !tbaa !17
  %65 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
  %66 = load double*, double** %65, !tbaa !1
  %67 = load double*, double** %__old_finish, align 8, !tbaa !1
  %68 = load i64, i64* %2, align 8, !tbaa !13
  %69 = sub i64 0, %68
  %70 = getelementptr inbounds double, double* %67, i64 %69
  %71 = load double*, double** %__old_finish, align 8, !tbaa !1
  %72 = call double* @_ZSt13copy_backwardIPdS0_ET0_T_S2_S1_(double* %66, double* %70, double* %71)
  %73 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
  %74 = load double*, double** %73, !tbaa !1
  %75 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
  %76 = load double*, double** %75, !tbaa !1
  %77 = load i64, i64* %2, align 8, !tbaa !13
  %78 = getelementptr inbounds double, double* %76, i64 %77
  call void @_ZSt4fillIPddEvT_S1_RKT0_(double* %74, double* %78, double* dereferenceable(8) %__x_copy)
  br label %116

; <label>:79                                      ; preds = %27
  %80 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %81 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %80, i32 0, i32 0
  %82 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %81, i32 0, i32 1
  %83 = load double*, double** %82, align 8, !tbaa !17
  %84 = load i64, i64* %2, align 8, !tbaa !13
  %85 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %86 = sub i64 %84, %85
  %87 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %88 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %87)
  call void @_ZSt24__uninitialized_fill_n_aIPdmddEvT_T0_RKT1_RSaIT2_E(double* %83, i64 %86, double* dereferenceable(8) %__x_copy, %"class.std::allocator"* dereferenceable(1) %88)
  %89 = load i64, i64* %2, align 8, !tbaa !13
  %90 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %91 = sub i64 %89, %90
  %92 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %93 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %92, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %93, i32 0, i32 1
  %95 = load double*, double** %94, align 8, !tbaa !17
  %96 = getelementptr inbounds double, double* %95, i64 %91
  store double* %96, double** %94, align 8, !tbaa !17
  %97 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
  %98 = load double*, double** %97, !tbaa !1
  %99 = load double*, double** %__old_finish, align 8, !tbaa !1
  %100 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %101 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %100, i32 0, i32 0
  %102 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %101, i32 0, i32 1
  %103 = load double*, double** %102, align 8, !tbaa !17
  %104 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %105 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %104)
  %106 = call double* @_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_(double* %98, double* %99, double* %103, %"class.std::allocator"* dereferenceable(1) %105)
  %107 = load i64, i64* %__elems_after, align 8, !tbaa !13
  %108 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %109 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %108, i32 0, i32 0
  %110 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %109, i32 0, i32 1
  %111 = load double*, double** %110, align 8, !tbaa !17
  %112 = getelementptr inbounds double, double* %111, i64 %107
  store double* %112, double** %110, align 8, !tbaa !17
  %113 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
  %114 = load double*, double** %113, !tbaa !1
  %115 = load double*, double** %__old_finish, align 8, !tbaa !1
  call void @_ZSt4fillIPddEvT_S1_RKT0_(double* %114, double* %115, double* dereferenceable(8) %__x_copy)
  br label %116

; <label>:116                                     ; preds = %79, %40
  br label %246

; <label>:117                                     ; preds = %12
  %118 = load i64, i64* %2, align 8, !tbaa !13
  %119 = call i64 @_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc(%"class.std::vector"* %9, i64 %118, i8* getelementptr inbounds ([23 x i8]* @.str9, i32 0, i32 0))
  store i64 %119, i64* %__len, align 8, !tbaa !13
  %120 = call double* @_ZNSt6vectorIdSaIdEE5beginEv(%"class.std::vector"* %9)
  %121 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %5, i32 0, i32 0
  store double* %120, double** %121
  %122 = call i64 @_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.5"* dereferenceable(8) %__position, %"class.__gnu_cxx::__normal_iterator.5"* dereferenceable(8) %5)
  store i64 %122, i64* %__elems_before, align 8, !tbaa !13
  %123 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %124 = load i64, i64* %__len, align 8, !tbaa !13
  %125 = call double* @_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm(%"struct.std::_Vector_base"* %123, i64 %124)
  store double* %125, double** %__new_start, align 8, !tbaa !1
  %126 = load double*, double** %__new_start, align 8, !tbaa !1
  store double* %126, double** %__new_finish, align 8, !tbaa !1
  %127 = load double*, double** %__new_start, align 8, !tbaa !1
  %128 = load i64, i64* %__elems_before, align 8, !tbaa !13
  %129 = getelementptr inbounds double, double* %127, i64 %128
  %130 = load i64, i64* %2, align 8, !tbaa !13
  %131 = load double*, double** %3, align 8
  %132 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %133 = invoke dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %132)
          to label %134 unwind label %165

; <label>:134                                     ; preds = %117
  invoke void @_ZSt24__uninitialized_fill_n_aIPdmddEvT_T0_RKT1_RSaIT2_E(double* %129, i64 %130, double* dereferenceable(8) %131, %"class.std::allocator"* dereferenceable(1) %133)
          to label %135 unwind label %165

; <label>:135                                     ; preds = %134
  store double* null, double** %__new_finish, align 8, !tbaa !1
  %136 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %137 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %136, i32 0, i32 0
  %138 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %137, i32 0, i32 0
  %139 = load double*, double** %138, align 8, !tbaa !14
  %140 = invoke dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
          to label %141 unwind label %165

; <label>:141                                     ; preds = %135
  %142 = load double*, double** %140, !tbaa !1
  %143 = load double*, double** %__new_start, align 8, !tbaa !1
  %144 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %145 = invoke dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %144)
          to label %146 unwind label %165

; <label>:146                                     ; preds = %141
  %147 = invoke double* @_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_(double* %139, double* %142, double* %143, %"class.std::allocator"* dereferenceable(1) %145)
          to label %148 unwind label %165

; <label>:148                                     ; preds = %146
  store double* %147, double** %__new_finish, align 8, !tbaa !1
  %149 = load i64, i64* %2, align 8, !tbaa !13
  %150 = load double*, double** %__new_finish, align 8, !tbaa !1
  %151 = getelementptr inbounds double, double* %150, i64 %149
  store double* %151, double** %__new_finish, align 8, !tbaa !1
  %152 = invoke dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %__position)
          to label %153 unwind label %165

; <label>:153                                     ; preds = %148
  %154 = load double*, double** %152, !tbaa !1
  %155 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %156 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %155, i32 0, i32 0
  %157 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %156, i32 0, i32 1
  %158 = load double*, double** %157, align 8, !tbaa !17
  %159 = load double*, double** %__new_finish, align 8, !tbaa !1
  %160 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %161 = invoke dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %160)
          to label %162 unwind label %165

; <label>:162                                     ; preds = %153
  %163 = invoke double* @_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_(double* %154, double* %158, double* %159, %"class.std::allocator"* dereferenceable(1) %161)
          to label %164 unwind label %165

; <label>:164                                     ; preds = %162
  store double* %163, double** %__new_finish, align 8, !tbaa !1
  br label %204

; <label>:165                                     ; preds = %162, %153, %148, %146, %141, %135, %134, %117
  %166 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %167 = extractvalue { i8*, i32 } %166, 0
  store i8* %167, i8** %6
  %168 = extractvalue { i8*, i32 } %166, 1
  store i32 %168, i32* %7
  br label %169

; <label>:169                                     ; preds = %165
  %170 = load i8*, i8** %6
  %171 = call i8* @__cxa_begin_catch(i8* %170) #1
  %172 = load double*, double** %__new_finish, align 8, !tbaa !1
  %173 = icmp ne double* %172, null
  br i1 %173, label %191, label %174

; <label>:174                                     ; preds = %169
  %175 = load double*, double** %__new_start, align 8, !tbaa !1
  %176 = load i64, i64* %__elems_before, align 8, !tbaa !13
  %177 = getelementptr inbounds double, double* %175, i64 %176
  %178 = load double*, double** %__new_start, align 8, !tbaa !1
  %179 = load i64, i64* %__elems_before, align 8, !tbaa !13
  %180 = getelementptr inbounds double, double* %178, i64 %179
  %181 = load i64, i64* %2, align 8, !tbaa !13
  %182 = getelementptr inbounds double, double* %180, i64 %181
  %183 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %184 = invoke dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %183)
          to label %185 unwind label %187

; <label>:185                                     ; preds = %174
  invoke void @_ZSt8_DestroyIPddEvT_S1_RSaIT0_E(double* %177, double* %182, %"class.std::allocator"* dereferenceable(1) %184)
          to label %186 unwind label %187

; <label>:186                                     ; preds = %185
  br label %198

; <label>:187                                     ; preds = %202, %198, %196, %191, %185, %174
  %188 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %189 = extractvalue { i8*, i32 } %188, 0
  store i8* %189, i8** %6
  %190 = extractvalue { i8*, i32 } %188, 1
  store i32 %190, i32* %7
  invoke void @__cxa_end_catch()
          to label %203 unwind label %253

; <label>:191                                     ; preds = %169
  %192 = load double*, double** %__new_start, align 8, !tbaa !1
  %193 = load double*, double** %__new_finish, align 8, !tbaa !1
  %194 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %195 = invoke dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %194)
          to label %196 unwind label %187

; <label>:196                                     ; preds = %191
  invoke void @_ZSt8_DestroyIPddEvT_S1_RSaIT0_E(double* %192, double* %193, %"class.std::allocator"* dereferenceable(1) %195)
          to label %197 unwind label %187

; <label>:197                                     ; preds = %196
  br label %198

; <label>:198                                     ; preds = %197, %186
  %199 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %200 = load double*, double** %__new_start, align 8, !tbaa !1
  %201 = load i64, i64* %__len, align 8, !tbaa !13
  invoke void @_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm(%"struct.std::_Vector_base"* %199, double* %200, i64 %201)
          to label %202 unwind label %187

; <label>:202                                     ; preds = %198
  invoke void @__cxa_rethrow() #17
          to label %256 unwind label %187

; <label>:203                                     ; preds = %187
  br label %248

; <label>:204                                     ; preds = %164
  %205 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %206 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %205, i32 0, i32 0
  %207 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %206, i32 0, i32 0
  %208 = load double*, double** %207, align 8, !tbaa !14
  %209 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %210 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %209, i32 0, i32 0
  %211 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %210, i32 0, i32 1
  %212 = load double*, double** %211, align 8, !tbaa !17
  %213 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %214 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %213)
  call void @_ZSt8_DestroyIPddEvT_S1_RSaIT0_E(double* %208, double* %212, %"class.std::allocator"* dereferenceable(1) %214)
  %215 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %216 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %217 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %216, i32 0, i32 0
  %218 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %217, i32 0, i32 0
  %219 = load double*, double** %218, align 8, !tbaa !14
  %220 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %221 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %220, i32 0, i32 0
  %222 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %221, i32 0, i32 2
  %223 = load double*, double** %222, align 8, !tbaa !29
  %224 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %225 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %224, i32 0, i32 0
  %226 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %225, i32 0, i32 0
  %227 = load double*, double** %226, align 8, !tbaa !14
  %228 = ptrtoint double* %223 to i64
  %229 = ptrtoint double* %227 to i64
  %230 = sub i64 %228, %229
  %231 = sdiv exact i64 %230, 8
  call void @_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm(%"struct.std::_Vector_base"* %215, double* %219, i64 %231)
  %232 = load double*, double** %__new_start, align 8, !tbaa !1
  %233 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %234 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %233, i32 0, i32 0
  %235 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %234, i32 0, i32 0
  store double* %232, double** %235, align 8, !tbaa !14
  %236 = load double*, double** %__new_finish, align 8, !tbaa !1
  %237 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %238 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %237, i32 0, i32 0
  %239 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %238, i32 0, i32 1
  store double* %236, double** %239, align 8, !tbaa !17
  %240 = load double*, double** %__new_start, align 8, !tbaa !1
  %241 = load i64, i64* %__len, align 8, !tbaa !13
  %242 = getelementptr inbounds double, double* %240, i64 %241
  %243 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %244 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %243, i32 0, i32 0
  %245 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %244, i32 0, i32 2
  store double* %242, double** %245, align 8, !tbaa !29
  br label %246

; <label>:246                                     ; preds = %204, %116
  br label %247

; <label>:247                                     ; preds = %246, %0
  ret void

; <label>:248                                     ; preds = %203
  %249 = load i8*, i8** %6
  %250 = load i32, i32* %7
  %251 = insertvalue { i8*, i32 } undef, i8* %249, 0
  %252 = insertvalue { i8*, i32 } %251, i32 %250, 1
  resume { i8*, i32 } %252

; <label>:253                                     ; preds = %187
  %254 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %255 = extractvalue { i8*, i32 } %254, 0
  call void @__clang_call_terminate(i8* %255) #14
  unreachable

; <label>:256                                     ; preds = %202
  unreachable
}

; Function Attrs: inlinehint uwtable
define linkonce_odr i64 @_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.5"* dereferenceable(8) %__lhs, %"class.__gnu_cxx::__normal_iterator.5"* dereferenceable(8) %__rhs) #0 comdat {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator.5"*, align 8
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.5"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.5"* %__lhs, %"class.__gnu_cxx::__normal_iterator.5"** %1, align 8, !tbaa !28
  store %"class.__gnu_cxx::__normal_iterator.5"* %__rhs, %"class.__gnu_cxx::__normal_iterator.5"** %2, align 8, !tbaa !28
  %3 = load %"class.__gnu_cxx::__normal_iterator.5"*, %"class.__gnu_cxx::__normal_iterator.5"** %1, align 8
  %4 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %3)
  %5 = load double*, double** %4, !tbaa !1
  %6 = load %"class.__gnu_cxx::__normal_iterator.5"*, %"class.__gnu_cxx::__normal_iterator.5"** %2, align 8
  %7 = call dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %6)
  %8 = load double*, double** %7, !tbaa !1
  %9 = ptrtoint double* %5 to i64
  %10 = ptrtoint double* %8 to i64
  %11 = sub i64 %9, %10
  %12 = sdiv exact i64 %11, 8
  ret i64 %12
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_(double* %__first, double* %__last, double* %__result, %"class.std::allocator"* dereferenceable(1) %__alloc) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca %"class.std::allocator"*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  store %"class.std::allocator"* %__alloc, %"class.std::allocator"** %4, align 8, !tbaa !28
  %5 = load double*, double** %1, align 8, !tbaa !1
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = load double*, double** %3, align 8, !tbaa !1
  %8 = load %"class.std::allocator"*, %"class.std::allocator"** %4, align 8
  %9 = call double* @_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E(double* %5, double* %6, double* %7, %"class.std::allocator"* dereferenceable(1) %8)
  ret double* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt13copy_backwardIPdS0_ET0_T_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = call double* @_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_(double* %4)
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = call double* @_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_(double* %6)
  %8 = load double*, double** %3, align 8, !tbaa !1
  %9 = call double* @_ZSt23__copy_move_backward_a2ILb0EPdS0_ET1_T0_S2_S1_(double* %5, double* %7, double* %8)
  ret double* %9
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double** @_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.5"* %this) #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator.5"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.5"* %this, %"class.__gnu_cxx::__normal_iterator.5"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::__normal_iterator.5"*, %"class.__gnu_cxx::__normal_iterator.5"** %1
  %3 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %2, i32 0, i32 0
  ret double** %3
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt4fillIPddEvT_S1_RKT0_(double* %__first, double* %__last, double* dereferenceable(8) %__value) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__value, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %4)
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %6)
  %8 = load double*, double** %3, align 8
  call void @_ZSt8__fill_aIPddEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(double* %5, double* %7, double* dereferenceable(8) %8)
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt24__uninitialized_fill_n_aIPdmddEvT_T0_RKT1_RSaIT2_E(double* %__first, i64 %__n, double* dereferenceable(8) %__x, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %2 = alloca double*, align 8
  %3 = alloca i64, align 8
  %4 = alloca double*, align 8
  %5 = alloca %"class.std::allocator"*, align 8
  store double* %__first, double** %2, align 8, !tbaa !1
  store i64 %__n, i64* %3, align 8, !tbaa !13
  store double* %__x, double** %4, align 8, !tbaa !28
  store %"class.std::allocator"* %0, %"class.std::allocator"** %5, align 8, !tbaa !28
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = load i64, i64* %3, align 8, !tbaa !13
  %8 = load double*, double** %4, align 8
  call void @_ZSt20uninitialized_fill_nIPdmdEvT_T0_RKT1_(double* %6, i64 %7, double* dereferenceable(8) %8)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr i64 @_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc(%"class.std::vector"* %this, i64 %__n, i8* %__s) #2 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %__len = alloca i64, align 8
  %4 = alloca i64, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store i8* %__s, i8** %3, align 8, !tbaa !1
  %5 = load %"class.std::vector"*, %"class.std::vector"** %1
  %6 = call i64 @_ZNKSt6vectorIdSaIdEE8max_sizeEv(%"class.std::vector"* %5)
  %7 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  %8 = sub i64 %6, %7
  %9 = load i64, i64* %2, align 8, !tbaa !13
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = load i8*, i8** %3, align 8, !tbaa !1
  call void @_ZSt20__throw_length_errorPKc(i8* %12) #17
  unreachable

; <label>:13                                      ; preds = %0
  %14 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  %15 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  store i64 %15, i64* %4, !tbaa !13
  %16 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %4, i64* dereferenceable(8) %2)
  %17 = load i64, i64* %16, !tbaa !13
  %18 = add i64 %14, %17
  store i64 %18, i64* %__len, align 8, !tbaa !13
  %19 = load i64, i64* %__len, align 8, !tbaa !13
  %20 = call i64 @_ZNKSt6vectorIdSaIdEE4sizeEv(%"class.std::vector"* %5)
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %26, label %22

; <label>:22                                      ; preds = %13
  %23 = load i64, i64* %__len, align 8, !tbaa !13
  %24 = call i64 @_ZNKSt6vectorIdSaIdEE8max_sizeEv(%"class.std::vector"* %5)
  %25 = icmp ugt i64 %23, %24
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %22, %13
  %27 = call i64 @_ZNKSt6vectorIdSaIdEE8max_sizeEv(%"class.std::vector"* %5)
  br label %30

; <label>:28                                      ; preds = %22
  %29 = load i64, i64* %__len, align 8, !tbaa !13
  br label %30

; <label>:30                                      ; preds = %28, %26
  %31 = phi i64 [ %27, %26 ], [ %29, %28 ]
  ret i64 %31
}

; Function Attrs: uwtable
define linkonce_odr double* @_ZNSt6vectorIdSaIdEE5beginEv(%"class.std::vector"* %this) #2 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator.5", align 8
  %2 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %2, align 8, !tbaa !1
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %5, i32 0, i32 0
  call void @_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.5"* %1, double** dereferenceable(8) %6)
  %7 = getelementptr %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %1, i32 0, i32 0
  %8 = load double*, double** %7
  ret double* %8
}

; Function Attrs: uwtable
define linkonce_odr double* @_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEm(%"struct.std::_Vector_base"* %this, i64 %__n) #2 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base"*, align 8
  %2 = alloca i64, align 8
  store %"struct.std::_Vector_base"* %this, %"struct.std::_Vector_base"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  %3 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %1
  %4 = load i64, i64* %2, align 8, !tbaa !13
  %5 = icmp ne i64 %4, 0
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %3, i32 0, i32 0
  %8 = bitcast %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %7 to %"class.__gnu_cxx::new_allocator"*
  %9 = load i64, i64* %2, align 8, !tbaa !13
  %10 = call double* @_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"* %8, i64 %9, i8* null)
  br label %12

; <label>:11                                      ; preds = %0
  br label %12

; <label>:12                                      ; preds = %11, %6
  %13 = phi double* [ %10, %6 ], [ null, %11 ]
  ret double* %13
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_(double* %__first, double* %__last, double* %__result, %"class.std::allocator"* dereferenceable(1) %__alloc) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca %"class.std::allocator"*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  store %"class.std::allocator"* %__alloc, %"class.std::allocator"** %4, align 8, !tbaa !28
  %5 = load double*, double** %1, align 8, !tbaa !1
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = load double*, double** %3, align 8, !tbaa !1
  %8 = load %"class.std::allocator"*, %"class.std::allocator"** %4, align 8
  %9 = call double* @_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E(double* %5, double* %6, double* %7, %"class.std::allocator"* dereferenceable(1) %8)
  ret double* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E(double* %__first, double* %__last, double* %__result, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca %"class.std::allocator"*, align 8
  store double* %__first, double** %2, align 8, !tbaa !1
  store double* %__last, double** %3, align 8, !tbaa !1
  store double* %__result, double** %4, align 8, !tbaa !1
  store %"class.std::allocator"* %0, %"class.std::allocator"** %5, align 8, !tbaa !28
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = load double*, double** %3, align 8, !tbaa !1
  %8 = load double*, double** %4, align 8, !tbaa !1
  %9 = call double* @_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_(double* %6, double* %7, double* %8)
  ret double* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = load double*, double** %2, align 8, !tbaa !1
  %6 = load double*, double** %3, align 8, !tbaa !1
  %7 = call double* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_(double* %4, double* %5, double* %6)
  ret double* %7
}

; Function Attrs: uwtable
define linkonce_odr double* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_(double* %__first, double* %__last, double* %__result) #2 comdat align 2 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = load double*, double** %2, align 8, !tbaa !1
  %6 = load double*, double** %3, align 8, !tbaa !1
  %7 = call double* @_ZSt4copyIPdS0_ET0_T_S2_S1_(double* %4, double* %5, double* %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt4copyIPdS0_ET0_T_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = call double* @_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_(double* %4)
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = call double* @_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_(double* %6)
  %8 = load double*, double** %3, align 8, !tbaa !1
  %9 = call double* @_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_(double* %5, double* %7, double* %8)
  ret double* %9
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %4)
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %6)
  %8 = load double*, double** %3, align 8, !tbaa !1
  %9 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %8)
  %10 = call double* @_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_(double* %5, double* %7, double* %9)
  ret double* %10
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr double* @_ZSt12__miter_baseIPdENSt11_Miter_baseIT_E13iterator_typeES2_(double* %__it) #6 comdat {
  %1 = alloca double*, align 8
  store double* %__it, double** %1, align 8, !tbaa !1
  %2 = load double*, double** %1, align 8, !tbaa !1
  %3 = call double* @_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_(double* %2)
  ret double* %3
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %__simple = alloca i8, align 1
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  store i8 1, i8* %__simple, align 1, !tbaa !32
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = load double*, double** %2, align 8, !tbaa !1
  %6 = load double*, double** %3, align 8, !tbaa !1
  %7 = call double* @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_(double* %4, double* %5, double* %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %__it) #0 comdat {
  %1 = alloca double*, align 8
  store double* %__it, double** %1, align 8, !tbaa !1
  %2 = load double*, double** %1, align 8, !tbaa !1
  %3 = call double* @_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_(double* %2)
  ret double* %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr double* @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_(double* %__first, double* %__last, double* %__result) #4 comdat align 2 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %_Num = alloca i64, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %2, align 8, !tbaa !1
  %5 = load double*, double** %1, align 8, !tbaa !1
  %6 = ptrtoint double* %4 to i64
  %7 = ptrtoint double* %5 to i64
  %8 = sub i64 %6, %7
  %9 = sdiv exact i64 %8, 8
  store i64 %9, i64* %_Num, align 8, !tbaa !13
  %10 = load i64, i64* %_Num, align 8, !tbaa !13
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %19

; <label>:12                                      ; preds = %0
  %13 = load double*, double** %3, align 8, !tbaa !1
  %14 = bitcast double* %13 to i8*
  %15 = load double*, double** %1, align 8, !tbaa !1
  %16 = bitcast double* %15 to i8*
  %17 = load i64, i64* %_Num, align 8, !tbaa !13
  %18 = mul i64 8, %17
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %14, i8* %16, i64 %18, i32 8, i1 false)
  br label %19

; <label>:19                                      ; preds = %12, %0
  %20 = load double*, double** %3, align 8, !tbaa !1
  %21 = load i64, i64* %_Num, align 8, !tbaa !13
  %22 = getelementptr inbounds double, double* %20, i64 %21
  ret double* %22
}

; Function Attrs: nounwind uwtable
define linkonce_odr double* @_ZNSt10_Iter_baseIPdLb0EE7_S_baseES0_(double* %__it) #4 comdat align 2 {
  %1 = alloca double*, align 8
  store double* %__it, double** %1, align 8, !tbaa !1
  %2 = load double*, double** %1, align 8, !tbaa !1
  ret double* %2
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt23__copy_move_backward_a2ILb0EPdS0_ET1_T0_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %4)
  %6 = load double*, double** %2, align 8, !tbaa !1
  %7 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %6)
  %8 = load double*, double** %3, align 8, !tbaa !1
  %9 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %8)
  %10 = call double* @_ZSt22__copy_move_backward_aILb0EPdS0_ET1_T0_S2_S1_(double* %5, double* %7, double* %9)
  ret double* %10
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt22__copy_move_backward_aILb0EPdS0_ET1_T0_S2_S1_(double* %__first, double* %__last, double* %__result) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %__simple = alloca i8, align 1
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  store i8 1, i8* %__simple, align 1, !tbaa !32
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = load double*, double** %2, align 8, !tbaa !1
  %6 = load double*, double** %3, align 8, !tbaa !1
  %7 = call double* @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_(double* %4, double* %5, double* %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr double* @_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_(double* %__first, double* %__last, double* %__result) #4 comdat align 2 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %_Num = alloca i64, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__result, double** %3, align 8, !tbaa !1
  %4 = load double*, double** %2, align 8, !tbaa !1
  %5 = load double*, double** %1, align 8, !tbaa !1
  %6 = ptrtoint double* %4 to i64
  %7 = ptrtoint double* %5 to i64
  %8 = sub i64 %6, %7
  %9 = sdiv exact i64 %8, 8
  store i64 %9, i64* %_Num, align 8, !tbaa !13
  %10 = load i64, i64* %_Num, align 8, !tbaa !13
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %22

; <label>:12                                      ; preds = %0
  %13 = load double*, double** %3, align 8, !tbaa !1
  %14 = load i64, i64* %_Num, align 8, !tbaa !13
  %15 = sub i64 0, %14
  %16 = getelementptr inbounds double, double* %13, i64 %15
  %17 = bitcast double* %16 to i8*
  %18 = load double*, double** %1, align 8, !tbaa !1
  %19 = bitcast double* %18 to i8*
  %20 = load i64, i64* %_Num, align 8, !tbaa !13
  %21 = mul i64 8, %20
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %17, i8* %19, i64 %21, i32 8, i1 false)
  br label %22

; <label>:22                                      ; preds = %12, %0
  %23 = load double*, double** %3, align 8, !tbaa !1
  %24 = load i64, i64* %_Num, align 8, !tbaa !13
  %25 = sub i64 0, %24
  %26 = getelementptr inbounds double, double* %23, i64 %25
  ret double* %26
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIPddEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(double* %__first, double* %__last, double* dereferenceable(8) %__value) #6 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %__tmp = alloca double, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store double* %__last, double** %2, align 8, !tbaa !1
  store double* %__value, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %3, align 8
  %5 = load double, double* %4, align 8, !tbaa !7
  store double %5, double* %__tmp, align 8, !tbaa !7
  br label %6

; <label>:6                                       ; preds = %13, %0
  %7 = load double*, double** %1, align 8, !tbaa !1
  %8 = load double*, double** %2, align 8, !tbaa !1
  %9 = icmp ne double* %7, %8
  br i1 %9, label %10, label %16

; <label>:10                                      ; preds = %6
  %11 = load double, double* %__tmp, align 8, !tbaa !7
  %12 = load double*, double** %1, align 8, !tbaa !1
  store double %11, double* %12, align 8, !tbaa !7
  br label %13

; <label>:13                                      ; preds = %10
  %14 = load double*, double** %1, align 8, !tbaa !1
  %15 = getelementptr inbounds double, double* %14, i32 1
  store double* %15, double** %1, align 8, !tbaa !1
  br label %6

; <label>:16                                      ; preds = %6
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr void @_ZSt20uninitialized_fill_nIPdmdEvT_T0_RKT1_(double* %__first, i64 %__n, double* dereferenceable(8) %__x) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store double* %__x, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = load i64, i64* %2, align 8, !tbaa !13
  %6 = load double*, double** %3, align 8
  call void @_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdmdEEvT_T0_RKT1_(double* %4, i64 %5, double* dereferenceable(8) %6)
  ret void
}

; Function Attrs: uwtable
define linkonce_odr void @_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdmdEEvT_T0_RKT1_(double* %__first, i64 %__n, double* dereferenceable(8) %__x) #2 comdat align 2 {
  %1 = alloca double*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store double* %__x, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = load i64, i64* %2, align 8, !tbaa !13
  %6 = load double*, double** %3, align 8
  %7 = call double* @_ZSt6fill_nIPdmdET_S1_T0_RKT1_(double* %4, i64 %5, double* dereferenceable(8) %6)
  ret void
}

; Function Attrs: inlinehint uwtable
define linkonce_odr double* @_ZSt6fill_nIPdmdET_S1_T0_RKT1_(double* %__first, i64 %__n, double* dereferenceable(8) %__value) #0 comdat {
  %1 = alloca double*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double*, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store double* %__value, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %1, align 8, !tbaa !1
  %5 = call double* @_ZSt12__niter_baseIPdENSt11_Niter_baseIT_E13iterator_typeES2_(double* %4)
  %6 = load i64, i64* %2, align 8, !tbaa !13
  %7 = load double*, double** %3, align 8
  %8 = call double* @_ZSt10__fill_n_aIPdmdEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(double* %5, i64 %6, double* dereferenceable(8) %7)
  ret double* %8
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr double* @_ZSt10__fill_n_aIPdmdEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(double* %__first, i64 %__n, double* dereferenceable(8) %__value) #6 comdat {
  %1 = alloca double*, align 8
  %2 = alloca i64, align 8
  %3 = alloca double*, align 8
  %__tmp = alloca double, align 8
  %__niter = alloca i64, align 8
  store double* %__first, double** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  store double* %__value, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %3, align 8
  %5 = load double, double* %4, align 8, !tbaa !7
  store double %5, double* %__tmp, align 8, !tbaa !7
  %6 = load i64, i64* %2, align 8, !tbaa !13
  store i64 %6, i64* %__niter, align 8, !tbaa !13
  br label %7

; <label>:7                                       ; preds = %13, %0
  %8 = load i64, i64* %__niter, align 8, !tbaa !13
  %9 = icmp ugt i64 %8, 0
  br i1 %9, label %10, label %18

; <label>:10                                      ; preds = %7
  %11 = load double, double* %__tmp, align 8, !tbaa !7
  %12 = load double*, double** %1, align 8, !tbaa !1
  store double %11, double* %12, align 8, !tbaa !7
  br label %13

; <label>:13                                      ; preds = %10
  %14 = load i64, i64* %__niter, align 8, !tbaa !13
  %15 = add i64 %14, -1
  store i64 %15, i64* %__niter, align 8, !tbaa !13
  %16 = load double*, double** %1, align 8, !tbaa !1
  %17 = getelementptr inbounds double, double* %16, i32 1
  store double* %17, double** %1, align 8, !tbaa !1
  br label %7

; <label>:18                                      ; preds = %7
  %19 = load double*, double** %1, align 8, !tbaa !1
  ret double* %19
}

; Function Attrs: uwtable
define linkonce_odr i64 @_ZNKSt6vectorIdSaIdEE8max_sizeEv(%"class.std::vector"* %this) #2 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  %2 = load %"class.std::vector"*, %"class.std::vector"** %1
  %3 = bitcast %"class.std::vector"* %2 to %"struct.std::_Vector_base"*
  %4 = call dereferenceable(1) %"class.std::allocator"* @_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %3)
  %5 = call i64 @_ZN9__gnu_cxx14__alloc_traitsISaIdEE8max_sizeERKS1_(%"class.std::allocator"* dereferenceable(1) %4)
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define linkonce_odr i64 @_ZN9__gnu_cxx14__alloc_traitsISaIdEE8max_sizeERKS1_(%"class.std::allocator"* dereferenceable(1) %__a) #4 comdat align 2 {
  %1 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %__a, %"class.std::allocator"** %1, align 8, !tbaa !28
  %2 = load %"class.std::allocator"*, %"class.std::allocator"** %1, align 8
  %3 = bitcast %"class.std::allocator"* %2 to %"class.__gnu_cxx::new_allocator"*
  %4 = call i64 @_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %3) #1
  ret i64 %4
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator"* @_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %this) #4 comdat align 2 {
  %1 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %this, %"struct.std::_Vector_base"** %1, align 8, !tbaa !1
  %2 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %1
  %3 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %2, i32 0, i32 0
  %4 = bitcast %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %3 to %"class.std::allocator"*
  ret %"class.std::allocator"* %4
}

; Function Attrs: nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %this) #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %this, %"class.__gnu_cxx::new_allocator"** %1, align 8, !tbaa !1
  %2 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %1
  ret i64 2305843009213693951
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.5"* %this, double** dereferenceable(8) %__i) unnamed_addr #4 comdat align 2 {
  %1 = alloca %"class.__gnu_cxx::__normal_iterator.5"*, align 8
  %2 = alloca double**, align 8
  store %"class.__gnu_cxx::__normal_iterator.5"* %this, %"class.__gnu_cxx::__normal_iterator.5"** %1, align 8, !tbaa !1
  store double** %__i, double*** %2, align 8, !tbaa !28
  %3 = load %"class.__gnu_cxx::__normal_iterator.5"*, %"class.__gnu_cxx::__normal_iterator.5"** %1
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.5", %"class.__gnu_cxx::__normal_iterator.5"* %3, i32 0, i32 0
  %5 = load double**, double*** %2, align 8
  %6 = load double*, double** %5, align 8, !tbaa !1
  store double* %6, double** %4, align 8, !tbaa !36
  ret void
}

; Function Attrs: uwtable
define linkonce_odr double* @_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"* %this, i64 %__n, i8*) #2 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator"* %this, %"class.__gnu_cxx::new_allocator"** %2, align 8, !tbaa !1
  store i64 %__n, i64* %3, align 8, !tbaa !13
  store i8* %0, i8** %4, align 8, !tbaa !1
  %5 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2
  %6 = load i64, i64* %3, align 8, !tbaa !13
  %7 = call i64 @_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %5) #1
  %8 = icmp ugt i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %1
  call void @_ZSt17__throw_bad_allocv() #17
  unreachable

; <label>:10                                      ; preds = %1
  %11 = load i64, i64* %3, align 8, !tbaa !13
  %12 = mul i64 %11, 8
  %13 = call noalias i8* @_Znwm(i64 %12)
  %14 = bitcast i8* %13 to double*
  ret double* %14
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %this, i64 %__n) #4 comdat align 2 {
  %1 = alloca %"class.std::vector"*, align 8
  %2 = alloca i64, align 8
  store %"class.std::vector"* %this, %"class.std::vector"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  %3 = load %"class.std::vector"*, %"class.std::vector"** %1
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl", %"struct.std::_Vector_base<double, std::allocator<double> >::_Vector_impl"* %5, i32 0, i32 0
  %7 = load double*, double** %6, align 8, !tbaa !14
  %8 = load i64, i64* %2, align 8, !tbaa !13
  %9 = getelementptr inbounds double, double* %7, i64 %8
  ret double* %9
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %this, i64 %__n) #4 comdat align 2 {
  %1 = alloca %"class.std::vector.0"*, align 8
  %2 = alloca i64, align 8
  store %"class.std::vector.0"* %this, %"class.std::vector.0"** %1, align 8, !tbaa !1
  store i64 %__n, i64* %2, align 8, !tbaa !13
  %3 = load %"class.std::vector.0"*, %"class.std::vector.0"** %1
  %4 = bitcast %"class.std::vector.0"* %3 to %"struct.std::_Vector_base.1"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base.1", %"struct.std::_Vector_base.1"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl", %"struct.std::_Vector_base<int, std::allocator<int> >::_Vector_impl"* %5, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !18
  %8 = load i64, i64* %2, align 8, !tbaa !13
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  ret i32* %9
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 16
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 17
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN6Domain18nodeElemCornerListEi(%struct.Domain* %this, i32 %i) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %i, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 18
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(4) i32* @_ZNSt6vectorIiSaIiEEixEm(%"class.std::vector.0"* %4, i64 %6)
  ret i32* %7
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #7

; Function Attrs: noreturn nounwind
declare void @exit(i32) #12

; Function Attrs: inlinehint nounwind uwtable
define internal double @_ZL14CalcElemVolumedddddddddddddddddddddddd(double %x0, double %x1, double %x2, double %x3, double %x4, double %x5, double %x6, double %x7, double %y0, double %y1, double %y2, double %y3, double %y4, double %y5, double %y6, double %y7, double %z0, double %z1, double %z2, double %z3, double %z4, double %z5, double %z6, double %z7) #6 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %twelveth = alloca double, align 8
  %dx61 = alloca double, align 8
  %dy61 = alloca double, align 8
  %dz61 = alloca double, align 8
  %dx70 = alloca double, align 8
  %dy70 = alloca double, align 8
  %dz70 = alloca double, align 8
  %dx63 = alloca double, align 8
  %dy63 = alloca double, align 8
  %dz63 = alloca double, align 8
  %dx20 = alloca double, align 8
  %dy20 = alloca double, align 8
  %dz20 = alloca double, align 8
  %dx50 = alloca double, align 8
  %dy50 = alloca double, align 8
  %dz50 = alloca double, align 8
  %dx64 = alloca double, align 8
  %dy64 = alloca double, align 8
  %dz64 = alloca double, align 8
  %dx31 = alloca double, align 8
  %dy31 = alloca double, align 8
  %dz31 = alloca double, align 8
  %dx72 = alloca double, align 8
  %dy72 = alloca double, align 8
  %dz72 = alloca double, align 8
  %dx43 = alloca double, align 8
  %dy43 = alloca double, align 8
  %dz43 = alloca double, align 8
  %dx57 = alloca double, align 8
  %dy57 = alloca double, align 8
  %dz57 = alloca double, align 8
  %dx14 = alloca double, align 8
  %dy14 = alloca double, align 8
  %dz14 = alloca double, align 8
  %dx25 = alloca double, align 8
  %dy25 = alloca double, align 8
  %dz25 = alloca double, align 8
  %volume = alloca double, align 8
  store double %x0, double* %1, align 8, !tbaa !7
  store double %x1, double* %2, align 8, !tbaa !7
  store double %x2, double* %3, align 8, !tbaa !7
  store double %x3, double* %4, align 8, !tbaa !7
  store double %x4, double* %5, align 8, !tbaa !7
  store double %x5, double* %6, align 8, !tbaa !7
  store double %x6, double* %7, align 8, !tbaa !7
  store double %x7, double* %8, align 8, !tbaa !7
  store double %y0, double* %9, align 8, !tbaa !7
  store double %y1, double* %10, align 8, !tbaa !7
  store double %y2, double* %11, align 8, !tbaa !7
  store double %y3, double* %12, align 8, !tbaa !7
  store double %y4, double* %13, align 8, !tbaa !7
  store double %y5, double* %14, align 8, !tbaa !7
  store double %y6, double* %15, align 8, !tbaa !7
  store double %y7, double* %16, align 8, !tbaa !7
  store double %z0, double* %17, align 8, !tbaa !7
  store double %z1, double* %18, align 8, !tbaa !7
  store double %z2, double* %19, align 8, !tbaa !7
  store double %z3, double* %20, align 8, !tbaa !7
  store double %z4, double* %21, align 8, !tbaa !7
  store double %z5, double* %22, align 8, !tbaa !7
  store double %z6, double* %23, align 8, !tbaa !7
  store double %z7, double* %24, align 8, !tbaa !7
  store double 0x3FB5555555555555, double* %twelveth, align 8, !tbaa !7
  %25 = load double, double* %7, align 8, !tbaa !7
  %26 = load double, double* %2, align 8, !tbaa !7
  %27 = fsub double %25, %26
  store double %27, double* %dx61, align 8, !tbaa !7
  %28 = load double, double* %15, align 8, !tbaa !7
  %29 = load double, double* %10, align 8, !tbaa !7
  %30 = fsub double %28, %29
  store double %30, double* %dy61, align 8, !tbaa !7
  %31 = load double, double* %23, align 8, !tbaa !7
  %32 = load double, double* %18, align 8, !tbaa !7
  %33 = fsub double %31, %32
  store double %33, double* %dz61, align 8, !tbaa !7
  %34 = load double, double* %8, align 8, !tbaa !7
  %35 = load double, double* %1, align 8, !tbaa !7
  %36 = fsub double %34, %35
  store double %36, double* %dx70, align 8, !tbaa !7
  %37 = load double, double* %16, align 8, !tbaa !7
  %38 = load double, double* %9, align 8, !tbaa !7
  %39 = fsub double %37, %38
  store double %39, double* %dy70, align 8, !tbaa !7
  %40 = load double, double* %24, align 8, !tbaa !7
  %41 = load double, double* %17, align 8, !tbaa !7
  %42 = fsub double %40, %41
  store double %42, double* %dz70, align 8, !tbaa !7
  %43 = load double, double* %7, align 8, !tbaa !7
  %44 = load double, double* %4, align 8, !tbaa !7
  %45 = fsub double %43, %44
  store double %45, double* %dx63, align 8, !tbaa !7
  %46 = load double, double* %15, align 8, !tbaa !7
  %47 = load double, double* %12, align 8, !tbaa !7
  %48 = fsub double %46, %47
  store double %48, double* %dy63, align 8, !tbaa !7
  %49 = load double, double* %23, align 8, !tbaa !7
  %50 = load double, double* %20, align 8, !tbaa !7
  %51 = fsub double %49, %50
  store double %51, double* %dz63, align 8, !tbaa !7
  %52 = load double, double* %3, align 8, !tbaa !7
  %53 = load double, double* %1, align 8, !tbaa !7
  %54 = fsub double %52, %53
  store double %54, double* %dx20, align 8, !tbaa !7
  %55 = load double, double* %11, align 8, !tbaa !7
  %56 = load double, double* %9, align 8, !tbaa !7
  %57 = fsub double %55, %56
  store double %57, double* %dy20, align 8, !tbaa !7
  %58 = load double, double* %19, align 8, !tbaa !7
  %59 = load double, double* %17, align 8, !tbaa !7
  %60 = fsub double %58, %59
  store double %60, double* %dz20, align 8, !tbaa !7
  %61 = load double, double* %6, align 8, !tbaa !7
  %62 = load double, double* %1, align 8, !tbaa !7
  %63 = fsub double %61, %62
  store double %63, double* %dx50, align 8, !tbaa !7
  %64 = load double, double* %14, align 8, !tbaa !7
  %65 = load double, double* %9, align 8, !tbaa !7
  %66 = fsub double %64, %65
  store double %66, double* %dy50, align 8, !tbaa !7
  %67 = load double, double* %22, align 8, !tbaa !7
  %68 = load double, double* %17, align 8, !tbaa !7
  %69 = fsub double %67, %68
  store double %69, double* %dz50, align 8, !tbaa !7
  %70 = load double, double* %7, align 8, !tbaa !7
  %71 = load double, double* %5, align 8, !tbaa !7
  %72 = fsub double %70, %71
  store double %72, double* %dx64, align 8, !tbaa !7
  %73 = load double, double* %15, align 8, !tbaa !7
  %74 = load double, double* %13, align 8, !tbaa !7
  %75 = fsub double %73, %74
  store double %75, double* %dy64, align 8, !tbaa !7
  %76 = load double, double* %23, align 8, !tbaa !7
  %77 = load double, double* %21, align 8, !tbaa !7
  %78 = fsub double %76, %77
  store double %78, double* %dz64, align 8, !tbaa !7
  %79 = load double, double* %4, align 8, !tbaa !7
  %80 = load double, double* %2, align 8, !tbaa !7
  %81 = fsub double %79, %80
  store double %81, double* %dx31, align 8, !tbaa !7
  %82 = load double, double* %12, align 8, !tbaa !7
  %83 = load double, double* %10, align 8, !tbaa !7
  %84 = fsub double %82, %83
  store double %84, double* %dy31, align 8, !tbaa !7
  %85 = load double, double* %20, align 8, !tbaa !7
  %86 = load double, double* %18, align 8, !tbaa !7
  %87 = fsub double %85, %86
  store double %87, double* %dz31, align 8, !tbaa !7
  %88 = load double, double* %8, align 8, !tbaa !7
  %89 = load double, double* %3, align 8, !tbaa !7
  %90 = fsub double %88, %89
  store double %90, double* %dx72, align 8, !tbaa !7
  %91 = load double, double* %16, align 8, !tbaa !7
  %92 = load double, double* %11, align 8, !tbaa !7
  %93 = fsub double %91, %92
  store double %93, double* %dy72, align 8, !tbaa !7
  %94 = load double, double* %24, align 8, !tbaa !7
  %95 = load double, double* %19, align 8, !tbaa !7
  %96 = fsub double %94, %95
  store double %96, double* %dz72, align 8, !tbaa !7
  %97 = load double, double* %5, align 8, !tbaa !7
  %98 = load double, double* %4, align 8, !tbaa !7
  %99 = fsub double %97, %98
  store double %99, double* %dx43, align 8, !tbaa !7
  %100 = load double, double* %13, align 8, !tbaa !7
  %101 = load double, double* %12, align 8, !tbaa !7
  %102 = fsub double %100, %101
  store double %102, double* %dy43, align 8, !tbaa !7
  %103 = load double, double* %21, align 8, !tbaa !7
  %104 = load double, double* %20, align 8, !tbaa !7
  %105 = fsub double %103, %104
  store double %105, double* %dz43, align 8, !tbaa !7
  %106 = load double, double* %6, align 8, !tbaa !7
  %107 = load double, double* %8, align 8, !tbaa !7
  %108 = fsub double %106, %107
  store double %108, double* %dx57, align 8, !tbaa !7
  %109 = load double, double* %14, align 8, !tbaa !7
  %110 = load double, double* %16, align 8, !tbaa !7
  %111 = fsub double %109, %110
  store double %111, double* %dy57, align 8, !tbaa !7
  %112 = load double, double* %22, align 8, !tbaa !7
  %113 = load double, double* %24, align 8, !tbaa !7
  %114 = fsub double %112, %113
  store double %114, double* %dz57, align 8, !tbaa !7
  %115 = load double, double* %2, align 8, !tbaa !7
  %116 = load double, double* %5, align 8, !tbaa !7
  %117 = fsub double %115, %116
  store double %117, double* %dx14, align 8, !tbaa !7
  %118 = load double, double* %10, align 8, !tbaa !7
  %119 = load double, double* %13, align 8, !tbaa !7
  %120 = fsub double %118, %119
  store double %120, double* %dy14, align 8, !tbaa !7
  %121 = load double, double* %18, align 8, !tbaa !7
  %122 = load double, double* %21, align 8, !tbaa !7
  %123 = fsub double %121, %122
  store double %123, double* %dz14, align 8, !tbaa !7
  %124 = load double, double* %3, align 8, !tbaa !7
  %125 = load double, double* %6, align 8, !tbaa !7
  %126 = fsub double %124, %125
  store double %126, double* %dx25, align 8, !tbaa !7
  %127 = load double, double* %11, align 8, !tbaa !7
  %128 = load double, double* %14, align 8, !tbaa !7
  %129 = fsub double %127, %128
  store double %129, double* %dy25, align 8, !tbaa !7
  %130 = load double, double* %19, align 8, !tbaa !7
  %131 = load double, double* %22, align 8, !tbaa !7
  %132 = fsub double %130, %131
  store double %132, double* %dz25, align 8, !tbaa !7
  %133 = load double, double* %dx31, align 8, !tbaa !7
  %134 = load double, double* %dx72, align 8, !tbaa !7
  %135 = fadd double %133, %134
  %136 = load double, double* %dy63, align 8, !tbaa !7
  %137 = load double, double* %dz20, align 8, !tbaa !7
  %138 = fmul double %136, %137
  %139 = load double, double* %dy20, align 8, !tbaa !7
  %140 = load double, double* %dz63, align 8, !tbaa !7
  %141 = fmul double %139, %140
  %142 = fsub double %138, %141
  %143 = fmul double %135, %142
  %144 = load double, double* %dy31, align 8, !tbaa !7
  %145 = load double, double* %dy72, align 8, !tbaa !7
  %146 = fadd double %144, %145
  %147 = load double, double* %dx20, align 8, !tbaa !7
  %148 = load double, double* %dz63, align 8, !tbaa !7
  %149 = fmul double %147, %148
  %150 = load double, double* %dx63, align 8, !tbaa !7
  %151 = load double, double* %dz20, align 8, !tbaa !7
  %152 = fmul double %150, %151
  %153 = fsub double %149, %152
  %154 = fmul double %146, %153
  %155 = fadd double %143, %154
  %156 = load double, double* %dz31, align 8, !tbaa !7
  %157 = load double, double* %dz72, align 8, !tbaa !7
  %158 = fadd double %156, %157
  %159 = load double, double* %dx63, align 8, !tbaa !7
  %160 = load double, double* %dy20, align 8, !tbaa !7
  %161 = fmul double %159, %160
  %162 = load double, double* %dx20, align 8, !tbaa !7
  %163 = load double, double* %dy63, align 8, !tbaa !7
  %164 = fmul double %162, %163
  %165 = fsub double %161, %164
  %166 = fmul double %158, %165
  %167 = fadd double %155, %166
  %168 = load double, double* %dx43, align 8, !tbaa !7
  %169 = load double, double* %dx57, align 8, !tbaa !7
  %170 = fadd double %168, %169
  %171 = load double, double* %dy64, align 8, !tbaa !7
  %172 = load double, double* %dz70, align 8, !tbaa !7
  %173 = fmul double %171, %172
  %174 = load double, double* %dy70, align 8, !tbaa !7
  %175 = load double, double* %dz64, align 8, !tbaa !7
  %176 = fmul double %174, %175
  %177 = fsub double %173, %176
  %178 = fmul double %170, %177
  %179 = load double, double* %dy43, align 8, !tbaa !7
  %180 = load double, double* %dy57, align 8, !tbaa !7
  %181 = fadd double %179, %180
  %182 = load double, double* %dx70, align 8, !tbaa !7
  %183 = load double, double* %dz64, align 8, !tbaa !7
  %184 = fmul double %182, %183
  %185 = load double, double* %dx64, align 8, !tbaa !7
  %186 = load double, double* %dz70, align 8, !tbaa !7
  %187 = fmul double %185, %186
  %188 = fsub double %184, %187
  %189 = fmul double %181, %188
  %190 = fadd double %178, %189
  %191 = load double, double* %dz43, align 8, !tbaa !7
  %192 = load double, double* %dz57, align 8, !tbaa !7
  %193 = fadd double %191, %192
  %194 = load double, double* %dx64, align 8, !tbaa !7
  %195 = load double, double* %dy70, align 8, !tbaa !7
  %196 = fmul double %194, %195
  %197 = load double, double* %dx70, align 8, !tbaa !7
  %198 = load double, double* %dy64, align 8, !tbaa !7
  %199 = fmul double %197, %198
  %200 = fsub double %196, %199
  %201 = fmul double %193, %200
  %202 = fadd double %190, %201
  %203 = fadd double %167, %202
  %204 = load double, double* %dx14, align 8, !tbaa !7
  %205 = load double, double* %dx25, align 8, !tbaa !7
  %206 = fadd double %204, %205
  %207 = load double, double* %dy61, align 8, !tbaa !7
  %208 = load double, double* %dz50, align 8, !tbaa !7
  %209 = fmul double %207, %208
  %210 = load double, double* %dy50, align 8, !tbaa !7
  %211 = load double, double* %dz61, align 8, !tbaa !7
  %212 = fmul double %210, %211
  %213 = fsub double %209, %212
  %214 = fmul double %206, %213
  %215 = load double, double* %dy14, align 8, !tbaa !7
  %216 = load double, double* %dy25, align 8, !tbaa !7
  %217 = fadd double %215, %216
  %218 = load double, double* %dx50, align 8, !tbaa !7
  %219 = load double, double* %dz61, align 8, !tbaa !7
  %220 = fmul double %218, %219
  %221 = load double, double* %dx61, align 8, !tbaa !7
  %222 = load double, double* %dz50, align 8, !tbaa !7
  %223 = fmul double %221, %222
  %224 = fsub double %220, %223
  %225 = fmul double %217, %224
  %226 = fadd double %214, %225
  %227 = load double, double* %dz14, align 8, !tbaa !7
  %228 = load double, double* %dz25, align 8, !tbaa !7
  %229 = fadd double %227, %228
  %230 = load double, double* %dx61, align 8, !tbaa !7
  %231 = load double, double* %dy50, align 8, !tbaa !7
  %232 = fmul double %230, %231
  %233 = load double, double* %dx50, align 8, !tbaa !7
  %234 = load double, double* %dy61, align 8, !tbaa !7
  %235 = fmul double %233, %234
  %236 = fsub double %232, %235
  %237 = fmul double %229, %236
  %238 = fadd double %226, %237
  %239 = fadd double %203, %238
  store double %239, double* %volume, align 8, !tbaa !7
  %240 = load double, double* %twelveth, align 8, !tbaa !7
  %241 = load double, double* %volume, align 8, !tbaa !7
  %242 = fmul double %241, %240
  store double %242, double* %volume, align 8, !tbaa !7
  %243 = load double, double* %volume, align 8, !tbaa !7
  ret double %243
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL13LagrangeNodalv() #0 {
  %delt = alloca double, align 8
  %u_cut = alloca double, align 8
  %1 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %2 = load double, double* %1, !tbaa !7
  store double %2, double* %delt, align 8, !tbaa !7
  %3 = call dereferenceable(8) double* @_ZN6Domain5u_cutEv(%struct.Domain* @domain)
  %4 = load double, double* %3, !tbaa !7
  store double %4, double* %u_cut, align 8, !tbaa !7
  call void @_ZL17CalcForceForNodesv()
  call void @_ZL24CalcAccelerationForNodesv()
  call void @_ZL43ApplyAccelerationBoundaryConditionsForNodesv()
  %5 = load double, double* %delt, align 8, !tbaa !7
  %6 = load double, double* %u_cut, align 8, !tbaa !7
  call void @_ZL20CalcVelocityForNodesdd(double %5, double %6)
  %7 = load double, double* %delt, align 8, !tbaa !7
  call void @_ZL20CalcPositionForNodesd(double %7)
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL16LagrangeElementsv() #0 {
  %deltatime = alloca double, align 8
  %1 = call dereferenceable(8) double* @_ZN6Domain9deltatimeEv(%struct.Domain* @domain)
  %2 = load double, double* %1, !tbaa !7
  store double %2, double* %deltatime, align 8, !tbaa !7
  %3 = load double, double* %deltatime, align 8, !tbaa !7
  call void @_ZL20CalcLagrangeElementsd(double %3)
  call void @_ZL13CalcQForElemsv()
  call void @_ZL31ApplyMaterialPropertiesForElemsv()
  call void @_ZL21UpdateVolumesForElemsv()
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL27CalcTimeConstraintsForElemsv() #0 {
  call void @_ZL29CalcCourantConstraintForElemsv()
  call void @_ZL27CalcHydroConstraintForElemsv()
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL17CalcForceForNodesv() #0 {
  %numNode = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  store i32 %2, i32* %numNode, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %3

; <label>:3                                       ; preds = %14, %0
  %4 = load i32, i32* %i, align 4, !tbaa !5
  %5 = load i32, i32* %numNode, align 4, !tbaa !5
  %6 = icmp slt i32 %4, %5
  br i1 %6, label %7, label %17

; <label>:7                                       ; preds = %3
  %8 = load i32, i32* %i, align 4, !tbaa !5
  %9 = call dereferenceable(8) double* @_ZN6Domain2fxEi(%struct.Domain* @domain, i32 %8)
  store double 0.000000e+00, double* %9, !tbaa !7
  %10 = load i32, i32* %i, align 4, !tbaa !5
  %11 = call dereferenceable(8) double* @_ZN6Domain2fyEi(%struct.Domain* @domain, i32 %10)
  store double 0.000000e+00, double* %11, !tbaa !7
  %12 = load i32, i32* %i, align 4, !tbaa !5
  %13 = call dereferenceable(8) double* @_ZN6Domain2fzEi(%struct.Domain* @domain, i32 %12)
  store double 0.000000e+00, double* %13, !tbaa !7
  br label %14

; <label>:14                                      ; preds = %7
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %i, align 4, !tbaa !5
  br label %3

; <label>:17                                      ; preds = %3
  call void @_ZL23CalcVolumeForceForElemsv()
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL24CalcAccelerationForNodesv() #0 {
  %numNode = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  store i32 %2, i32* %numNode, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %3

; <label>:3                                       ; preds = %35, %0
  %4 = load i32, i32* %i, align 4, !tbaa !5
  %5 = load i32, i32* %numNode, align 4, !tbaa !5
  %6 = icmp slt i32 %4, %5
  br i1 %6, label %7, label %38

; <label>:7                                       ; preds = %3
  %8 = load i32, i32* %i, align 4, !tbaa !5
  %9 = call dereferenceable(8) double* @_ZN6Domain2fxEi(%struct.Domain* @domain, i32 %8)
  %10 = load double, double* %9, !tbaa !7
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %12 = call dereferenceable(8) double* @_ZN6Domain9nodalMassEi(%struct.Domain* @domain, i32 %11)
  %13 = load double, double* %12, !tbaa !7
  %14 = fdiv double %10, %13
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %16 = call dereferenceable(8) double* @_ZN6Domain3xddEi(%struct.Domain* @domain, i32 %15)
  store double %14, double* %16, !tbaa !7
  %17 = load i32, i32* %i, align 4, !tbaa !5
  %18 = call dereferenceable(8) double* @_ZN6Domain2fyEi(%struct.Domain* @domain, i32 %17)
  %19 = load double, double* %18, !tbaa !7
  %20 = load i32, i32* %i, align 4, !tbaa !5
  %21 = call dereferenceable(8) double* @_ZN6Domain9nodalMassEi(%struct.Domain* @domain, i32 %20)
  %22 = load double, double* %21, !tbaa !7
  %23 = fdiv double %19, %22
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = call dereferenceable(8) double* @_ZN6Domain3yddEi(%struct.Domain* @domain, i32 %24)
  store double %23, double* %25, !tbaa !7
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %27 = call dereferenceable(8) double* @_ZN6Domain2fzEi(%struct.Domain* @domain, i32 %26)
  %28 = load double, double* %27, !tbaa !7
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %30 = call dereferenceable(8) double* @_ZN6Domain9nodalMassEi(%struct.Domain* @domain, i32 %29)
  %31 = load double, double* %30, !tbaa !7
  %32 = fdiv double %28, %31
  %33 = load i32, i32* %i, align 4, !tbaa !5
  %34 = call dereferenceable(8) double* @_ZN6Domain3zddEi(%struct.Domain* @domain, i32 %33)
  store double %32, double* %34, !tbaa !7
  br label %35

; <label>:35                                      ; preds = %7
  %36 = load i32, i32* %i, align 4, !tbaa !5
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %i, align 4, !tbaa !5
  br label %3

; <label>:38                                      ; preds = %3
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL43ApplyAccelerationBoundaryConditionsForNodesv() #6 {
  %numNodeBC = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %1 = call dereferenceable(4) i32* @_ZN6Domain5sizeXEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  %3 = add nsw i32 %2, 1
  %4 = call dereferenceable(4) i32* @_ZN6Domain5sizeXEv(%struct.Domain* @domain)
  %5 = load i32, i32* %4, !tbaa !5
  %6 = add nsw i32 %5, 1
  %7 = mul nsw i32 %3, %6
  store i32 %7, i32* %numNodeBC, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %8

; <label>:8                                       ; preds = %17, %0
  %9 = load i32, i32* %i, align 4, !tbaa !5
  %10 = load i32, i32* %numNodeBC, align 4, !tbaa !5
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %20

; <label>:12                                      ; preds = %8
  %13 = load i32, i32* %i, align 4, !tbaa !5
  %14 = call dereferenceable(4) i32* @_ZN6Domain5symmXEi(%struct.Domain* @domain, i32 %13)
  %15 = load i32, i32* %14, !tbaa !5
  %16 = call dereferenceable(8) double* @_ZN6Domain3xddEi(%struct.Domain* @domain, i32 %15)
  store double 0.000000e+00, double* %16, !tbaa !7
  br label %17

; <label>:17                                      ; preds = %12
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %i, align 4, !tbaa !5
  br label %8

; <label>:20                                      ; preds = %8
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %21

; <label>:21                                      ; preds = %30, %20
  %22 = load i32, i32* %i1, align 4, !tbaa !5
  %23 = load i32, i32* %numNodeBC, align 4, !tbaa !5
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %33

; <label>:25                                      ; preds = %21
  %26 = load i32, i32* %i1, align 4, !tbaa !5
  %27 = call dereferenceable(4) i32* @_ZN6Domain5symmYEi(%struct.Domain* @domain, i32 %26)
  %28 = load i32, i32* %27, !tbaa !5
  %29 = call dereferenceable(8) double* @_ZN6Domain3yddEi(%struct.Domain* @domain, i32 %28)
  store double 0.000000e+00, double* %29, !tbaa !7
  br label %30

; <label>:30                                      ; preds = %25
  %31 = load i32, i32* %i1, align 4, !tbaa !5
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %i1, align 4, !tbaa !5
  br label %21

; <label>:33                                      ; preds = %21
  store i32 0, i32* %i2, align 4, !tbaa !5
  br label %34

; <label>:34                                      ; preds = %43, %33
  %35 = load i32, i32* %i2, align 4, !tbaa !5
  %36 = load i32, i32* %numNodeBC, align 4, !tbaa !5
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %46

; <label>:38                                      ; preds = %34
  %39 = load i32, i32* %i2, align 4, !tbaa !5
  %40 = call dereferenceable(4) i32* @_ZN6Domain5symmZEi(%struct.Domain* @domain, i32 %39)
  %41 = load i32, i32* %40, !tbaa !5
  %42 = call dereferenceable(8) double* @_ZN6Domain3zddEi(%struct.Domain* @domain, i32 %41)
  store double 0.000000e+00, double* %42, !tbaa !7
  br label %43

; <label>:43                                      ; preds = %38
  %44 = load i32, i32* %i2, align 4, !tbaa !5
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %i2, align 4, !tbaa !5
  br label %34

; <label>:46                                      ; preds = %34
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL20CalcVelocityForNodesdd(double %dt, double %u_cut) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %numNode = alloca i32, align 4
  %i = alloca i32, align 4
  %xdtmp = alloca double, align 8
  %ydtmp = alloca double, align 8
  %zdtmp = alloca double, align 8
  store double %dt, double* %1, align 8, !tbaa !7
  store double %u_cut, double* %2, align 8, !tbaa !7
  %3 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %4 = load i32, i32* %3, !tbaa !5
  store i32 %4, i32* %numNode, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %5

; <label>:5                                       ; preds = %64, %0
  %6 = load i32, i32* %i, align 4, !tbaa !5
  %7 = load i32, i32* %numNode, align 4, !tbaa !5
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %67

; <label>:9                                       ; preds = %5
  %10 = load i32, i32* %i, align 4, !tbaa !5
  %11 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %10)
  %12 = load double, double* %11, !tbaa !7
  %13 = load i32, i32* %i, align 4, !tbaa !5
  %14 = call dereferenceable(8) double* @_ZN6Domain3xddEi(%struct.Domain* @domain, i32 %13)
  %15 = load double, double* %14, !tbaa !7
  %16 = load double, double* %1, align 8, !tbaa !7
  %17 = fmul double %15, %16
  %18 = fadd double %12, %17
  store double %18, double* %xdtmp, align 8, !tbaa !7
  %19 = load double, double* %xdtmp, align 8, !tbaa !7
  %20 = call double @_Z4FABSd(double %19)
  %21 = load double, double* %2, align 8, !tbaa !7
  %22 = fcmp olt double %20, %21
  br i1 %22, label %23, label %24

; <label>:23                                      ; preds = %9
  store double 0.000000e+00, double* %xdtmp, align 8, !tbaa !7
  br label %24

; <label>:24                                      ; preds = %23, %9
  %25 = load double, double* %xdtmp, align 8, !tbaa !7
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %27 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %26)
  store double %25, double* %27, !tbaa !7
  %28 = load i32, i32* %i, align 4, !tbaa !5
  %29 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %28)
  %30 = load double, double* %29, !tbaa !7
  %31 = load i32, i32* %i, align 4, !tbaa !5
  %32 = call dereferenceable(8) double* @_ZN6Domain3yddEi(%struct.Domain* @domain, i32 %31)
  %33 = load double, double* %32, !tbaa !7
  %34 = load double, double* %1, align 8, !tbaa !7
  %35 = fmul double %33, %34
  %36 = fadd double %30, %35
  store double %36, double* %ydtmp, align 8, !tbaa !7
  %37 = load double, double* %ydtmp, align 8, !tbaa !7
  %38 = call double @_Z4FABSd(double %37)
  %39 = load double, double* %2, align 8, !tbaa !7
  %40 = fcmp olt double %38, %39
  br i1 %40, label %41, label %42

; <label>:41                                      ; preds = %24
  store double 0.000000e+00, double* %ydtmp, align 8, !tbaa !7
  br label %42

; <label>:42                                      ; preds = %41, %24
  %43 = load double, double* %ydtmp, align 8, !tbaa !7
  %44 = load i32, i32* %i, align 4, !tbaa !5
  %45 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %44)
  store double %43, double* %45, !tbaa !7
  %46 = load i32, i32* %i, align 4, !tbaa !5
  %47 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %46)
  %48 = load double, double* %47, !tbaa !7
  %49 = load i32, i32* %i, align 4, !tbaa !5
  %50 = call dereferenceable(8) double* @_ZN6Domain3zddEi(%struct.Domain* @domain, i32 %49)
  %51 = load double, double* %50, !tbaa !7
  %52 = load double, double* %1, align 8, !tbaa !7
  %53 = fmul double %51, %52
  %54 = fadd double %48, %53
  store double %54, double* %zdtmp, align 8, !tbaa !7
  %55 = load double, double* %zdtmp, align 8, !tbaa !7
  %56 = call double @_Z4FABSd(double %55)
  %57 = load double, double* %2, align 8, !tbaa !7
  %58 = fcmp olt double %56, %57
  br i1 %58, label %59, label %60

; <label>:59                                      ; preds = %42
  store double 0.000000e+00, double* %zdtmp, align 8, !tbaa !7
  br label %60

; <label>:60                                      ; preds = %59, %42
  %61 = load double, double* %zdtmp, align 8, !tbaa !7
  %62 = load i32, i32* %i, align 4, !tbaa !5
  %63 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %62)
  store double %61, double* %63, !tbaa !7
  br label %64

; <label>:64                                      ; preds = %60
  %65 = load i32, i32* %i, align 4, !tbaa !5
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %i, align 4, !tbaa !5
  br label %5

; <label>:67                                      ; preds = %5
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL20CalcPositionForNodesd(double %dt) #0 {
  %1 = alloca double, align 8
  %numNode = alloca i32, align 4
  %i = alloca i32, align 4
  store double %dt, double* %1, align 8, !tbaa !7
  %2 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %3 = load i32, i32* %2, !tbaa !5
  store i32 %3, i32* %numNode, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %4

; <label>:4                                       ; preds = %36, %0
  %5 = load i32, i32* %i, align 4, !tbaa !5
  %6 = load i32, i32* %numNode, align 4, !tbaa !5
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %8, label %39

; <label>:8                                       ; preds = %4
  %9 = load i32, i32* %i, align 4, !tbaa !5
  %10 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %9)
  %11 = load double, double* %10, !tbaa !7
  %12 = load double, double* %1, align 8, !tbaa !7
  %13 = fmul double %11, %12
  %14 = load i32, i32* %i, align 4, !tbaa !5
  %15 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %14)
  %16 = load double, double* %15, !tbaa !7
  %17 = fadd double %16, %13
  store double %17, double* %15, !tbaa !7
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %19 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %18)
  %20 = load double, double* %19, !tbaa !7
  %21 = load double, double* %1, align 8, !tbaa !7
  %22 = fmul double %20, %21
  %23 = load i32, i32* %i, align 4, !tbaa !5
  %24 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %23)
  %25 = load double, double* %24, !tbaa !7
  %26 = fadd double %25, %22
  store double %26, double* %24, !tbaa !7
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %28 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %27)
  %29 = load double, double* %28, !tbaa !7
  %30 = load double, double* %1, align 8, !tbaa !7
  %31 = fmul double %29, %30
  %32 = load i32, i32* %i, align 4, !tbaa !5
  %33 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %32)
  %34 = load double, double* %33, !tbaa !7
  %35 = fadd double %34, %31
  store double %35, double* %33, !tbaa !7
  br label %36

; <label>:36                                      ; preds = %8
  %37 = load i32, i32* %i, align 4, !tbaa !5
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %i, align 4, !tbaa !5
  br label %4

; <label>:39                                      ; preds = %4
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2fxEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 9
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2fyEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 10
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2fzEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 11
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL23CalcVolumeForceForElemsv() #0 {
  %numElem = alloca i32, align 4
  %hgcoef = alloca double, align 8
  %sigxx = alloca double*, align 8
  %sigyy = alloca double*, align 8
  %sigzz = alloca double*, align 8
  %determ = alloca double*, align 8
  %k = alloca i32, align 4
  %1 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  store i32 %2, i32* %numElem, align 4, !tbaa !5
  %3 = load i32, i32* %numElem, align 4, !tbaa !5
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %48

; <label>:5                                       ; preds = %0
  %6 = call dereferenceable(8) double* @_ZN6Domain6hgcoefEv(%struct.Domain* @domain)
  %7 = load double, double* %6, !tbaa !7
  store double %7, double* %hgcoef, align 8, !tbaa !7
  %8 = load i32, i32* %numElem, align 4, !tbaa !5
  %9 = sext i32 %8 to i64
  %10 = call double* @_Z8AllocateIdEPT_m(i64 %9)
  store double* %10, double** %sigxx, align 8, !tbaa !1
  %11 = load i32, i32* %numElem, align 4, !tbaa !5
  %12 = sext i32 %11 to i64
  %13 = call double* @_Z8AllocateIdEPT_m(i64 %12)
  store double* %13, double** %sigyy, align 8, !tbaa !1
  %14 = load i32, i32* %numElem, align 4, !tbaa !5
  %15 = sext i32 %14 to i64
  %16 = call double* @_Z8AllocateIdEPT_m(i64 %15)
  store double* %16, double** %sigzz, align 8, !tbaa !1
  %17 = load i32, i32* %numElem, align 4, !tbaa !5
  %18 = sext i32 %17 to i64
  %19 = call double* @_Z8AllocateIdEPT_m(i64 %18)
  store double* %19, double** %determ, align 8, !tbaa !1
  %20 = load i32, i32* %numElem, align 4, !tbaa !5
  %21 = load double*, double** %sigxx, align 8, !tbaa !1
  %22 = load double*, double** %sigyy, align 8, !tbaa !1
  %23 = load double*, double** %sigzz, align 8, !tbaa !1
  call void @_ZL23InitStressTermsForElemsiPdS_S_(i32 %20, double* %21, double* %22, double* %23)
  %24 = load i32, i32* %numElem, align 4, !tbaa !5
  %25 = load double*, double** %sigxx, align 8, !tbaa !1
  %26 = load double*, double** %sigyy, align 8, !tbaa !1
  %27 = load double*, double** %sigzz, align 8, !tbaa !1
  %28 = load double*, double** %determ, align 8, !tbaa !1
  call void @_ZL23IntegrateStressForElemsiPdS_S_S_(i32 %24, double* %25, double* %26, double* %27, double* %28)
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %29

; <label>:29                                      ; preds = %42, %5
  %30 = load i32, i32* %k, align 4, !tbaa !5
  %31 = load i32, i32* %numElem, align 4, !tbaa !5
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %33, label %45

; <label>:33                                      ; preds = %29
  %34 = load i32, i32* %k, align 4, !tbaa !5
  %35 = sext i32 %34 to i64
  %36 = load double*, double** %determ, align 8, !tbaa !1
  %37 = getelementptr inbounds double, double* %36, i64 %35
  %38 = load double, double* %37, align 8, !tbaa !7
  %39 = fcmp ole double %38, 0.000000e+00
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %33
  call void @exit(i32 -1) #14
  unreachable

; <label>:41                                      ; preds = %33
  br label %42

; <label>:42                                      ; preds = %41
  %43 = load i32, i32* %k, align 4, !tbaa !5
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %k, align 4, !tbaa !5
  br label %29

; <label>:45                                      ; preds = %29
  %46 = load double*, double** %determ, align 8, !tbaa !1
  %47 = load double, double* %hgcoef, align 8, !tbaa !7
  call void @_ZL28CalcHourglassControlForElemsPdd(double* %46, double %47)
  call void @_Z7ReleaseIdEvPPT_(double** %determ)
  call void @_Z7ReleaseIdEvPPT_(double** %sigzz)
  call void @_Z7ReleaseIdEvPPT_(double** %sigyy)
  call void @_Z7ReleaseIdEvPPT_(double** %sigxx)
  br label %48

; <label>:48                                      ; preds = %45, %0
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr double* @_Z8AllocateIdEPT_m(i64 %size) #4 comdat {
  %1 = alloca i64, align 8
  store i64 %size, i64* %1, align 8, !tbaa !13
  %2 = load i64, i64* %1, align 8, !tbaa !13
  %3 = mul i64 8, %2
  %4 = call noalias i8* @malloc(i64 %3) #1
  %5 = bitcast i8* %4 to double*
  ret double* %5
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL23InitStressTermsForElemsiPdS_S_(i32 %numElem, double* %sigxx, double* %sigyy, double* %sigzz) #0 {
  %1 = alloca i32, align 4
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %i = alloca i32, align 4
  store i32 %numElem, i32* %1, align 4, !tbaa !5
  store double* %sigxx, double** %2, align 8, !tbaa !1
  store double* %sigyy, double** %3, align 8, !tbaa !1
  store double* %sigzz, double** %4, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %5

; <label>:5                                       ; preds = %30, %0
  %6 = load i32, i32* %i, align 4, !tbaa !5
  %7 = load i32, i32* %1, align 4, !tbaa !5
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %33

; <label>:9                                       ; preds = %5
  %10 = load i32, i32* %i, align 4, !tbaa !5
  %11 = call dereferenceable(8) double* @_ZN6Domain1pEi(%struct.Domain* @domain, i32 %10)
  %12 = load double, double* %11, !tbaa !7
  %13 = fsub double -0.000000e+00, %12
  %14 = load i32, i32* %i, align 4, !tbaa !5
  %15 = call dereferenceable(8) double* @_ZN6Domain1qEi(%struct.Domain* @domain, i32 %14)
  %16 = load double, double* %15, !tbaa !7
  %17 = fsub double %13, %16
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %19 = sext i32 %18 to i64
  %20 = load double*, double** %4, align 8, !tbaa !1
  %21 = getelementptr inbounds double, double* %20, i64 %19
  store double %17, double* %21, align 8, !tbaa !7
  %22 = load i32, i32* %i, align 4, !tbaa !5
  %23 = sext i32 %22 to i64
  %24 = load double*, double** %3, align 8, !tbaa !1
  %25 = getelementptr inbounds double, double* %24, i64 %23
  store double %17, double* %25, align 8, !tbaa !7
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %27 = sext i32 %26 to i64
  %28 = load double*, double** %2, align 8, !tbaa !1
  %29 = getelementptr inbounds double, double* %28, i64 %27
  store double %17, double* %29, align 8, !tbaa !7
  br label %30

; <label>:30                                      ; preds = %9
  %31 = load i32, i32* %i, align 4, !tbaa !5
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %i, align 4, !tbaa !5
  br label %5

; <label>:33                                      ; preds = %5
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL23IntegrateStressForElemsiPdS_S_S_(i32 %numElem, double* %sigxx, double* %sigyy, double* %sigzz, double* %determ) #0 {
  %1 = alloca i32, align 4
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %numElem8 = alloca i32, align 4
  %fx_elem = alloca double*, align 8
  %fy_elem = alloca double*, align 8
  %fz_elem = alloca double*, align 8
  %k = alloca i32, align 4
  %B = alloca [3 x [8 x double]], align 16
  %x_local = alloca [8 x double], align 16
  %y_local = alloca [8 x double], align 16
  %z_local = alloca [8 x double], align 16
  %elemNodes = alloca i32*, align 8
  %lnode = alloca i32, align 4
  %gnode = alloca i32, align 4
  %numNode = alloca i32, align 4
  %gnode1 = alloca i32, align 4
  %count = alloca i32, align 4
  %start = alloca i32, align 4
  %fx = alloca double, align 8
  %fy = alloca double, align 8
  %fz = alloca double, align 8
  %i = alloca i32, align 4
  %elem = alloca i32, align 4
  store i32 %numElem, i32* %1, align 4, !tbaa !5
  store double* %sigxx, double** %2, align 8, !tbaa !1
  store double* %sigyy, double** %3, align 8, !tbaa !1
  store double* %sigzz, double** %4, align 8, !tbaa !1
  store double* %determ, double** %5, align 8, !tbaa !1
  %6 = load i32, i32* %1, align 4, !tbaa !5
  %7 = mul nsw i32 %6, 8
  store i32 %7, i32* %numElem8, align 4, !tbaa !5
  %8 = load i32, i32* %numElem8, align 4, !tbaa !5
  %9 = sext i32 %8 to i64
  %10 = call double* @_Z8AllocateIdEPT_m(i64 %9)
  store double* %10, double** %fx_elem, align 8, !tbaa !1
  %11 = load i32, i32* %numElem8, align 4, !tbaa !5
  %12 = sext i32 %11 to i64
  %13 = call double* @_Z8AllocateIdEPT_m(i64 %12)
  store double* %13, double** %fy_elem, align 8, !tbaa !1
  %14 = load i32, i32* %numElem8, align 4, !tbaa !5
  %15 = sext i32 %14 to i64
  %16 = call double* @_Z8AllocateIdEPT_m(i64 %15)
  store double* %16, double** %fz_elem, align 8, !tbaa !1
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %17

; <label>:17                                      ; preds = %111, %0
  %18 = load i32, i32* %k, align 4, !tbaa !5
  %19 = load i32, i32* %1, align 4, !tbaa !5
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %114

; <label>:21                                      ; preds = %17
  %22 = bitcast [3 x [8 x double]]* %B to i8*
  call void @llvm.lifetime.start(i64 192, i8* %22) #1
  %23 = bitcast [8 x double]* %x_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %23) #1
  %24 = bitcast [8 x double]* %y_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %24) #1
  %25 = bitcast [8 x double]* %z_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %25) #1
  %26 = load i32, i32* %k, align 4, !tbaa !5
  %27 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %26)
  store i32* %27, i32** %elemNodes, align 8, !tbaa !1
  store i32 0, i32* %lnode, align 4, !tbaa !5
  br label %28

; <label>:28                                      ; preds = %55, %21
  %29 = load i32, i32* %lnode, align 4, !tbaa !5
  %30 = icmp slt i32 %29, 8
  br i1 %30, label %31, label %58

; <label>:31                                      ; preds = %28
  %32 = load i32, i32* %lnode, align 4, !tbaa !5
  %33 = sext i32 %32 to i64
  %34 = load i32*, i32** %elemNodes, align 8, !tbaa !1
  %35 = getelementptr inbounds i32, i32* %34, i64 %33
  %36 = load i32, i32* %35, align 4, !tbaa !5
  store i32 %36, i32* %gnode, align 4, !tbaa !5
  %37 = load i32, i32* %gnode, align 4, !tbaa !5
  %38 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %37)
  %39 = load double, double* %38, !tbaa !7
  %40 = load i32, i32* %lnode, align 4, !tbaa !5
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i64 %41
  store double %39, double* %42, align 8, !tbaa !7
  %43 = load i32, i32* %gnode, align 4, !tbaa !5
  %44 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %43)
  %45 = load double, double* %44, !tbaa !7
  %46 = load i32, i32* %lnode, align 4, !tbaa !5
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i64 %47
  store double %45, double* %48, align 8, !tbaa !7
  %49 = load i32, i32* %gnode, align 4, !tbaa !5
  %50 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %49)
  %51 = load double, double* %50, !tbaa !7
  %52 = load i32, i32* %lnode, align 4, !tbaa !5
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i64 %53
  store double %51, double* %54, align 8, !tbaa !7
  br label %55

; <label>:55                                      ; preds = %31
  %56 = load i32, i32* %lnode, align 4, !tbaa !5
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %lnode, align 4, !tbaa !5
  br label %28

; <label>:58                                      ; preds = %28
  %59 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i32 0
  %60 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i32 0
  %61 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i32 0
  %62 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i32 0
  %63 = load i32, i32* %k, align 4, !tbaa !5
  %64 = sext i32 %63 to i64
  %65 = load double*, double** %5, align 8, !tbaa !1
  %66 = getelementptr inbounds double, double* %65, i64 %64
  call void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* %59, double* %60, double* %61, [8 x double]* %62, double* %66)
  %67 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i64 0
  %68 = getelementptr inbounds [8 x double], [8 x double]* %67, i32 0, i32 0
  %69 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i64 1
  %70 = getelementptr inbounds [8 x double], [8 x double]* %69, i32 0, i32 0
  %71 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i64 2
  %72 = getelementptr inbounds [8 x double], [8 x double]* %71, i32 0, i32 0
  %73 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i32 0
  %74 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i32 0
  %75 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i32 0
  call void @_ZL19CalcElemNodeNormalsPdS_S_PKdS1_S1_(double* %68, double* %70, double* %72, double* %73, double* %74, double* %75)
  %76 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i32 0
  %77 = load i32, i32* %k, align 4, !tbaa !5
  %78 = sext i32 %77 to i64
  %79 = load double*, double** %2, align 8, !tbaa !1
  %80 = getelementptr inbounds double, double* %79, i64 %78
  %81 = load double, double* %80, align 8, !tbaa !7
  %82 = load i32, i32* %k, align 4, !tbaa !5
  %83 = sext i32 %82 to i64
  %84 = load double*, double** %3, align 8, !tbaa !1
  %85 = getelementptr inbounds double, double* %84, i64 %83
  %86 = load double, double* %85, align 8, !tbaa !7
  %87 = load i32, i32* %k, align 4, !tbaa !5
  %88 = sext i32 %87 to i64
  %89 = load double*, double** %4, align 8, !tbaa !1
  %90 = getelementptr inbounds double, double* %89, i64 %88
  %91 = load double, double* %90, align 8, !tbaa !7
  %92 = load i32, i32* %k, align 4, !tbaa !5
  %93 = mul nsw i32 %92, 8
  %94 = sext i32 %93 to i64
  %95 = load double*, double** %fx_elem, align 8, !tbaa !1
  %96 = getelementptr inbounds double, double* %95, i64 %94
  %97 = load i32, i32* %k, align 4, !tbaa !5
  %98 = mul nsw i32 %97, 8
  %99 = sext i32 %98 to i64
  %100 = load double*, double** %fy_elem, align 8, !tbaa !1
  %101 = getelementptr inbounds double, double* %100, i64 %99
  %102 = load i32, i32* %k, align 4, !tbaa !5
  %103 = mul nsw i32 %102, 8
  %104 = sext i32 %103 to i64
  %105 = load double*, double** %fz_elem, align 8, !tbaa !1
  %106 = getelementptr inbounds double, double* %105, i64 %104
  call void @_ZL27SumElemStressesToNodeForcesPA8_KddddPdS2_S2_([8 x double]* %76, double %81, double %86, double %91, double* %96, double* %101, double* %106)
  %107 = bitcast [8 x double]* %z_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %107) #1
  %108 = bitcast [8 x double]* %y_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %108) #1
  %109 = bitcast [8 x double]* %x_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %109) #1
  %110 = bitcast [3 x [8 x double]]* %B to i8*
  call void @llvm.lifetime.end(i64 192, i8* %110) #1
  br label %111

; <label>:111                                     ; preds = %58
  %112 = load i32, i32* %k, align 4, !tbaa !5
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %k, align 4, !tbaa !5
  br label %17

; <label>:114                                     ; preds = %17
  %115 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %116 = load i32, i32* %115, !tbaa !5
  store i32 %116, i32* %numNode, align 4, !tbaa !5
  store i32 0, i32* %gnode1, align 4, !tbaa !5
  br label %117

; <label>:117                                     ; preds = %172, %114
  %118 = load i32, i32* %gnode1, align 4, !tbaa !5
  %119 = load i32, i32* %numNode, align 4, !tbaa !5
  %120 = icmp slt i32 %118, %119
  br i1 %120, label %121, label %175

; <label>:121                                     ; preds = %117
  %122 = load i32, i32* %gnode1, align 4, !tbaa !5
  %123 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* @domain, i32 %122)
  %124 = load i32, i32* %123, !tbaa !5
  store i32 %124, i32* %count, align 4, !tbaa !5
  %125 = load i32, i32* %gnode1, align 4, !tbaa !5
  %126 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* @domain, i32 %125)
  %127 = load i32, i32* %126, !tbaa !5
  store i32 %127, i32* %start, align 4, !tbaa !5
  store double 0.000000e+00, double* %fx, align 8, !tbaa !7
  store double 0.000000e+00, double* %fy, align 8, !tbaa !7
  store double 0.000000e+00, double* %fz, align 8, !tbaa !7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %128

; <label>:128                                     ; preds = %159, %121
  %129 = load i32, i32* %i, align 4, !tbaa !5
  %130 = load i32, i32* %count, align 4, !tbaa !5
  %131 = icmp slt i32 %129, %130
  br i1 %131, label %132, label %162

; <label>:132                                     ; preds = %128
  %133 = load i32, i32* %start, align 4, !tbaa !5
  %134 = load i32, i32* %i, align 4, !tbaa !5
  %135 = add nsw i32 %133, %134
  %136 = call dereferenceable(4) i32* @_ZN6Domain18nodeElemCornerListEi(%struct.Domain* @domain, i32 %135)
  %137 = load i32, i32* %136, !tbaa !5
  store i32 %137, i32* %elem, align 4, !tbaa !5
  %138 = load i32, i32* %elem, align 4, !tbaa !5
  %139 = sext i32 %138 to i64
  %140 = load double*, double** %fx_elem, align 8, !tbaa !1
  %141 = getelementptr inbounds double, double* %140, i64 %139
  %142 = load double, double* %141, align 8, !tbaa !7
  %143 = load double, double* %fx, align 8, !tbaa !7
  %144 = fadd double %143, %142
  store double %144, double* %fx, align 8, !tbaa !7
  %145 = load i32, i32* %elem, align 4, !tbaa !5
  %146 = sext i32 %145 to i64
  %147 = load double*, double** %fy_elem, align 8, !tbaa !1
  %148 = getelementptr inbounds double, double* %147, i64 %146
  %149 = load double, double* %148, align 8, !tbaa !7
  %150 = load double, double* %fy, align 8, !tbaa !7
  %151 = fadd double %150, %149
  store double %151, double* %fy, align 8, !tbaa !7
  %152 = load i32, i32* %elem, align 4, !tbaa !5
  %153 = sext i32 %152 to i64
  %154 = load double*, double** %fz_elem, align 8, !tbaa !1
  %155 = getelementptr inbounds double, double* %154, i64 %153
  %156 = load double, double* %155, align 8, !tbaa !7
  %157 = load double, double* %fz, align 8, !tbaa !7
  %158 = fadd double %157, %156
  store double %158, double* %fz, align 8, !tbaa !7
  br label %159

; <label>:159                                     ; preds = %132
  %160 = load i32, i32* %i, align 4, !tbaa !5
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %i, align 4, !tbaa !5
  br label %128

; <label>:162                                     ; preds = %128
  %163 = load double, double* %fx, align 8, !tbaa !7
  %164 = load i32, i32* %gnode1, align 4, !tbaa !5
  %165 = call dereferenceable(8) double* @_ZN6Domain2fxEi(%struct.Domain* @domain, i32 %164)
  store double %163, double* %165, !tbaa !7
  %166 = load double, double* %fy, align 8, !tbaa !7
  %167 = load i32, i32* %gnode1, align 4, !tbaa !5
  %168 = call dereferenceable(8) double* @_ZN6Domain2fyEi(%struct.Domain* @domain, i32 %167)
  store double %166, double* %168, !tbaa !7
  %169 = load double, double* %fz, align 8, !tbaa !7
  %170 = load i32, i32* %gnode1, align 4, !tbaa !5
  %171 = call dereferenceable(8) double* @_ZN6Domain2fzEi(%struct.Domain* @domain, i32 %170)
  store double %169, double* %171, !tbaa !7
  br label %172

; <label>:172                                     ; preds = %162
  %173 = load i32, i32* %gnode1, align 4, !tbaa !5
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %gnode1, align 4, !tbaa !5
  br label %117

; <label>:175                                     ; preds = %117
  call void @_Z7ReleaseIdEvPPT_(double** %fz_elem)
  call void @_Z7ReleaseIdEvPPT_(double** %fy_elem)
  call void @_Z7ReleaseIdEvPPT_(double** %fx_elem)
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL28CalcHourglassControlForElemsPdd(double* %determ, double %hgcoef) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double, align 8
  %numElem = alloca i32, align 4
  %numElem8 = alloca i32, align 4
  %dvdx = alloca double*, align 8
  %dvdy = alloca double*, align 8
  %dvdz = alloca double*, align 8
  %x8n = alloca double*, align 8
  %y8n = alloca double*, align 8
  %z8n = alloca double*, align 8
  %i = alloca i32, align 4
  %x1 = alloca [8 x double], align 16
  %y1 = alloca [8 x double], align 16
  %z1 = alloca [8 x double], align 16
  %pfx = alloca [8 x double], align 16
  %pfy = alloca [8 x double], align 16
  %pfz = alloca [8 x double], align 16
  %elemToNode = alloca i32*, align 8
  %ii = alloca i32, align 4
  %jj = alloca i32, align 4
  store double* %determ, double** %1, align 8, !tbaa !1
  store double %hgcoef, double* %2, align 8, !tbaa !7
  %3 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %4 = load i32, i32* %3, !tbaa !5
  store i32 %4, i32* %numElem, align 4, !tbaa !5
  %5 = load i32, i32* %numElem, align 4, !tbaa !5
  %6 = mul nsw i32 %5, 8
  store i32 %6, i32* %numElem8, align 4, !tbaa !5
  %7 = load i32, i32* %numElem8, align 4, !tbaa !5
  %8 = sext i32 %7 to i64
  %9 = call double* @_Z8AllocateIdEPT_m(i64 %8)
  store double* %9, double** %dvdx, align 8, !tbaa !1
  %10 = load i32, i32* %numElem8, align 4, !tbaa !5
  %11 = sext i32 %10 to i64
  %12 = call double* @_Z8AllocateIdEPT_m(i64 %11)
  store double* %12, double** %dvdy, align 8, !tbaa !1
  %13 = load i32, i32* %numElem8, align 4, !tbaa !5
  %14 = sext i32 %13 to i64
  %15 = call double* @_Z8AllocateIdEPT_m(i64 %14)
  store double* %15, double** %dvdz, align 8, !tbaa !1
  %16 = load i32, i32* %numElem8, align 4, !tbaa !5
  %17 = sext i32 %16 to i64
  %18 = call double* @_Z8AllocateIdEPT_m(i64 %17)
  store double* %18, double** %x8n, align 8, !tbaa !1
  %19 = load i32, i32* %numElem8, align 4, !tbaa !5
  %20 = sext i32 %19 to i64
  %21 = call double* @_Z8AllocateIdEPT_m(i64 %20)
  store double* %21, double** %y8n, align 8, !tbaa !1
  %22 = load i32, i32* %numElem8, align 4, !tbaa !5
  %23 = sext i32 %22 to i64
  %24 = call double* @_Z8AllocateIdEPT_m(i64 %23)
  store double* %24, double** %z8n, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %25

; <label>:25                                      ; preds = %131, %0
  %26 = load i32, i32* %i, align 4, !tbaa !5
  %27 = load i32, i32* %numElem, align 4, !tbaa !5
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %29, label %134

; <label>:29                                      ; preds = %25
  %30 = bitcast [8 x double]* %x1 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %30) #1
  %31 = bitcast [8 x double]* %y1 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %31) #1
  %32 = bitcast [8 x double]* %z1 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %32) #1
  %33 = bitcast [8 x double]* %pfx to i8*
  call void @llvm.lifetime.start(i64 64, i8* %33) #1
  %34 = bitcast [8 x double]* %pfy to i8*
  call void @llvm.lifetime.start(i64 64, i8* %34) #1
  %35 = bitcast [8 x double]* %pfz to i8*
  call void @llvm.lifetime.start(i64 64, i8* %35) #1
  %36 = load i32, i32* %i, align 4, !tbaa !5
  %37 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %36)
  store i32* %37, i32** %elemToNode, align 8, !tbaa !1
  %38 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %39 = getelementptr inbounds [8 x double], [8 x double]* %x1, i32 0, i32 0
  %40 = getelementptr inbounds [8 x double], [8 x double]* %y1, i32 0, i32 0
  %41 = getelementptr inbounds [8 x double], [8 x double]* %z1, i32 0, i32 0
  call void @_ZL29CollectDomainNodesToElemNodesPKiPdS1_S1_(i32* %38, double* %39, double* %40, double* %41)
  %42 = getelementptr inbounds [8 x double], [8 x double]* %pfx, i32 0, i32 0
  %43 = getelementptr inbounds [8 x double], [8 x double]* %pfy, i32 0, i32 0
  %44 = getelementptr inbounds [8 x double], [8 x double]* %pfz, i32 0, i32 0
  %45 = getelementptr inbounds [8 x double], [8 x double]* %x1, i32 0, i32 0
  %46 = getelementptr inbounds [8 x double], [8 x double]* %y1, i32 0, i32 0
  %47 = getelementptr inbounds [8 x double], [8 x double]* %z1, i32 0, i32 0
  call void @_ZL24CalcElemVolumeDerivativePdS_S_PKdS1_S1_(double* %42, double* %43, double* %44, double* %45, double* %46, double* %47)
  store i32 0, i32* %ii, align 4, !tbaa !5
  br label %48

; <label>:48                                      ; preds = %104, %29
  %49 = load i32, i32* %ii, align 4, !tbaa !5
  %50 = icmp slt i32 %49, 8
  br i1 %50, label %51, label %107

; <label>:51                                      ; preds = %48
  %52 = load i32, i32* %i, align 4, !tbaa !5
  %53 = mul nsw i32 8, %52
  %54 = load i32, i32* %ii, align 4, !tbaa !5
  %55 = add nsw i32 %53, %54
  store i32 %55, i32* %jj, align 4, !tbaa !5
  %56 = load i32, i32* %ii, align 4, !tbaa !5
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [8 x double], [8 x double]* %pfx, i32 0, i64 %57
  %59 = load double, double* %58, align 8, !tbaa !7
  %60 = load i32, i32* %jj, align 4, !tbaa !5
  %61 = sext i32 %60 to i64
  %62 = load double*, double** %dvdx, align 8, !tbaa !1
  %63 = getelementptr inbounds double, double* %62, i64 %61
  store double %59, double* %63, align 8, !tbaa !7
  %64 = load i32, i32* %ii, align 4, !tbaa !5
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [8 x double], [8 x double]* %pfy, i32 0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !7
  %68 = load i32, i32* %jj, align 4, !tbaa !5
  %69 = sext i32 %68 to i64
  %70 = load double*, double** %dvdy, align 8, !tbaa !1
  %71 = getelementptr inbounds double, double* %70, i64 %69
  store double %67, double* %71, align 8, !tbaa !7
  %72 = load i32, i32* %ii, align 4, !tbaa !5
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [8 x double], [8 x double]* %pfz, i32 0, i64 %73
  %75 = load double, double* %74, align 8, !tbaa !7
  %76 = load i32, i32* %jj, align 4, !tbaa !5
  %77 = sext i32 %76 to i64
  %78 = load double*, double** %dvdz, align 8, !tbaa !1
  %79 = getelementptr inbounds double, double* %78, i64 %77
  store double %75, double* %79, align 8, !tbaa !7
  %80 = load i32, i32* %ii, align 4, !tbaa !5
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [8 x double], [8 x double]* %x1, i32 0, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !7
  %84 = load i32, i32* %jj, align 4, !tbaa !5
  %85 = sext i32 %84 to i64
  %86 = load double*, double** %x8n, align 8, !tbaa !1
  %87 = getelementptr inbounds double, double* %86, i64 %85
  store double %83, double* %87, align 8, !tbaa !7
  %88 = load i32, i32* %ii, align 4, !tbaa !5
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [8 x double], [8 x double]* %y1, i32 0, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !7
  %92 = load i32, i32* %jj, align 4, !tbaa !5
  %93 = sext i32 %92 to i64
  %94 = load double*, double** %y8n, align 8, !tbaa !1
  %95 = getelementptr inbounds double, double* %94, i64 %93
  store double %91, double* %95, align 8, !tbaa !7
  %96 = load i32, i32* %ii, align 4, !tbaa !5
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [8 x double], [8 x double]* %z1, i32 0, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !7
  %100 = load i32, i32* %jj, align 4, !tbaa !5
  %101 = sext i32 %100 to i64
  %102 = load double*, double** %z8n, align 8, !tbaa !1
  %103 = getelementptr inbounds double, double* %102, i64 %101
  store double %99, double* %103, align 8, !tbaa !7
  br label %104

; <label>:104                                     ; preds = %51
  %105 = load i32, i32* %ii, align 4, !tbaa !5
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %ii, align 4, !tbaa !5
  br label %48

; <label>:107                                     ; preds = %48
  %108 = load i32, i32* %i, align 4, !tbaa !5
  %109 = call dereferenceable(8) double* @_ZN6Domain4voloEi(%struct.Domain* @domain, i32 %108)
  %110 = load double, double* %109, !tbaa !7
  %111 = load i32, i32* %i, align 4, !tbaa !5
  %112 = call dereferenceable(8) double* @_ZN6Domain1vEi(%struct.Domain* @domain, i32 %111)
  %113 = load double, double* %112, !tbaa !7
  %114 = fmul double %110, %113
  %115 = load i32, i32* %i, align 4, !tbaa !5
  %116 = sext i32 %115 to i64
  %117 = load double*, double** %1, align 8, !tbaa !1
  %118 = getelementptr inbounds double, double* %117, i64 %116
  store double %114, double* %118, align 8, !tbaa !7
  %119 = load i32, i32* %i, align 4, !tbaa !5
  %120 = call dereferenceable(8) double* @_ZN6Domain1vEi(%struct.Domain* @domain, i32 %119)
  %121 = load double, double* %120, !tbaa !7
  %122 = fcmp ole double %121, 0.000000e+00
  br i1 %122, label %123, label %124

; <label>:123                                     ; preds = %107
  call void @exit(i32 -1) #14
  unreachable

; <label>:124                                     ; preds = %107
  %125 = bitcast [8 x double]* %pfz to i8*
  call void @llvm.lifetime.end(i64 64, i8* %125) #1
  %126 = bitcast [8 x double]* %pfy to i8*
  call void @llvm.lifetime.end(i64 64, i8* %126) #1
  %127 = bitcast [8 x double]* %pfx to i8*
  call void @llvm.lifetime.end(i64 64, i8* %127) #1
  %128 = bitcast [8 x double]* %z1 to i8*
  call void @llvm.lifetime.end(i64 64, i8* %128) #1
  %129 = bitcast [8 x double]* %y1 to i8*
  call void @llvm.lifetime.end(i64 64, i8* %129) #1
  %130 = bitcast [8 x double]* %x1 to i8*
  call void @llvm.lifetime.end(i64 64, i8* %130) #1
  br label %131

; <label>:131                                     ; preds = %124
  %132 = load i32, i32* %i, align 4, !tbaa !5
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %i, align 4, !tbaa !5
  br label %25

; <label>:134                                     ; preds = %25
  %135 = load double, double* %2, align 8, !tbaa !7
  %136 = fcmp ogt double %135, 0.000000e+00
  br i1 %136, label %137, label %146

; <label>:137                                     ; preds = %134
  %138 = load double*, double** %1, align 8, !tbaa !1
  %139 = load double*, double** %x8n, align 8, !tbaa !1
  %140 = load double*, double** %y8n, align 8, !tbaa !1
  %141 = load double*, double** %z8n, align 8, !tbaa !1
  %142 = load double*, double** %dvdx, align 8, !tbaa !1
  %143 = load double*, double** %dvdy, align 8, !tbaa !1
  %144 = load double*, double** %dvdz, align 8, !tbaa !1
  %145 = load double, double* %2, align 8, !tbaa !7
  call void @_ZL28CalcFBHourglassForceForElemsPdS_S_S_S_S_S_d(double* %138, double* %139, double* %140, double* %141, double* %142, double* %143, double* %144, double %145)
  br label %146

; <label>:146                                     ; preds = %137, %134
  call void @_Z7ReleaseIdEvPPT_(double** %z8n)
  call void @_Z7ReleaseIdEvPPT_(double** %y8n)
  call void @_Z7ReleaseIdEvPPT_(double** %x8n)
  call void @_Z7ReleaseIdEvPPT_(double** %dvdz)
  call void @_Z7ReleaseIdEvPPT_(double** %dvdy)
  call void @_Z7ReleaseIdEvPPT_(double** %dvdx)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @_Z7ReleaseIdEvPPT_(double** %ptr) #4 comdat {
  %1 = alloca double**, align 8
  store double** %ptr, double*** %1, align 8, !tbaa !1
  %2 = load double**, double*** %1, align 8, !tbaa !1
  %3 = load double*, double** %2, align 8, !tbaa !1
  %4 = icmp ne double* %3, null
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %0
  %6 = load double**, double*** %1, align 8, !tbaa !1
  %7 = load double*, double** %6, align 8, !tbaa !1
  %8 = bitcast double* %7 to i8*
  call void @free(i8* %8) #1
  %9 = load double**, double*** %1, align 8, !tbaa !1
  store double* null, double** %9, align 8, !tbaa !1
  br label %10

; <label>:10                                      ; preds = %5, %0
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #5

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1pEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 38
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1qEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 39
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* %x, double* %y, double* %z, [8 x double]* %b, double* %volume) #6 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca [8 x double]*, align 8
  %5 = alloca double*, align 8
  %x0 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %x3 = alloca double, align 8
  %x4 = alloca double, align 8
  %x5 = alloca double, align 8
  %x6 = alloca double, align 8
  %x7 = alloca double, align 8
  %y0 = alloca double, align 8
  %y1 = alloca double, align 8
  %y2 = alloca double, align 8
  %y3 = alloca double, align 8
  %y4 = alloca double, align 8
  %y5 = alloca double, align 8
  %y6 = alloca double, align 8
  %y7 = alloca double, align 8
  %z0 = alloca double, align 8
  %z1 = alloca double, align 8
  %z2 = alloca double, align 8
  %z3 = alloca double, align 8
  %z4 = alloca double, align 8
  %z5 = alloca double, align 8
  %z6 = alloca double, align 8
  %z7 = alloca double, align 8
  %fjxxi = alloca double, align 8
  %fjxet = alloca double, align 8
  %fjxze = alloca double, align 8
  %fjyxi = alloca double, align 8
  %fjyet = alloca double, align 8
  %fjyze = alloca double, align 8
  %fjzxi = alloca double, align 8
  %fjzet = alloca double, align 8
  %fjzze = alloca double, align 8
  %cjxxi = alloca double, align 8
  %cjxet = alloca double, align 8
  %cjxze = alloca double, align 8
  %cjyxi = alloca double, align 8
  %cjyet = alloca double, align 8
  %cjyze = alloca double, align 8
  %cjzxi = alloca double, align 8
  %cjzet = alloca double, align 8
  %cjzze = alloca double, align 8
  store double* %x, double** %1, align 8, !tbaa !1
  store double* %y, double** %2, align 8, !tbaa !1
  store double* %z, double** %3, align 8, !tbaa !1
  store [8 x double]* %b, [8 x double]** %4, align 8, !tbaa !1
  store double* %volume, double** %5, align 8, !tbaa !1
  %6 = load double*, double** %1, align 8, !tbaa !1
  %7 = getelementptr inbounds double, double* %6, i64 0
  %8 = load double, double* %7, align 8, !tbaa !7
  store double %8, double* %x0, align 8, !tbaa !7
  %9 = load double*, double** %1, align 8, !tbaa !1
  %10 = getelementptr inbounds double, double* %9, i64 1
  %11 = load double, double* %10, align 8, !tbaa !7
  store double %11, double* %x1, align 8, !tbaa !7
  %12 = load double*, double** %1, align 8, !tbaa !1
  %13 = getelementptr inbounds double, double* %12, i64 2
  %14 = load double, double* %13, align 8, !tbaa !7
  store double %14, double* %x2, align 8, !tbaa !7
  %15 = load double*, double** %1, align 8, !tbaa !1
  %16 = getelementptr inbounds double, double* %15, i64 3
  %17 = load double, double* %16, align 8, !tbaa !7
  store double %17, double* %x3, align 8, !tbaa !7
  %18 = load double*, double** %1, align 8, !tbaa !1
  %19 = getelementptr inbounds double, double* %18, i64 4
  %20 = load double, double* %19, align 8, !tbaa !7
  store double %20, double* %x4, align 8, !tbaa !7
  %21 = load double*, double** %1, align 8, !tbaa !1
  %22 = getelementptr inbounds double, double* %21, i64 5
  %23 = load double, double* %22, align 8, !tbaa !7
  store double %23, double* %x5, align 8, !tbaa !7
  %24 = load double*, double** %1, align 8, !tbaa !1
  %25 = getelementptr inbounds double, double* %24, i64 6
  %26 = load double, double* %25, align 8, !tbaa !7
  store double %26, double* %x6, align 8, !tbaa !7
  %27 = load double*, double** %1, align 8, !tbaa !1
  %28 = getelementptr inbounds double, double* %27, i64 7
  %29 = load double, double* %28, align 8, !tbaa !7
  store double %29, double* %x7, align 8, !tbaa !7
  %30 = load double*, double** %2, align 8, !tbaa !1
  %31 = getelementptr inbounds double, double* %30, i64 0
  %32 = load double, double* %31, align 8, !tbaa !7
  store double %32, double* %y0, align 8, !tbaa !7
  %33 = load double*, double** %2, align 8, !tbaa !1
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8, !tbaa !7
  store double %35, double* %y1, align 8, !tbaa !7
  %36 = load double*, double** %2, align 8, !tbaa !1
  %37 = getelementptr inbounds double, double* %36, i64 2
  %38 = load double, double* %37, align 8, !tbaa !7
  store double %38, double* %y2, align 8, !tbaa !7
  %39 = load double*, double** %2, align 8, !tbaa !1
  %40 = getelementptr inbounds double, double* %39, i64 3
  %41 = load double, double* %40, align 8, !tbaa !7
  store double %41, double* %y3, align 8, !tbaa !7
  %42 = load double*, double** %2, align 8, !tbaa !1
  %43 = getelementptr inbounds double, double* %42, i64 4
  %44 = load double, double* %43, align 8, !tbaa !7
  store double %44, double* %y4, align 8, !tbaa !7
  %45 = load double*, double** %2, align 8, !tbaa !1
  %46 = getelementptr inbounds double, double* %45, i64 5
  %47 = load double, double* %46, align 8, !tbaa !7
  store double %47, double* %y5, align 8, !tbaa !7
  %48 = load double*, double** %2, align 8, !tbaa !1
  %49 = getelementptr inbounds double, double* %48, i64 6
  %50 = load double, double* %49, align 8, !tbaa !7
  store double %50, double* %y6, align 8, !tbaa !7
  %51 = load double*, double** %2, align 8, !tbaa !1
  %52 = getelementptr inbounds double, double* %51, i64 7
  %53 = load double, double* %52, align 8, !tbaa !7
  store double %53, double* %y7, align 8, !tbaa !7
  %54 = load double*, double** %3, align 8, !tbaa !1
  %55 = getelementptr inbounds double, double* %54, i64 0
  %56 = load double, double* %55, align 8, !tbaa !7
  store double %56, double* %z0, align 8, !tbaa !7
  %57 = load double*, double** %3, align 8, !tbaa !1
  %58 = getelementptr inbounds double, double* %57, i64 1
  %59 = load double, double* %58, align 8, !tbaa !7
  store double %59, double* %z1, align 8, !tbaa !7
  %60 = load double*, double** %3, align 8, !tbaa !1
  %61 = getelementptr inbounds double, double* %60, i64 2
  %62 = load double, double* %61, align 8, !tbaa !7
  store double %62, double* %z2, align 8, !tbaa !7
  %63 = load double*, double** %3, align 8, !tbaa !1
  %64 = getelementptr inbounds double, double* %63, i64 3
  %65 = load double, double* %64, align 8, !tbaa !7
  store double %65, double* %z3, align 8, !tbaa !7
  %66 = load double*, double** %3, align 8, !tbaa !1
  %67 = getelementptr inbounds double, double* %66, i64 4
  %68 = load double, double* %67, align 8, !tbaa !7
  store double %68, double* %z4, align 8, !tbaa !7
  %69 = load double*, double** %3, align 8, !tbaa !1
  %70 = getelementptr inbounds double, double* %69, i64 5
  %71 = load double, double* %70, align 8, !tbaa !7
  store double %71, double* %z5, align 8, !tbaa !7
  %72 = load double*, double** %3, align 8, !tbaa !1
  %73 = getelementptr inbounds double, double* %72, i64 6
  %74 = load double, double* %73, align 8, !tbaa !7
  store double %74, double* %z6, align 8, !tbaa !7
  %75 = load double*, double** %3, align 8, !tbaa !1
  %76 = getelementptr inbounds double, double* %75, i64 7
  %77 = load double, double* %76, align 8, !tbaa !7
  store double %77, double* %z7, align 8, !tbaa !7
  %78 = load double, double* %x6, align 8, !tbaa !7
  %79 = load double, double* %x0, align 8, !tbaa !7
  %80 = fsub double %78, %79
  %81 = load double, double* %x5, align 8, !tbaa !7
  %82 = load double, double* %x3, align 8, !tbaa !7
  %83 = fsub double %81, %82
  %84 = fadd double %80, %83
  %85 = load double, double* %x7, align 8, !tbaa !7
  %86 = load double, double* %x1, align 8, !tbaa !7
  %87 = fsub double %85, %86
  %88 = fsub double %84, %87
  %89 = load double, double* %x4, align 8, !tbaa !7
  %90 = load double, double* %x2, align 8, !tbaa !7
  %91 = fsub double %89, %90
  %92 = fsub double %88, %91
  %93 = fmul double 1.250000e-01, %92
  store double %93, double* %fjxxi, align 8, !tbaa !7
  %94 = load double, double* %x6, align 8, !tbaa !7
  %95 = load double, double* %x0, align 8, !tbaa !7
  %96 = fsub double %94, %95
  %97 = load double, double* %x5, align 8, !tbaa !7
  %98 = load double, double* %x3, align 8, !tbaa !7
  %99 = fsub double %97, %98
  %100 = fsub double %96, %99
  %101 = load double, double* %x7, align 8, !tbaa !7
  %102 = load double, double* %x1, align 8, !tbaa !7
  %103 = fsub double %101, %102
  %104 = fadd double %100, %103
  %105 = load double, double* %x4, align 8, !tbaa !7
  %106 = load double, double* %x2, align 8, !tbaa !7
  %107 = fsub double %105, %106
  %108 = fsub double %104, %107
  %109 = fmul double 1.250000e-01, %108
  store double %109, double* %fjxet, align 8, !tbaa !7
  %110 = load double, double* %x6, align 8, !tbaa !7
  %111 = load double, double* %x0, align 8, !tbaa !7
  %112 = fsub double %110, %111
  %113 = load double, double* %x5, align 8, !tbaa !7
  %114 = load double, double* %x3, align 8, !tbaa !7
  %115 = fsub double %113, %114
  %116 = fadd double %112, %115
  %117 = load double, double* %x7, align 8, !tbaa !7
  %118 = load double, double* %x1, align 8, !tbaa !7
  %119 = fsub double %117, %118
  %120 = fadd double %116, %119
  %121 = load double, double* %x4, align 8, !tbaa !7
  %122 = load double, double* %x2, align 8, !tbaa !7
  %123 = fsub double %121, %122
  %124 = fadd double %120, %123
  %125 = fmul double 1.250000e-01, %124
  store double %125, double* %fjxze, align 8, !tbaa !7
  %126 = load double, double* %y6, align 8, !tbaa !7
  %127 = load double, double* %y0, align 8, !tbaa !7
  %128 = fsub double %126, %127
  %129 = load double, double* %y5, align 8, !tbaa !7
  %130 = load double, double* %y3, align 8, !tbaa !7
  %131 = fsub double %129, %130
  %132 = fadd double %128, %131
  %133 = load double, double* %y7, align 8, !tbaa !7
  %134 = load double, double* %y1, align 8, !tbaa !7
  %135 = fsub double %133, %134
  %136 = fsub double %132, %135
  %137 = load double, double* %y4, align 8, !tbaa !7
  %138 = load double, double* %y2, align 8, !tbaa !7
  %139 = fsub double %137, %138
  %140 = fsub double %136, %139
  %141 = fmul double 1.250000e-01, %140
  store double %141, double* %fjyxi, align 8, !tbaa !7
  %142 = load double, double* %y6, align 8, !tbaa !7
  %143 = load double, double* %y0, align 8, !tbaa !7
  %144 = fsub double %142, %143
  %145 = load double, double* %y5, align 8, !tbaa !7
  %146 = load double, double* %y3, align 8, !tbaa !7
  %147 = fsub double %145, %146
  %148 = fsub double %144, %147
  %149 = load double, double* %y7, align 8, !tbaa !7
  %150 = load double, double* %y1, align 8, !tbaa !7
  %151 = fsub double %149, %150
  %152 = fadd double %148, %151
  %153 = load double, double* %y4, align 8, !tbaa !7
  %154 = load double, double* %y2, align 8, !tbaa !7
  %155 = fsub double %153, %154
  %156 = fsub double %152, %155
  %157 = fmul double 1.250000e-01, %156
  store double %157, double* %fjyet, align 8, !tbaa !7
  %158 = load double, double* %y6, align 8, !tbaa !7
  %159 = load double, double* %y0, align 8, !tbaa !7
  %160 = fsub double %158, %159
  %161 = load double, double* %y5, align 8, !tbaa !7
  %162 = load double, double* %y3, align 8, !tbaa !7
  %163 = fsub double %161, %162
  %164 = fadd double %160, %163
  %165 = load double, double* %y7, align 8, !tbaa !7
  %166 = load double, double* %y1, align 8, !tbaa !7
  %167 = fsub double %165, %166
  %168 = fadd double %164, %167
  %169 = load double, double* %y4, align 8, !tbaa !7
  %170 = load double, double* %y2, align 8, !tbaa !7
  %171 = fsub double %169, %170
  %172 = fadd double %168, %171
  %173 = fmul double 1.250000e-01, %172
  store double %173, double* %fjyze, align 8, !tbaa !7
  %174 = load double, double* %z6, align 8, !tbaa !7
  %175 = load double, double* %z0, align 8, !tbaa !7
  %176 = fsub double %174, %175
  %177 = load double, double* %z5, align 8, !tbaa !7
  %178 = load double, double* %z3, align 8, !tbaa !7
  %179 = fsub double %177, %178
  %180 = fadd double %176, %179
  %181 = load double, double* %z7, align 8, !tbaa !7
  %182 = load double, double* %z1, align 8, !tbaa !7
  %183 = fsub double %181, %182
  %184 = fsub double %180, %183
  %185 = load double, double* %z4, align 8, !tbaa !7
  %186 = load double, double* %z2, align 8, !tbaa !7
  %187 = fsub double %185, %186
  %188 = fsub double %184, %187
  %189 = fmul double 1.250000e-01, %188
  store double %189, double* %fjzxi, align 8, !tbaa !7
  %190 = load double, double* %z6, align 8, !tbaa !7
  %191 = load double, double* %z0, align 8, !tbaa !7
  %192 = fsub double %190, %191
  %193 = load double, double* %z5, align 8, !tbaa !7
  %194 = load double, double* %z3, align 8, !tbaa !7
  %195 = fsub double %193, %194
  %196 = fsub double %192, %195
  %197 = load double, double* %z7, align 8, !tbaa !7
  %198 = load double, double* %z1, align 8, !tbaa !7
  %199 = fsub double %197, %198
  %200 = fadd double %196, %199
  %201 = load double, double* %z4, align 8, !tbaa !7
  %202 = load double, double* %z2, align 8, !tbaa !7
  %203 = fsub double %201, %202
  %204 = fsub double %200, %203
  %205 = fmul double 1.250000e-01, %204
  store double %205, double* %fjzet, align 8, !tbaa !7
  %206 = load double, double* %z6, align 8, !tbaa !7
  %207 = load double, double* %z0, align 8, !tbaa !7
  %208 = fsub double %206, %207
  %209 = load double, double* %z5, align 8, !tbaa !7
  %210 = load double, double* %z3, align 8, !tbaa !7
  %211 = fsub double %209, %210
  %212 = fadd double %208, %211
  %213 = load double, double* %z7, align 8, !tbaa !7
  %214 = load double, double* %z1, align 8, !tbaa !7
  %215 = fsub double %213, %214
  %216 = fadd double %212, %215
  %217 = load double, double* %z4, align 8, !tbaa !7
  %218 = load double, double* %z2, align 8, !tbaa !7
  %219 = fsub double %217, %218
  %220 = fadd double %216, %219
  %221 = fmul double 1.250000e-01, %220
  store double %221, double* %fjzze, align 8, !tbaa !7
  %222 = load double, double* %fjyet, align 8, !tbaa !7
  %223 = load double, double* %fjzze, align 8, !tbaa !7
  %224 = fmul double %222, %223
  %225 = load double, double* %fjzet, align 8, !tbaa !7
  %226 = load double, double* %fjyze, align 8, !tbaa !7
  %227 = fmul double %225, %226
  %228 = fsub double %224, %227
  store double %228, double* %cjxxi, align 8, !tbaa !7
  %229 = load double, double* %fjyxi, align 8, !tbaa !7
  %230 = load double, double* %fjzze, align 8, !tbaa !7
  %231 = fmul double %229, %230
  %232 = fsub double -0.000000e+00, %231
  %233 = load double, double* %fjzxi, align 8, !tbaa !7
  %234 = load double, double* %fjyze, align 8, !tbaa !7
  %235 = fmul double %233, %234
  %236 = fadd double %232, %235
  store double %236, double* %cjxet, align 8, !tbaa !7
  %237 = load double, double* %fjyxi, align 8, !tbaa !7
  %238 = load double, double* %fjzet, align 8, !tbaa !7
  %239 = fmul double %237, %238
  %240 = load double, double* %fjzxi, align 8, !tbaa !7
  %241 = load double, double* %fjyet, align 8, !tbaa !7
  %242 = fmul double %240, %241
  %243 = fsub double %239, %242
  store double %243, double* %cjxze, align 8, !tbaa !7
  %244 = load double, double* %fjxet, align 8, !tbaa !7
  %245 = load double, double* %fjzze, align 8, !tbaa !7
  %246 = fmul double %244, %245
  %247 = fsub double -0.000000e+00, %246
  %248 = load double, double* %fjzet, align 8, !tbaa !7
  %249 = load double, double* %fjxze, align 8, !tbaa !7
  %250 = fmul double %248, %249
  %251 = fadd double %247, %250
  store double %251, double* %cjyxi, align 8, !tbaa !7
  %252 = load double, double* %fjxxi, align 8, !tbaa !7
  %253 = load double, double* %fjzze, align 8, !tbaa !7
  %254 = fmul double %252, %253
  %255 = load double, double* %fjzxi, align 8, !tbaa !7
  %256 = load double, double* %fjxze, align 8, !tbaa !7
  %257 = fmul double %255, %256
  %258 = fsub double %254, %257
  store double %258, double* %cjyet, align 8, !tbaa !7
  %259 = load double, double* %fjxxi, align 8, !tbaa !7
  %260 = load double, double* %fjzet, align 8, !tbaa !7
  %261 = fmul double %259, %260
  %262 = fsub double -0.000000e+00, %261
  %263 = load double, double* %fjzxi, align 8, !tbaa !7
  %264 = load double, double* %fjxet, align 8, !tbaa !7
  %265 = fmul double %263, %264
  %266 = fadd double %262, %265
  store double %266, double* %cjyze, align 8, !tbaa !7
  %267 = load double, double* %fjxet, align 8, !tbaa !7
  %268 = load double, double* %fjyze, align 8, !tbaa !7
  %269 = fmul double %267, %268
  %270 = load double, double* %fjyet, align 8, !tbaa !7
  %271 = load double, double* %fjxze, align 8, !tbaa !7
  %272 = fmul double %270, %271
  %273 = fsub double %269, %272
  store double %273, double* %cjzxi, align 8, !tbaa !7
  %274 = load double, double* %fjxxi, align 8, !tbaa !7
  %275 = load double, double* %fjyze, align 8, !tbaa !7
  %276 = fmul double %274, %275
  %277 = fsub double -0.000000e+00, %276
  %278 = load double, double* %fjyxi, align 8, !tbaa !7
  %279 = load double, double* %fjxze, align 8, !tbaa !7
  %280 = fmul double %278, %279
  %281 = fadd double %277, %280
  store double %281, double* %cjzet, align 8, !tbaa !7
  %282 = load double, double* %fjxxi, align 8, !tbaa !7
  %283 = load double, double* %fjyet, align 8, !tbaa !7
  %284 = fmul double %282, %283
  %285 = load double, double* %fjyxi, align 8, !tbaa !7
  %286 = load double, double* %fjxet, align 8, !tbaa !7
  %287 = fmul double %285, %286
  %288 = fsub double %284, %287
  store double %288, double* %cjzze, align 8, !tbaa !7
  %289 = load double, double* %cjxxi, align 8, !tbaa !7
  %290 = fsub double -0.000000e+00, %289
  %291 = load double, double* %cjxet, align 8, !tbaa !7
  %292 = fsub double %290, %291
  %293 = load double, double* %cjxze, align 8, !tbaa !7
  %294 = fsub double %292, %293
  %295 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %296 = getelementptr inbounds [8 x double], [8 x double]* %295, i64 0
  %297 = getelementptr inbounds [8 x double], [8 x double]* %296, i32 0, i64 0
  store double %294, double* %297, align 8, !tbaa !7
  %298 = load double, double* %cjxxi, align 8, !tbaa !7
  %299 = load double, double* %cjxet, align 8, !tbaa !7
  %300 = fsub double %298, %299
  %301 = load double, double* %cjxze, align 8, !tbaa !7
  %302 = fsub double %300, %301
  %303 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %304 = getelementptr inbounds [8 x double], [8 x double]* %303, i64 0
  %305 = getelementptr inbounds [8 x double], [8 x double]* %304, i32 0, i64 1
  store double %302, double* %305, align 8, !tbaa !7
  %306 = load double, double* %cjxxi, align 8, !tbaa !7
  %307 = load double, double* %cjxet, align 8, !tbaa !7
  %308 = fadd double %306, %307
  %309 = load double, double* %cjxze, align 8, !tbaa !7
  %310 = fsub double %308, %309
  %311 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %312 = getelementptr inbounds [8 x double], [8 x double]* %311, i64 0
  %313 = getelementptr inbounds [8 x double], [8 x double]* %312, i32 0, i64 2
  store double %310, double* %313, align 8, !tbaa !7
  %314 = load double, double* %cjxxi, align 8, !tbaa !7
  %315 = fsub double -0.000000e+00, %314
  %316 = load double, double* %cjxet, align 8, !tbaa !7
  %317 = fadd double %315, %316
  %318 = load double, double* %cjxze, align 8, !tbaa !7
  %319 = fsub double %317, %318
  %320 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %321 = getelementptr inbounds [8 x double], [8 x double]* %320, i64 0
  %322 = getelementptr inbounds [8 x double], [8 x double]* %321, i32 0, i64 3
  store double %319, double* %322, align 8, !tbaa !7
  %323 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %324 = getelementptr inbounds [8 x double], [8 x double]* %323, i64 0
  %325 = getelementptr inbounds [8 x double], [8 x double]* %324, i32 0, i64 2
  %326 = load double, double* %325, align 8, !tbaa !7
  %327 = fsub double -0.000000e+00, %326
  %328 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %329 = getelementptr inbounds [8 x double], [8 x double]* %328, i64 0
  %330 = getelementptr inbounds [8 x double], [8 x double]* %329, i32 0, i64 4
  store double %327, double* %330, align 8, !tbaa !7
  %331 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %332 = getelementptr inbounds [8 x double], [8 x double]* %331, i64 0
  %333 = getelementptr inbounds [8 x double], [8 x double]* %332, i32 0, i64 3
  %334 = load double, double* %333, align 8, !tbaa !7
  %335 = fsub double -0.000000e+00, %334
  %336 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %337 = getelementptr inbounds [8 x double], [8 x double]* %336, i64 0
  %338 = getelementptr inbounds [8 x double], [8 x double]* %337, i32 0, i64 5
  store double %335, double* %338, align 8, !tbaa !7
  %339 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %340 = getelementptr inbounds [8 x double], [8 x double]* %339, i64 0
  %341 = getelementptr inbounds [8 x double], [8 x double]* %340, i32 0, i64 0
  %342 = load double, double* %341, align 8, !tbaa !7
  %343 = fsub double -0.000000e+00, %342
  %344 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %345 = getelementptr inbounds [8 x double], [8 x double]* %344, i64 0
  %346 = getelementptr inbounds [8 x double], [8 x double]* %345, i32 0, i64 6
  store double %343, double* %346, align 8, !tbaa !7
  %347 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %348 = getelementptr inbounds [8 x double], [8 x double]* %347, i64 0
  %349 = getelementptr inbounds [8 x double], [8 x double]* %348, i32 0, i64 1
  %350 = load double, double* %349, align 8, !tbaa !7
  %351 = fsub double -0.000000e+00, %350
  %352 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %353 = getelementptr inbounds [8 x double], [8 x double]* %352, i64 0
  %354 = getelementptr inbounds [8 x double], [8 x double]* %353, i32 0, i64 7
  store double %351, double* %354, align 8, !tbaa !7
  %355 = load double, double* %cjyxi, align 8, !tbaa !7
  %356 = fsub double -0.000000e+00, %355
  %357 = load double, double* %cjyet, align 8, !tbaa !7
  %358 = fsub double %356, %357
  %359 = load double, double* %cjyze, align 8, !tbaa !7
  %360 = fsub double %358, %359
  %361 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %362 = getelementptr inbounds [8 x double], [8 x double]* %361, i64 1
  %363 = getelementptr inbounds [8 x double], [8 x double]* %362, i32 0, i64 0
  store double %360, double* %363, align 8, !tbaa !7
  %364 = load double, double* %cjyxi, align 8, !tbaa !7
  %365 = load double, double* %cjyet, align 8, !tbaa !7
  %366 = fsub double %364, %365
  %367 = load double, double* %cjyze, align 8, !tbaa !7
  %368 = fsub double %366, %367
  %369 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %370 = getelementptr inbounds [8 x double], [8 x double]* %369, i64 1
  %371 = getelementptr inbounds [8 x double], [8 x double]* %370, i32 0, i64 1
  store double %368, double* %371, align 8, !tbaa !7
  %372 = load double, double* %cjyxi, align 8, !tbaa !7
  %373 = load double, double* %cjyet, align 8, !tbaa !7
  %374 = fadd double %372, %373
  %375 = load double, double* %cjyze, align 8, !tbaa !7
  %376 = fsub double %374, %375
  %377 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %378 = getelementptr inbounds [8 x double], [8 x double]* %377, i64 1
  %379 = getelementptr inbounds [8 x double], [8 x double]* %378, i32 0, i64 2
  store double %376, double* %379, align 8, !tbaa !7
  %380 = load double, double* %cjyxi, align 8, !tbaa !7
  %381 = fsub double -0.000000e+00, %380
  %382 = load double, double* %cjyet, align 8, !tbaa !7
  %383 = fadd double %381, %382
  %384 = load double, double* %cjyze, align 8, !tbaa !7
  %385 = fsub double %383, %384
  %386 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %387 = getelementptr inbounds [8 x double], [8 x double]* %386, i64 1
  %388 = getelementptr inbounds [8 x double], [8 x double]* %387, i32 0, i64 3
  store double %385, double* %388, align 8, !tbaa !7
  %389 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %390 = getelementptr inbounds [8 x double], [8 x double]* %389, i64 1
  %391 = getelementptr inbounds [8 x double], [8 x double]* %390, i32 0, i64 2
  %392 = load double, double* %391, align 8, !tbaa !7
  %393 = fsub double -0.000000e+00, %392
  %394 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %395 = getelementptr inbounds [8 x double], [8 x double]* %394, i64 1
  %396 = getelementptr inbounds [8 x double], [8 x double]* %395, i32 0, i64 4
  store double %393, double* %396, align 8, !tbaa !7
  %397 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %398 = getelementptr inbounds [8 x double], [8 x double]* %397, i64 1
  %399 = getelementptr inbounds [8 x double], [8 x double]* %398, i32 0, i64 3
  %400 = load double, double* %399, align 8, !tbaa !7
  %401 = fsub double -0.000000e+00, %400
  %402 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %403 = getelementptr inbounds [8 x double], [8 x double]* %402, i64 1
  %404 = getelementptr inbounds [8 x double], [8 x double]* %403, i32 0, i64 5
  store double %401, double* %404, align 8, !tbaa !7
  %405 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %406 = getelementptr inbounds [8 x double], [8 x double]* %405, i64 1
  %407 = getelementptr inbounds [8 x double], [8 x double]* %406, i32 0, i64 0
  %408 = load double, double* %407, align 8, !tbaa !7
  %409 = fsub double -0.000000e+00, %408
  %410 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %411 = getelementptr inbounds [8 x double], [8 x double]* %410, i64 1
  %412 = getelementptr inbounds [8 x double], [8 x double]* %411, i32 0, i64 6
  store double %409, double* %412, align 8, !tbaa !7
  %413 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %414 = getelementptr inbounds [8 x double], [8 x double]* %413, i64 1
  %415 = getelementptr inbounds [8 x double], [8 x double]* %414, i32 0, i64 1
  %416 = load double, double* %415, align 8, !tbaa !7
  %417 = fsub double -0.000000e+00, %416
  %418 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %419 = getelementptr inbounds [8 x double], [8 x double]* %418, i64 1
  %420 = getelementptr inbounds [8 x double], [8 x double]* %419, i32 0, i64 7
  store double %417, double* %420, align 8, !tbaa !7
  %421 = load double, double* %cjzxi, align 8, !tbaa !7
  %422 = fsub double -0.000000e+00, %421
  %423 = load double, double* %cjzet, align 8, !tbaa !7
  %424 = fsub double %422, %423
  %425 = load double, double* %cjzze, align 8, !tbaa !7
  %426 = fsub double %424, %425
  %427 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %428 = getelementptr inbounds [8 x double], [8 x double]* %427, i64 2
  %429 = getelementptr inbounds [8 x double], [8 x double]* %428, i32 0, i64 0
  store double %426, double* %429, align 8, !tbaa !7
  %430 = load double, double* %cjzxi, align 8, !tbaa !7
  %431 = load double, double* %cjzet, align 8, !tbaa !7
  %432 = fsub double %430, %431
  %433 = load double, double* %cjzze, align 8, !tbaa !7
  %434 = fsub double %432, %433
  %435 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %436 = getelementptr inbounds [8 x double], [8 x double]* %435, i64 2
  %437 = getelementptr inbounds [8 x double], [8 x double]* %436, i32 0, i64 1
  store double %434, double* %437, align 8, !tbaa !7
  %438 = load double, double* %cjzxi, align 8, !tbaa !7
  %439 = load double, double* %cjzet, align 8, !tbaa !7
  %440 = fadd double %438, %439
  %441 = load double, double* %cjzze, align 8, !tbaa !7
  %442 = fsub double %440, %441
  %443 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %444 = getelementptr inbounds [8 x double], [8 x double]* %443, i64 2
  %445 = getelementptr inbounds [8 x double], [8 x double]* %444, i32 0, i64 2
  store double %442, double* %445, align 8, !tbaa !7
  %446 = load double, double* %cjzxi, align 8, !tbaa !7
  %447 = fsub double -0.000000e+00, %446
  %448 = load double, double* %cjzet, align 8, !tbaa !7
  %449 = fadd double %447, %448
  %450 = load double, double* %cjzze, align 8, !tbaa !7
  %451 = fsub double %449, %450
  %452 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %453 = getelementptr inbounds [8 x double], [8 x double]* %452, i64 2
  %454 = getelementptr inbounds [8 x double], [8 x double]* %453, i32 0, i64 3
  store double %451, double* %454, align 8, !tbaa !7
  %455 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %456 = getelementptr inbounds [8 x double], [8 x double]* %455, i64 2
  %457 = getelementptr inbounds [8 x double], [8 x double]* %456, i32 0, i64 2
  %458 = load double, double* %457, align 8, !tbaa !7
  %459 = fsub double -0.000000e+00, %458
  %460 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %461 = getelementptr inbounds [8 x double], [8 x double]* %460, i64 2
  %462 = getelementptr inbounds [8 x double], [8 x double]* %461, i32 0, i64 4
  store double %459, double* %462, align 8, !tbaa !7
  %463 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %464 = getelementptr inbounds [8 x double], [8 x double]* %463, i64 2
  %465 = getelementptr inbounds [8 x double], [8 x double]* %464, i32 0, i64 3
  %466 = load double, double* %465, align 8, !tbaa !7
  %467 = fsub double -0.000000e+00, %466
  %468 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %469 = getelementptr inbounds [8 x double], [8 x double]* %468, i64 2
  %470 = getelementptr inbounds [8 x double], [8 x double]* %469, i32 0, i64 5
  store double %467, double* %470, align 8, !tbaa !7
  %471 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %472 = getelementptr inbounds [8 x double], [8 x double]* %471, i64 2
  %473 = getelementptr inbounds [8 x double], [8 x double]* %472, i32 0, i64 0
  %474 = load double, double* %473, align 8, !tbaa !7
  %475 = fsub double -0.000000e+00, %474
  %476 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %477 = getelementptr inbounds [8 x double], [8 x double]* %476, i64 2
  %478 = getelementptr inbounds [8 x double], [8 x double]* %477, i32 0, i64 6
  store double %475, double* %478, align 8, !tbaa !7
  %479 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %480 = getelementptr inbounds [8 x double], [8 x double]* %479, i64 2
  %481 = getelementptr inbounds [8 x double], [8 x double]* %480, i32 0, i64 1
  %482 = load double, double* %481, align 8, !tbaa !7
  %483 = fsub double -0.000000e+00, %482
  %484 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %485 = getelementptr inbounds [8 x double], [8 x double]* %484, i64 2
  %486 = getelementptr inbounds [8 x double], [8 x double]* %485, i32 0, i64 7
  store double %483, double* %486, align 8, !tbaa !7
  %487 = load double, double* %fjxet, align 8, !tbaa !7
  %488 = load double, double* %cjxet, align 8, !tbaa !7
  %489 = fmul double %487, %488
  %490 = load double, double* %fjyet, align 8, !tbaa !7
  %491 = load double, double* %cjyet, align 8, !tbaa !7
  %492 = fmul double %490, %491
  %493 = fadd double %489, %492
  %494 = load double, double* %fjzet, align 8, !tbaa !7
  %495 = load double, double* %cjzet, align 8, !tbaa !7
  %496 = fmul double %494, %495
  %497 = fadd double %493, %496
  %498 = fmul double 8.000000e+00, %497
  %499 = load double*, double** %5, align 8, !tbaa !1
  store double %498, double* %499, align 8, !tbaa !7
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL19CalcElemNodeNormalsPdS_S_PKdS1_S1_(double* %pfx, double* %pfy, double* %pfz, double* %x, double* %y, double* %z) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %i = alloca i32, align 4
  store double* %pfx, double** %1, align 8, !tbaa !1
  store double* %pfy, double** %2, align 8, !tbaa !1
  store double* %pfz, double** %3, align 8, !tbaa !1
  store double* %x, double** %4, align 8, !tbaa !1
  store double* %y, double** %5, align 8, !tbaa !1
  store double* %z, double** %6, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %7

; <label>:7                                       ; preds = %23, %0
  %8 = load i32, i32* %i, align 4, !tbaa !5
  %9 = icmp slt i32 %8, 8
  br i1 %9, label %10, label %26

; <label>:10                                      ; preds = %7
  %11 = load i32, i32* %i, align 4, !tbaa !5
  %12 = sext i32 %11 to i64
  %13 = load double*, double** %1, align 8, !tbaa !1
  %14 = getelementptr inbounds double, double* %13, i64 %12
  store double 0.000000e+00, double* %14, align 8, !tbaa !7
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %16 = sext i32 %15 to i64
  %17 = load double*, double** %2, align 8, !tbaa !1
  %18 = getelementptr inbounds double, double* %17, i64 %16
  store double 0.000000e+00, double* %18, align 8, !tbaa !7
  %19 = load i32, i32* %i, align 4, !tbaa !5
  %20 = sext i32 %19 to i64
  %21 = load double*, double** %3, align 8, !tbaa !1
  %22 = getelementptr inbounds double, double* %21, i64 %20
  store double 0.000000e+00, double* %22, align 8, !tbaa !7
  br label %23

; <label>:23                                      ; preds = %10
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %i, align 4, !tbaa !5
  br label %7

; <label>:26                                      ; preds = %7
  %27 = load double*, double** %1, align 8, !tbaa !1
  %28 = getelementptr inbounds double, double* %27, i64 0
  %29 = load double*, double** %2, align 8, !tbaa !1
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double*, double** %3, align 8, !tbaa !1
  %32 = getelementptr inbounds double, double* %31, i64 0
  %33 = load double*, double** %1, align 8, !tbaa !1
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double*, double** %2, align 8, !tbaa !1
  %36 = getelementptr inbounds double, double* %35, i64 1
  %37 = load double*, double** %3, align 8, !tbaa !1
  %38 = getelementptr inbounds double, double* %37, i64 1
  %39 = load double*, double** %1, align 8, !tbaa !1
  %40 = getelementptr inbounds double, double* %39, i64 2
  %41 = load double*, double** %2, align 8, !tbaa !1
  %42 = getelementptr inbounds double, double* %41, i64 2
  %43 = load double*, double** %3, align 8, !tbaa !1
  %44 = getelementptr inbounds double, double* %43, i64 2
  %45 = load double*, double** %1, align 8, !tbaa !1
  %46 = getelementptr inbounds double, double* %45, i64 3
  %47 = load double*, double** %2, align 8, !tbaa !1
  %48 = getelementptr inbounds double, double* %47, i64 3
  %49 = load double*, double** %3, align 8, !tbaa !1
  %50 = getelementptr inbounds double, double* %49, i64 3
  %51 = load double*, double** %4, align 8, !tbaa !1
  %52 = getelementptr inbounds double, double* %51, i64 0
  %53 = load double, double* %52, align 8, !tbaa !7
  %54 = load double*, double** %5, align 8, !tbaa !1
  %55 = getelementptr inbounds double, double* %54, i64 0
  %56 = load double, double* %55, align 8, !tbaa !7
  %57 = load double*, double** %6, align 8, !tbaa !1
  %58 = getelementptr inbounds double, double* %57, i64 0
  %59 = load double, double* %58, align 8, !tbaa !7
  %60 = load double*, double** %4, align 8, !tbaa !1
  %61 = getelementptr inbounds double, double* %60, i64 1
  %62 = load double, double* %61, align 8, !tbaa !7
  %63 = load double*, double** %5, align 8, !tbaa !1
  %64 = getelementptr inbounds double, double* %63, i64 1
  %65 = load double, double* %64, align 8, !tbaa !7
  %66 = load double*, double** %6, align 8, !tbaa !1
  %67 = getelementptr inbounds double, double* %66, i64 1
  %68 = load double, double* %67, align 8, !tbaa !7
  %69 = load double*, double** %4, align 8, !tbaa !1
  %70 = getelementptr inbounds double, double* %69, i64 2
  %71 = load double, double* %70, align 8, !tbaa !7
  %72 = load double*, double** %5, align 8, !tbaa !1
  %73 = getelementptr inbounds double, double* %72, i64 2
  %74 = load double, double* %73, align 8, !tbaa !7
  %75 = load double*, double** %6, align 8, !tbaa !1
  %76 = getelementptr inbounds double, double* %75, i64 2
  %77 = load double, double* %76, align 8, !tbaa !7
  %78 = load double*, double** %4, align 8, !tbaa !1
  %79 = getelementptr inbounds double, double* %78, i64 3
  %80 = load double, double* %79, align 8, !tbaa !7
  %81 = load double*, double** %5, align 8, !tbaa !1
  %82 = getelementptr inbounds double, double* %81, i64 3
  %83 = load double, double* %82, align 8, !tbaa !7
  %84 = load double*, double** %6, align 8, !tbaa !1
  %85 = getelementptr inbounds double, double* %84, i64 3
  %86 = load double, double* %85, align 8, !tbaa !7
  call void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %28, double* %30, double* %32, double* %34, double* %36, double* %38, double* %40, double* %42, double* %44, double* %46, double* %48, double* %50, double %53, double %56, double %59, double %62, double %65, double %68, double %71, double %74, double %77, double %80, double %83, double %86)
  %87 = load double*, double** %1, align 8, !tbaa !1
  %88 = getelementptr inbounds double, double* %87, i64 0
  %89 = load double*, double** %2, align 8, !tbaa !1
  %90 = getelementptr inbounds double, double* %89, i64 0
  %91 = load double*, double** %3, align 8, !tbaa !1
  %92 = getelementptr inbounds double, double* %91, i64 0
  %93 = load double*, double** %1, align 8, !tbaa !1
  %94 = getelementptr inbounds double, double* %93, i64 4
  %95 = load double*, double** %2, align 8, !tbaa !1
  %96 = getelementptr inbounds double, double* %95, i64 4
  %97 = load double*, double** %3, align 8, !tbaa !1
  %98 = getelementptr inbounds double, double* %97, i64 4
  %99 = load double*, double** %1, align 8, !tbaa !1
  %100 = getelementptr inbounds double, double* %99, i64 5
  %101 = load double*, double** %2, align 8, !tbaa !1
  %102 = getelementptr inbounds double, double* %101, i64 5
  %103 = load double*, double** %3, align 8, !tbaa !1
  %104 = getelementptr inbounds double, double* %103, i64 5
  %105 = load double*, double** %1, align 8, !tbaa !1
  %106 = getelementptr inbounds double, double* %105, i64 1
  %107 = load double*, double** %2, align 8, !tbaa !1
  %108 = getelementptr inbounds double, double* %107, i64 1
  %109 = load double*, double** %3, align 8, !tbaa !1
  %110 = getelementptr inbounds double, double* %109, i64 1
  %111 = load double*, double** %4, align 8, !tbaa !1
  %112 = getelementptr inbounds double, double* %111, i64 0
  %113 = load double, double* %112, align 8, !tbaa !7
  %114 = load double*, double** %5, align 8, !tbaa !1
  %115 = getelementptr inbounds double, double* %114, i64 0
  %116 = load double, double* %115, align 8, !tbaa !7
  %117 = load double*, double** %6, align 8, !tbaa !1
  %118 = getelementptr inbounds double, double* %117, i64 0
  %119 = load double, double* %118, align 8, !tbaa !7
  %120 = load double*, double** %4, align 8, !tbaa !1
  %121 = getelementptr inbounds double, double* %120, i64 4
  %122 = load double, double* %121, align 8, !tbaa !7
  %123 = load double*, double** %5, align 8, !tbaa !1
  %124 = getelementptr inbounds double, double* %123, i64 4
  %125 = load double, double* %124, align 8, !tbaa !7
  %126 = load double*, double** %6, align 8, !tbaa !1
  %127 = getelementptr inbounds double, double* %126, i64 4
  %128 = load double, double* %127, align 8, !tbaa !7
  %129 = load double*, double** %4, align 8, !tbaa !1
  %130 = getelementptr inbounds double, double* %129, i64 5
  %131 = load double, double* %130, align 8, !tbaa !7
  %132 = load double*, double** %5, align 8, !tbaa !1
  %133 = getelementptr inbounds double, double* %132, i64 5
  %134 = load double, double* %133, align 8, !tbaa !7
  %135 = load double*, double** %6, align 8, !tbaa !1
  %136 = getelementptr inbounds double, double* %135, i64 5
  %137 = load double, double* %136, align 8, !tbaa !7
  %138 = load double*, double** %4, align 8, !tbaa !1
  %139 = getelementptr inbounds double, double* %138, i64 1
  %140 = load double, double* %139, align 8, !tbaa !7
  %141 = load double*, double** %5, align 8, !tbaa !1
  %142 = getelementptr inbounds double, double* %141, i64 1
  %143 = load double, double* %142, align 8, !tbaa !7
  %144 = load double*, double** %6, align 8, !tbaa !1
  %145 = getelementptr inbounds double, double* %144, i64 1
  %146 = load double, double* %145, align 8, !tbaa !7
  call void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %88, double* %90, double* %92, double* %94, double* %96, double* %98, double* %100, double* %102, double* %104, double* %106, double* %108, double* %110, double %113, double %116, double %119, double %122, double %125, double %128, double %131, double %134, double %137, double %140, double %143, double %146)
  %147 = load double*, double** %1, align 8, !tbaa !1
  %148 = getelementptr inbounds double, double* %147, i64 1
  %149 = load double*, double** %2, align 8, !tbaa !1
  %150 = getelementptr inbounds double, double* %149, i64 1
  %151 = load double*, double** %3, align 8, !tbaa !1
  %152 = getelementptr inbounds double, double* %151, i64 1
  %153 = load double*, double** %1, align 8, !tbaa !1
  %154 = getelementptr inbounds double, double* %153, i64 5
  %155 = load double*, double** %2, align 8, !tbaa !1
  %156 = getelementptr inbounds double, double* %155, i64 5
  %157 = load double*, double** %3, align 8, !tbaa !1
  %158 = getelementptr inbounds double, double* %157, i64 5
  %159 = load double*, double** %1, align 8, !tbaa !1
  %160 = getelementptr inbounds double, double* %159, i64 6
  %161 = load double*, double** %2, align 8, !tbaa !1
  %162 = getelementptr inbounds double, double* %161, i64 6
  %163 = load double*, double** %3, align 8, !tbaa !1
  %164 = getelementptr inbounds double, double* %163, i64 6
  %165 = load double*, double** %1, align 8, !tbaa !1
  %166 = getelementptr inbounds double, double* %165, i64 2
  %167 = load double*, double** %2, align 8, !tbaa !1
  %168 = getelementptr inbounds double, double* %167, i64 2
  %169 = load double*, double** %3, align 8, !tbaa !1
  %170 = getelementptr inbounds double, double* %169, i64 2
  %171 = load double*, double** %4, align 8, !tbaa !1
  %172 = getelementptr inbounds double, double* %171, i64 1
  %173 = load double, double* %172, align 8, !tbaa !7
  %174 = load double*, double** %5, align 8, !tbaa !1
  %175 = getelementptr inbounds double, double* %174, i64 1
  %176 = load double, double* %175, align 8, !tbaa !7
  %177 = load double*, double** %6, align 8, !tbaa !1
  %178 = getelementptr inbounds double, double* %177, i64 1
  %179 = load double, double* %178, align 8, !tbaa !7
  %180 = load double*, double** %4, align 8, !tbaa !1
  %181 = getelementptr inbounds double, double* %180, i64 5
  %182 = load double, double* %181, align 8, !tbaa !7
  %183 = load double*, double** %5, align 8, !tbaa !1
  %184 = getelementptr inbounds double, double* %183, i64 5
  %185 = load double, double* %184, align 8, !tbaa !7
  %186 = load double*, double** %6, align 8, !tbaa !1
  %187 = getelementptr inbounds double, double* %186, i64 5
  %188 = load double, double* %187, align 8, !tbaa !7
  %189 = load double*, double** %4, align 8, !tbaa !1
  %190 = getelementptr inbounds double, double* %189, i64 6
  %191 = load double, double* %190, align 8, !tbaa !7
  %192 = load double*, double** %5, align 8, !tbaa !1
  %193 = getelementptr inbounds double, double* %192, i64 6
  %194 = load double, double* %193, align 8, !tbaa !7
  %195 = load double*, double** %6, align 8, !tbaa !1
  %196 = getelementptr inbounds double, double* %195, i64 6
  %197 = load double, double* %196, align 8, !tbaa !7
  %198 = load double*, double** %4, align 8, !tbaa !1
  %199 = getelementptr inbounds double, double* %198, i64 2
  %200 = load double, double* %199, align 8, !tbaa !7
  %201 = load double*, double** %5, align 8, !tbaa !1
  %202 = getelementptr inbounds double, double* %201, i64 2
  %203 = load double, double* %202, align 8, !tbaa !7
  %204 = load double*, double** %6, align 8, !tbaa !1
  %205 = getelementptr inbounds double, double* %204, i64 2
  %206 = load double, double* %205, align 8, !tbaa !7
  call void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %148, double* %150, double* %152, double* %154, double* %156, double* %158, double* %160, double* %162, double* %164, double* %166, double* %168, double* %170, double %173, double %176, double %179, double %182, double %185, double %188, double %191, double %194, double %197, double %200, double %203, double %206)
  %207 = load double*, double** %1, align 8, !tbaa !1
  %208 = getelementptr inbounds double, double* %207, i64 2
  %209 = load double*, double** %2, align 8, !tbaa !1
  %210 = getelementptr inbounds double, double* %209, i64 2
  %211 = load double*, double** %3, align 8, !tbaa !1
  %212 = getelementptr inbounds double, double* %211, i64 2
  %213 = load double*, double** %1, align 8, !tbaa !1
  %214 = getelementptr inbounds double, double* %213, i64 6
  %215 = load double*, double** %2, align 8, !tbaa !1
  %216 = getelementptr inbounds double, double* %215, i64 6
  %217 = load double*, double** %3, align 8, !tbaa !1
  %218 = getelementptr inbounds double, double* %217, i64 6
  %219 = load double*, double** %1, align 8, !tbaa !1
  %220 = getelementptr inbounds double, double* %219, i64 7
  %221 = load double*, double** %2, align 8, !tbaa !1
  %222 = getelementptr inbounds double, double* %221, i64 7
  %223 = load double*, double** %3, align 8, !tbaa !1
  %224 = getelementptr inbounds double, double* %223, i64 7
  %225 = load double*, double** %1, align 8, !tbaa !1
  %226 = getelementptr inbounds double, double* %225, i64 3
  %227 = load double*, double** %2, align 8, !tbaa !1
  %228 = getelementptr inbounds double, double* %227, i64 3
  %229 = load double*, double** %3, align 8, !tbaa !1
  %230 = getelementptr inbounds double, double* %229, i64 3
  %231 = load double*, double** %4, align 8, !tbaa !1
  %232 = getelementptr inbounds double, double* %231, i64 2
  %233 = load double, double* %232, align 8, !tbaa !7
  %234 = load double*, double** %5, align 8, !tbaa !1
  %235 = getelementptr inbounds double, double* %234, i64 2
  %236 = load double, double* %235, align 8, !tbaa !7
  %237 = load double*, double** %6, align 8, !tbaa !1
  %238 = getelementptr inbounds double, double* %237, i64 2
  %239 = load double, double* %238, align 8, !tbaa !7
  %240 = load double*, double** %4, align 8, !tbaa !1
  %241 = getelementptr inbounds double, double* %240, i64 6
  %242 = load double, double* %241, align 8, !tbaa !7
  %243 = load double*, double** %5, align 8, !tbaa !1
  %244 = getelementptr inbounds double, double* %243, i64 6
  %245 = load double, double* %244, align 8, !tbaa !7
  %246 = load double*, double** %6, align 8, !tbaa !1
  %247 = getelementptr inbounds double, double* %246, i64 6
  %248 = load double, double* %247, align 8, !tbaa !7
  %249 = load double*, double** %4, align 8, !tbaa !1
  %250 = getelementptr inbounds double, double* %249, i64 7
  %251 = load double, double* %250, align 8, !tbaa !7
  %252 = load double*, double** %5, align 8, !tbaa !1
  %253 = getelementptr inbounds double, double* %252, i64 7
  %254 = load double, double* %253, align 8, !tbaa !7
  %255 = load double*, double** %6, align 8, !tbaa !1
  %256 = getelementptr inbounds double, double* %255, i64 7
  %257 = load double, double* %256, align 8, !tbaa !7
  %258 = load double*, double** %4, align 8, !tbaa !1
  %259 = getelementptr inbounds double, double* %258, i64 3
  %260 = load double, double* %259, align 8, !tbaa !7
  %261 = load double*, double** %5, align 8, !tbaa !1
  %262 = getelementptr inbounds double, double* %261, i64 3
  %263 = load double, double* %262, align 8, !tbaa !7
  %264 = load double*, double** %6, align 8, !tbaa !1
  %265 = getelementptr inbounds double, double* %264, i64 3
  %266 = load double, double* %265, align 8, !tbaa !7
  call void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %208, double* %210, double* %212, double* %214, double* %216, double* %218, double* %220, double* %222, double* %224, double* %226, double* %228, double* %230, double %233, double %236, double %239, double %242, double %245, double %248, double %251, double %254, double %257, double %260, double %263, double %266)
  %267 = load double*, double** %1, align 8, !tbaa !1
  %268 = getelementptr inbounds double, double* %267, i64 3
  %269 = load double*, double** %2, align 8, !tbaa !1
  %270 = getelementptr inbounds double, double* %269, i64 3
  %271 = load double*, double** %3, align 8, !tbaa !1
  %272 = getelementptr inbounds double, double* %271, i64 3
  %273 = load double*, double** %1, align 8, !tbaa !1
  %274 = getelementptr inbounds double, double* %273, i64 7
  %275 = load double*, double** %2, align 8, !tbaa !1
  %276 = getelementptr inbounds double, double* %275, i64 7
  %277 = load double*, double** %3, align 8, !tbaa !1
  %278 = getelementptr inbounds double, double* %277, i64 7
  %279 = load double*, double** %1, align 8, !tbaa !1
  %280 = getelementptr inbounds double, double* %279, i64 4
  %281 = load double*, double** %2, align 8, !tbaa !1
  %282 = getelementptr inbounds double, double* %281, i64 4
  %283 = load double*, double** %3, align 8, !tbaa !1
  %284 = getelementptr inbounds double, double* %283, i64 4
  %285 = load double*, double** %1, align 8, !tbaa !1
  %286 = getelementptr inbounds double, double* %285, i64 0
  %287 = load double*, double** %2, align 8, !tbaa !1
  %288 = getelementptr inbounds double, double* %287, i64 0
  %289 = load double*, double** %3, align 8, !tbaa !1
  %290 = getelementptr inbounds double, double* %289, i64 0
  %291 = load double*, double** %4, align 8, !tbaa !1
  %292 = getelementptr inbounds double, double* %291, i64 3
  %293 = load double, double* %292, align 8, !tbaa !7
  %294 = load double*, double** %5, align 8, !tbaa !1
  %295 = getelementptr inbounds double, double* %294, i64 3
  %296 = load double, double* %295, align 8, !tbaa !7
  %297 = load double*, double** %6, align 8, !tbaa !1
  %298 = getelementptr inbounds double, double* %297, i64 3
  %299 = load double, double* %298, align 8, !tbaa !7
  %300 = load double*, double** %4, align 8, !tbaa !1
  %301 = getelementptr inbounds double, double* %300, i64 7
  %302 = load double, double* %301, align 8, !tbaa !7
  %303 = load double*, double** %5, align 8, !tbaa !1
  %304 = getelementptr inbounds double, double* %303, i64 7
  %305 = load double, double* %304, align 8, !tbaa !7
  %306 = load double*, double** %6, align 8, !tbaa !1
  %307 = getelementptr inbounds double, double* %306, i64 7
  %308 = load double, double* %307, align 8, !tbaa !7
  %309 = load double*, double** %4, align 8, !tbaa !1
  %310 = getelementptr inbounds double, double* %309, i64 4
  %311 = load double, double* %310, align 8, !tbaa !7
  %312 = load double*, double** %5, align 8, !tbaa !1
  %313 = getelementptr inbounds double, double* %312, i64 4
  %314 = load double, double* %313, align 8, !tbaa !7
  %315 = load double*, double** %6, align 8, !tbaa !1
  %316 = getelementptr inbounds double, double* %315, i64 4
  %317 = load double, double* %316, align 8, !tbaa !7
  %318 = load double*, double** %4, align 8, !tbaa !1
  %319 = getelementptr inbounds double, double* %318, i64 0
  %320 = load double, double* %319, align 8, !tbaa !7
  %321 = load double*, double** %5, align 8, !tbaa !1
  %322 = getelementptr inbounds double, double* %321, i64 0
  %323 = load double, double* %322, align 8, !tbaa !7
  %324 = load double*, double** %6, align 8, !tbaa !1
  %325 = getelementptr inbounds double, double* %324, i64 0
  %326 = load double, double* %325, align 8, !tbaa !7
  call void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %268, double* %270, double* %272, double* %274, double* %276, double* %278, double* %280, double* %282, double* %284, double* %286, double* %288, double* %290, double %293, double %296, double %299, double %302, double %305, double %308, double %311, double %314, double %317, double %320, double %323, double %326)
  %327 = load double*, double** %1, align 8, !tbaa !1
  %328 = getelementptr inbounds double, double* %327, i64 4
  %329 = load double*, double** %2, align 8, !tbaa !1
  %330 = getelementptr inbounds double, double* %329, i64 4
  %331 = load double*, double** %3, align 8, !tbaa !1
  %332 = getelementptr inbounds double, double* %331, i64 4
  %333 = load double*, double** %1, align 8, !tbaa !1
  %334 = getelementptr inbounds double, double* %333, i64 7
  %335 = load double*, double** %2, align 8, !tbaa !1
  %336 = getelementptr inbounds double, double* %335, i64 7
  %337 = load double*, double** %3, align 8, !tbaa !1
  %338 = getelementptr inbounds double, double* %337, i64 7
  %339 = load double*, double** %1, align 8, !tbaa !1
  %340 = getelementptr inbounds double, double* %339, i64 6
  %341 = load double*, double** %2, align 8, !tbaa !1
  %342 = getelementptr inbounds double, double* %341, i64 6
  %343 = load double*, double** %3, align 8, !tbaa !1
  %344 = getelementptr inbounds double, double* %343, i64 6
  %345 = load double*, double** %1, align 8, !tbaa !1
  %346 = getelementptr inbounds double, double* %345, i64 5
  %347 = load double*, double** %2, align 8, !tbaa !1
  %348 = getelementptr inbounds double, double* %347, i64 5
  %349 = load double*, double** %3, align 8, !tbaa !1
  %350 = getelementptr inbounds double, double* %349, i64 5
  %351 = load double*, double** %4, align 8, !tbaa !1
  %352 = getelementptr inbounds double, double* %351, i64 4
  %353 = load double, double* %352, align 8, !tbaa !7
  %354 = load double*, double** %5, align 8, !tbaa !1
  %355 = getelementptr inbounds double, double* %354, i64 4
  %356 = load double, double* %355, align 8, !tbaa !7
  %357 = load double*, double** %6, align 8, !tbaa !1
  %358 = getelementptr inbounds double, double* %357, i64 4
  %359 = load double, double* %358, align 8, !tbaa !7
  %360 = load double*, double** %4, align 8, !tbaa !1
  %361 = getelementptr inbounds double, double* %360, i64 7
  %362 = load double, double* %361, align 8, !tbaa !7
  %363 = load double*, double** %5, align 8, !tbaa !1
  %364 = getelementptr inbounds double, double* %363, i64 7
  %365 = load double, double* %364, align 8, !tbaa !7
  %366 = load double*, double** %6, align 8, !tbaa !1
  %367 = getelementptr inbounds double, double* %366, i64 7
  %368 = load double, double* %367, align 8, !tbaa !7
  %369 = load double*, double** %4, align 8, !tbaa !1
  %370 = getelementptr inbounds double, double* %369, i64 6
  %371 = load double, double* %370, align 8, !tbaa !7
  %372 = load double*, double** %5, align 8, !tbaa !1
  %373 = getelementptr inbounds double, double* %372, i64 6
  %374 = load double, double* %373, align 8, !tbaa !7
  %375 = load double*, double** %6, align 8, !tbaa !1
  %376 = getelementptr inbounds double, double* %375, i64 6
  %377 = load double, double* %376, align 8, !tbaa !7
  %378 = load double*, double** %4, align 8, !tbaa !1
  %379 = getelementptr inbounds double, double* %378, i64 5
  %380 = load double, double* %379, align 8, !tbaa !7
  %381 = load double*, double** %5, align 8, !tbaa !1
  %382 = getelementptr inbounds double, double* %381, i64 5
  %383 = load double, double* %382, align 8, !tbaa !7
  %384 = load double*, double** %6, align 8, !tbaa !1
  %385 = getelementptr inbounds double, double* %384, i64 5
  %386 = load double, double* %385, align 8, !tbaa !7
  call void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %328, double* %330, double* %332, double* %334, double* %336, double* %338, double* %340, double* %342, double* %344, double* %346, double* %348, double* %350, double %353, double %356, double %359, double %362, double %365, double %368, double %371, double %374, double %377, double %380, double %383, double %386)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL27SumElemStressesToNodeForcesPA8_KddddPdS2_S2_([8 x double]* %B, double %stress_xx, double %stress_yy, double %stress_zz, double* %fx, double* %fy, double* %fz) #6 {
  %1 = alloca [8 x double]*, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %pfx0 = alloca double, align 8
  %pfx1 = alloca double, align 8
  %pfx2 = alloca double, align 8
  %pfx3 = alloca double, align 8
  %pfx4 = alloca double, align 8
  %pfx5 = alloca double, align 8
  %pfx6 = alloca double, align 8
  %pfx7 = alloca double, align 8
  %pfy0 = alloca double, align 8
  %pfy1 = alloca double, align 8
  %pfy2 = alloca double, align 8
  %pfy3 = alloca double, align 8
  %pfy4 = alloca double, align 8
  %pfy5 = alloca double, align 8
  %pfy6 = alloca double, align 8
  %pfy7 = alloca double, align 8
  %pfz0 = alloca double, align 8
  %pfz1 = alloca double, align 8
  %pfz2 = alloca double, align 8
  %pfz3 = alloca double, align 8
  %pfz4 = alloca double, align 8
  %pfz5 = alloca double, align 8
  %pfz6 = alloca double, align 8
  %pfz7 = alloca double, align 8
  store [8 x double]* %B, [8 x double]** %1, align 8, !tbaa !1
  store double %stress_xx, double* %2, align 8, !tbaa !7
  store double %stress_yy, double* %3, align 8, !tbaa !7
  store double %stress_zz, double* %4, align 8, !tbaa !7
  store double* %fx, double** %5, align 8, !tbaa !1
  store double* %fy, double** %6, align 8, !tbaa !1
  store double* %fz, double** %7, align 8, !tbaa !1
  %8 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %9 = getelementptr inbounds [8 x double], [8 x double]* %8, i64 0
  %10 = getelementptr inbounds [8 x double], [8 x double]* %9, i32 0, i64 0
  %11 = load double, double* %10, align 8, !tbaa !7
  store double %11, double* %pfx0, align 8, !tbaa !7
  %12 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %13 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 0
  %14 = getelementptr inbounds [8 x double], [8 x double]* %13, i32 0, i64 1
  %15 = load double, double* %14, align 8, !tbaa !7
  store double %15, double* %pfx1, align 8, !tbaa !7
  %16 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %17 = getelementptr inbounds [8 x double], [8 x double]* %16, i64 0
  %18 = getelementptr inbounds [8 x double], [8 x double]* %17, i32 0, i64 2
  %19 = load double, double* %18, align 8, !tbaa !7
  store double %19, double* %pfx2, align 8, !tbaa !7
  %20 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %21 = getelementptr inbounds [8 x double], [8 x double]* %20, i64 0
  %22 = getelementptr inbounds [8 x double], [8 x double]* %21, i32 0, i64 3
  %23 = load double, double* %22, align 8, !tbaa !7
  store double %23, double* %pfx3, align 8, !tbaa !7
  %24 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %25 = getelementptr inbounds [8 x double], [8 x double]* %24, i64 0
  %26 = getelementptr inbounds [8 x double], [8 x double]* %25, i32 0, i64 4
  %27 = load double, double* %26, align 8, !tbaa !7
  store double %27, double* %pfx4, align 8, !tbaa !7
  %28 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %29 = getelementptr inbounds [8 x double], [8 x double]* %28, i64 0
  %30 = getelementptr inbounds [8 x double], [8 x double]* %29, i32 0, i64 5
  %31 = load double, double* %30, align 8, !tbaa !7
  store double %31, double* %pfx5, align 8, !tbaa !7
  %32 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %33 = getelementptr inbounds [8 x double], [8 x double]* %32, i64 0
  %34 = getelementptr inbounds [8 x double], [8 x double]* %33, i32 0, i64 6
  %35 = load double, double* %34, align 8, !tbaa !7
  store double %35, double* %pfx6, align 8, !tbaa !7
  %36 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %37 = getelementptr inbounds [8 x double], [8 x double]* %36, i64 0
  %38 = getelementptr inbounds [8 x double], [8 x double]* %37, i32 0, i64 7
  %39 = load double, double* %38, align 8, !tbaa !7
  store double %39, double* %pfx7, align 8, !tbaa !7
  %40 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %41 = getelementptr inbounds [8 x double], [8 x double]* %40, i64 1
  %42 = getelementptr inbounds [8 x double], [8 x double]* %41, i32 0, i64 0
  %43 = load double, double* %42, align 8, !tbaa !7
  store double %43, double* %pfy0, align 8, !tbaa !7
  %44 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %45 = getelementptr inbounds [8 x double], [8 x double]* %44, i64 1
  %46 = getelementptr inbounds [8 x double], [8 x double]* %45, i32 0, i64 1
  %47 = load double, double* %46, align 8, !tbaa !7
  store double %47, double* %pfy1, align 8, !tbaa !7
  %48 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %49 = getelementptr inbounds [8 x double], [8 x double]* %48, i64 1
  %50 = getelementptr inbounds [8 x double], [8 x double]* %49, i32 0, i64 2
  %51 = load double, double* %50, align 8, !tbaa !7
  store double %51, double* %pfy2, align 8, !tbaa !7
  %52 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %53 = getelementptr inbounds [8 x double], [8 x double]* %52, i64 1
  %54 = getelementptr inbounds [8 x double], [8 x double]* %53, i32 0, i64 3
  %55 = load double, double* %54, align 8, !tbaa !7
  store double %55, double* %pfy3, align 8, !tbaa !7
  %56 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %57 = getelementptr inbounds [8 x double], [8 x double]* %56, i64 1
  %58 = getelementptr inbounds [8 x double], [8 x double]* %57, i32 0, i64 4
  %59 = load double, double* %58, align 8, !tbaa !7
  store double %59, double* %pfy4, align 8, !tbaa !7
  %60 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %61 = getelementptr inbounds [8 x double], [8 x double]* %60, i64 1
  %62 = getelementptr inbounds [8 x double], [8 x double]* %61, i32 0, i64 5
  %63 = load double, double* %62, align 8, !tbaa !7
  store double %63, double* %pfy5, align 8, !tbaa !7
  %64 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %65 = getelementptr inbounds [8 x double], [8 x double]* %64, i64 1
  %66 = getelementptr inbounds [8 x double], [8 x double]* %65, i32 0, i64 6
  %67 = load double, double* %66, align 8, !tbaa !7
  store double %67, double* %pfy6, align 8, !tbaa !7
  %68 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %69 = getelementptr inbounds [8 x double], [8 x double]* %68, i64 1
  %70 = getelementptr inbounds [8 x double], [8 x double]* %69, i32 0, i64 7
  %71 = load double, double* %70, align 8, !tbaa !7
  store double %71, double* %pfy7, align 8, !tbaa !7
  %72 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %73 = getelementptr inbounds [8 x double], [8 x double]* %72, i64 2
  %74 = getelementptr inbounds [8 x double], [8 x double]* %73, i32 0, i64 0
  %75 = load double, double* %74, align 8, !tbaa !7
  store double %75, double* %pfz0, align 8, !tbaa !7
  %76 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %77 = getelementptr inbounds [8 x double], [8 x double]* %76, i64 2
  %78 = getelementptr inbounds [8 x double], [8 x double]* %77, i32 0, i64 1
  %79 = load double, double* %78, align 8, !tbaa !7
  store double %79, double* %pfz1, align 8, !tbaa !7
  %80 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %81 = getelementptr inbounds [8 x double], [8 x double]* %80, i64 2
  %82 = getelementptr inbounds [8 x double], [8 x double]* %81, i32 0, i64 2
  %83 = load double, double* %82, align 8, !tbaa !7
  store double %83, double* %pfz2, align 8, !tbaa !7
  %84 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %85 = getelementptr inbounds [8 x double], [8 x double]* %84, i64 2
  %86 = getelementptr inbounds [8 x double], [8 x double]* %85, i32 0, i64 3
  %87 = load double, double* %86, align 8, !tbaa !7
  store double %87, double* %pfz3, align 8, !tbaa !7
  %88 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %89 = getelementptr inbounds [8 x double], [8 x double]* %88, i64 2
  %90 = getelementptr inbounds [8 x double], [8 x double]* %89, i32 0, i64 4
  %91 = load double, double* %90, align 8, !tbaa !7
  store double %91, double* %pfz4, align 8, !tbaa !7
  %92 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %93 = getelementptr inbounds [8 x double], [8 x double]* %92, i64 2
  %94 = getelementptr inbounds [8 x double], [8 x double]* %93, i32 0, i64 5
  %95 = load double, double* %94, align 8, !tbaa !7
  store double %95, double* %pfz5, align 8, !tbaa !7
  %96 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %97 = getelementptr inbounds [8 x double], [8 x double]* %96, i64 2
  %98 = getelementptr inbounds [8 x double], [8 x double]* %97, i32 0, i64 6
  %99 = load double, double* %98, align 8, !tbaa !7
  store double %99, double* %pfz6, align 8, !tbaa !7
  %100 = load [8 x double]*, [8 x double]** %1, align 8, !tbaa !1
  %101 = getelementptr inbounds [8 x double], [8 x double]* %100, i64 2
  %102 = getelementptr inbounds [8 x double], [8 x double]* %101, i32 0, i64 7
  %103 = load double, double* %102, align 8, !tbaa !7
  store double %103, double* %pfz7, align 8, !tbaa !7
  %104 = load double, double* %2, align 8, !tbaa !7
  %105 = load double, double* %pfx0, align 8, !tbaa !7
  %106 = fmul double %104, %105
  %107 = fsub double -0.000000e+00, %106
  %108 = load double*, double** %5, align 8, !tbaa !1
  %109 = getelementptr inbounds double, double* %108, i64 0
  store double %107, double* %109, align 8, !tbaa !7
  %110 = load double, double* %2, align 8, !tbaa !7
  %111 = load double, double* %pfx1, align 8, !tbaa !7
  %112 = fmul double %110, %111
  %113 = fsub double -0.000000e+00, %112
  %114 = load double*, double** %5, align 8, !tbaa !1
  %115 = getelementptr inbounds double, double* %114, i64 1
  store double %113, double* %115, align 8, !tbaa !7
  %116 = load double, double* %2, align 8, !tbaa !7
  %117 = load double, double* %pfx2, align 8, !tbaa !7
  %118 = fmul double %116, %117
  %119 = fsub double -0.000000e+00, %118
  %120 = load double*, double** %5, align 8, !tbaa !1
  %121 = getelementptr inbounds double, double* %120, i64 2
  store double %119, double* %121, align 8, !tbaa !7
  %122 = load double, double* %2, align 8, !tbaa !7
  %123 = load double, double* %pfx3, align 8, !tbaa !7
  %124 = fmul double %122, %123
  %125 = fsub double -0.000000e+00, %124
  %126 = load double*, double** %5, align 8, !tbaa !1
  %127 = getelementptr inbounds double, double* %126, i64 3
  store double %125, double* %127, align 8, !tbaa !7
  %128 = load double, double* %2, align 8, !tbaa !7
  %129 = load double, double* %pfx4, align 8, !tbaa !7
  %130 = fmul double %128, %129
  %131 = fsub double -0.000000e+00, %130
  %132 = load double*, double** %5, align 8, !tbaa !1
  %133 = getelementptr inbounds double, double* %132, i64 4
  store double %131, double* %133, align 8, !tbaa !7
  %134 = load double, double* %2, align 8, !tbaa !7
  %135 = load double, double* %pfx5, align 8, !tbaa !7
  %136 = fmul double %134, %135
  %137 = fsub double -0.000000e+00, %136
  %138 = load double*, double** %5, align 8, !tbaa !1
  %139 = getelementptr inbounds double, double* %138, i64 5
  store double %137, double* %139, align 8, !tbaa !7
  %140 = load double, double* %2, align 8, !tbaa !7
  %141 = load double, double* %pfx6, align 8, !tbaa !7
  %142 = fmul double %140, %141
  %143 = fsub double -0.000000e+00, %142
  %144 = load double*, double** %5, align 8, !tbaa !1
  %145 = getelementptr inbounds double, double* %144, i64 6
  store double %143, double* %145, align 8, !tbaa !7
  %146 = load double, double* %2, align 8, !tbaa !7
  %147 = load double, double* %pfx7, align 8, !tbaa !7
  %148 = fmul double %146, %147
  %149 = fsub double -0.000000e+00, %148
  %150 = load double*, double** %5, align 8, !tbaa !1
  %151 = getelementptr inbounds double, double* %150, i64 7
  store double %149, double* %151, align 8, !tbaa !7
  %152 = load double, double* %3, align 8, !tbaa !7
  %153 = load double, double* %pfy0, align 8, !tbaa !7
  %154 = fmul double %152, %153
  %155 = fsub double -0.000000e+00, %154
  %156 = load double*, double** %6, align 8, !tbaa !1
  %157 = getelementptr inbounds double, double* %156, i64 0
  store double %155, double* %157, align 8, !tbaa !7
  %158 = load double, double* %3, align 8, !tbaa !7
  %159 = load double, double* %pfy1, align 8, !tbaa !7
  %160 = fmul double %158, %159
  %161 = fsub double -0.000000e+00, %160
  %162 = load double*, double** %6, align 8, !tbaa !1
  %163 = getelementptr inbounds double, double* %162, i64 1
  store double %161, double* %163, align 8, !tbaa !7
  %164 = load double, double* %3, align 8, !tbaa !7
  %165 = load double, double* %pfy2, align 8, !tbaa !7
  %166 = fmul double %164, %165
  %167 = fsub double -0.000000e+00, %166
  %168 = load double*, double** %6, align 8, !tbaa !1
  %169 = getelementptr inbounds double, double* %168, i64 2
  store double %167, double* %169, align 8, !tbaa !7
  %170 = load double, double* %3, align 8, !tbaa !7
  %171 = load double, double* %pfy3, align 8, !tbaa !7
  %172 = fmul double %170, %171
  %173 = fsub double -0.000000e+00, %172
  %174 = load double*, double** %6, align 8, !tbaa !1
  %175 = getelementptr inbounds double, double* %174, i64 3
  store double %173, double* %175, align 8, !tbaa !7
  %176 = load double, double* %3, align 8, !tbaa !7
  %177 = load double, double* %pfy4, align 8, !tbaa !7
  %178 = fmul double %176, %177
  %179 = fsub double -0.000000e+00, %178
  %180 = load double*, double** %6, align 8, !tbaa !1
  %181 = getelementptr inbounds double, double* %180, i64 4
  store double %179, double* %181, align 8, !tbaa !7
  %182 = load double, double* %3, align 8, !tbaa !7
  %183 = load double, double* %pfy5, align 8, !tbaa !7
  %184 = fmul double %182, %183
  %185 = fsub double -0.000000e+00, %184
  %186 = load double*, double** %6, align 8, !tbaa !1
  %187 = getelementptr inbounds double, double* %186, i64 5
  store double %185, double* %187, align 8, !tbaa !7
  %188 = load double, double* %3, align 8, !tbaa !7
  %189 = load double, double* %pfy6, align 8, !tbaa !7
  %190 = fmul double %188, %189
  %191 = fsub double -0.000000e+00, %190
  %192 = load double*, double** %6, align 8, !tbaa !1
  %193 = getelementptr inbounds double, double* %192, i64 6
  store double %191, double* %193, align 8, !tbaa !7
  %194 = load double, double* %3, align 8, !tbaa !7
  %195 = load double, double* %pfy7, align 8, !tbaa !7
  %196 = fmul double %194, %195
  %197 = fsub double -0.000000e+00, %196
  %198 = load double*, double** %6, align 8, !tbaa !1
  %199 = getelementptr inbounds double, double* %198, i64 7
  store double %197, double* %199, align 8, !tbaa !7
  %200 = load double, double* %4, align 8, !tbaa !7
  %201 = load double, double* %pfz0, align 8, !tbaa !7
  %202 = fmul double %200, %201
  %203 = fsub double -0.000000e+00, %202
  %204 = load double*, double** %7, align 8, !tbaa !1
  %205 = getelementptr inbounds double, double* %204, i64 0
  store double %203, double* %205, align 8, !tbaa !7
  %206 = load double, double* %4, align 8, !tbaa !7
  %207 = load double, double* %pfz1, align 8, !tbaa !7
  %208 = fmul double %206, %207
  %209 = fsub double -0.000000e+00, %208
  %210 = load double*, double** %7, align 8, !tbaa !1
  %211 = getelementptr inbounds double, double* %210, i64 1
  store double %209, double* %211, align 8, !tbaa !7
  %212 = load double, double* %4, align 8, !tbaa !7
  %213 = load double, double* %pfz2, align 8, !tbaa !7
  %214 = fmul double %212, %213
  %215 = fsub double -0.000000e+00, %214
  %216 = load double*, double** %7, align 8, !tbaa !1
  %217 = getelementptr inbounds double, double* %216, i64 2
  store double %215, double* %217, align 8, !tbaa !7
  %218 = load double, double* %4, align 8, !tbaa !7
  %219 = load double, double* %pfz3, align 8, !tbaa !7
  %220 = fmul double %218, %219
  %221 = fsub double -0.000000e+00, %220
  %222 = load double*, double** %7, align 8, !tbaa !1
  %223 = getelementptr inbounds double, double* %222, i64 3
  store double %221, double* %223, align 8, !tbaa !7
  %224 = load double, double* %4, align 8, !tbaa !7
  %225 = load double, double* %pfz4, align 8, !tbaa !7
  %226 = fmul double %224, %225
  %227 = fsub double -0.000000e+00, %226
  %228 = load double*, double** %7, align 8, !tbaa !1
  %229 = getelementptr inbounds double, double* %228, i64 4
  store double %227, double* %229, align 8, !tbaa !7
  %230 = load double, double* %4, align 8, !tbaa !7
  %231 = load double, double* %pfz5, align 8, !tbaa !7
  %232 = fmul double %230, %231
  %233 = fsub double -0.000000e+00, %232
  %234 = load double*, double** %7, align 8, !tbaa !1
  %235 = getelementptr inbounds double, double* %234, i64 5
  store double %233, double* %235, align 8, !tbaa !7
  %236 = load double, double* %4, align 8, !tbaa !7
  %237 = load double, double* %pfz6, align 8, !tbaa !7
  %238 = fmul double %236, %237
  %239 = fsub double -0.000000e+00, %238
  %240 = load double*, double** %7, align 8, !tbaa !1
  %241 = getelementptr inbounds double, double* %240, i64 6
  store double %239, double* %241, align 8, !tbaa !7
  %242 = load double, double* %4, align 8, !tbaa !7
  %243 = load double, double* %pfz7, align 8, !tbaa !7
  %244 = fmul double %242, %243
  %245 = fsub double -0.000000e+00, %244
  %246 = load double*, double** %7, align 8, !tbaa !1
  %247 = getelementptr inbounds double, double* %246, i64 7
  store double %245, double* %247, align 8, !tbaa !7
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL17SumElemFaceNormalPdS_S_S_S_S_S_S_S_S_S_S_dddddddddddd(double* %normalX0, double* %normalY0, double* %normalZ0, double* %normalX1, double* %normalY1, double* %normalZ1, double* %normalX2, double* %normalY2, double* %normalZ2, double* %normalX3, double* %normalY3, double* %normalZ3, double %x0, double %y0, double %z0, double %x1, double %y1, double %z1, double %x2, double %y2, double %z2, double %x3, double %y3, double %z3) #6 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %bisectX0 = alloca double, align 8
  %bisectY0 = alloca double, align 8
  %bisectZ0 = alloca double, align 8
  %bisectX1 = alloca double, align 8
  %bisectY1 = alloca double, align 8
  %bisectZ1 = alloca double, align 8
  %areaX = alloca double, align 8
  %areaY = alloca double, align 8
  %areaZ = alloca double, align 8
  store double* %normalX0, double** %1, align 8, !tbaa !1
  store double* %normalY0, double** %2, align 8, !tbaa !1
  store double* %normalZ0, double** %3, align 8, !tbaa !1
  store double* %normalX1, double** %4, align 8, !tbaa !1
  store double* %normalY1, double** %5, align 8, !tbaa !1
  store double* %normalZ1, double** %6, align 8, !tbaa !1
  store double* %normalX2, double** %7, align 8, !tbaa !1
  store double* %normalY2, double** %8, align 8, !tbaa !1
  store double* %normalZ2, double** %9, align 8, !tbaa !1
  store double* %normalX3, double** %10, align 8, !tbaa !1
  store double* %normalY3, double** %11, align 8, !tbaa !1
  store double* %normalZ3, double** %12, align 8, !tbaa !1
  store double %x0, double* %13, align 8, !tbaa !7
  store double %y0, double* %14, align 8, !tbaa !7
  store double %z0, double* %15, align 8, !tbaa !7
  store double %x1, double* %16, align 8, !tbaa !7
  store double %y1, double* %17, align 8, !tbaa !7
  store double %z1, double* %18, align 8, !tbaa !7
  store double %x2, double* %19, align 8, !tbaa !7
  store double %y2, double* %20, align 8, !tbaa !7
  store double %z2, double* %21, align 8, !tbaa !7
  store double %x3, double* %22, align 8, !tbaa !7
  store double %y3, double* %23, align 8, !tbaa !7
  store double %z3, double* %24, align 8, !tbaa !7
  %25 = load double, double* %22, align 8, !tbaa !7
  %26 = load double, double* %19, align 8, !tbaa !7
  %27 = fadd double %25, %26
  %28 = load double, double* %16, align 8, !tbaa !7
  %29 = fsub double %27, %28
  %30 = load double, double* %13, align 8, !tbaa !7
  %31 = fsub double %29, %30
  %32 = fmul double 5.000000e-01, %31
  store double %32, double* %bisectX0, align 8, !tbaa !7
  %33 = load double, double* %23, align 8, !tbaa !7
  %34 = load double, double* %20, align 8, !tbaa !7
  %35 = fadd double %33, %34
  %36 = load double, double* %17, align 8, !tbaa !7
  %37 = fsub double %35, %36
  %38 = load double, double* %14, align 8, !tbaa !7
  %39 = fsub double %37, %38
  %40 = fmul double 5.000000e-01, %39
  store double %40, double* %bisectY0, align 8, !tbaa !7
  %41 = load double, double* %24, align 8, !tbaa !7
  %42 = load double, double* %21, align 8, !tbaa !7
  %43 = fadd double %41, %42
  %44 = load double, double* %18, align 8, !tbaa !7
  %45 = fsub double %43, %44
  %46 = load double, double* %15, align 8, !tbaa !7
  %47 = fsub double %45, %46
  %48 = fmul double 5.000000e-01, %47
  store double %48, double* %bisectZ0, align 8, !tbaa !7
  %49 = load double, double* %19, align 8, !tbaa !7
  %50 = load double, double* %16, align 8, !tbaa !7
  %51 = fadd double %49, %50
  %52 = load double, double* %22, align 8, !tbaa !7
  %53 = fsub double %51, %52
  %54 = load double, double* %13, align 8, !tbaa !7
  %55 = fsub double %53, %54
  %56 = fmul double 5.000000e-01, %55
  store double %56, double* %bisectX1, align 8, !tbaa !7
  %57 = load double, double* %20, align 8, !tbaa !7
  %58 = load double, double* %17, align 8, !tbaa !7
  %59 = fadd double %57, %58
  %60 = load double, double* %23, align 8, !tbaa !7
  %61 = fsub double %59, %60
  %62 = load double, double* %14, align 8, !tbaa !7
  %63 = fsub double %61, %62
  %64 = fmul double 5.000000e-01, %63
  store double %64, double* %bisectY1, align 8, !tbaa !7
  %65 = load double, double* %21, align 8, !tbaa !7
  %66 = load double, double* %18, align 8, !tbaa !7
  %67 = fadd double %65, %66
  %68 = load double, double* %24, align 8, !tbaa !7
  %69 = fsub double %67, %68
  %70 = load double, double* %15, align 8, !tbaa !7
  %71 = fsub double %69, %70
  %72 = fmul double 5.000000e-01, %71
  store double %72, double* %bisectZ1, align 8, !tbaa !7
  %73 = load double, double* %bisectY0, align 8, !tbaa !7
  %74 = load double, double* %bisectZ1, align 8, !tbaa !7
  %75 = fmul double %73, %74
  %76 = load double, double* %bisectZ0, align 8, !tbaa !7
  %77 = load double, double* %bisectY1, align 8, !tbaa !7
  %78 = fmul double %76, %77
  %79 = fsub double %75, %78
  %80 = fmul double 2.500000e-01, %79
  store double %80, double* %areaX, align 8, !tbaa !7
  %81 = load double, double* %bisectZ0, align 8, !tbaa !7
  %82 = load double, double* %bisectX1, align 8, !tbaa !7
  %83 = fmul double %81, %82
  %84 = load double, double* %bisectX0, align 8, !tbaa !7
  %85 = load double, double* %bisectZ1, align 8, !tbaa !7
  %86 = fmul double %84, %85
  %87 = fsub double %83, %86
  %88 = fmul double 2.500000e-01, %87
  store double %88, double* %areaY, align 8, !tbaa !7
  %89 = load double, double* %bisectX0, align 8, !tbaa !7
  %90 = load double, double* %bisectY1, align 8, !tbaa !7
  %91 = fmul double %89, %90
  %92 = load double, double* %bisectY0, align 8, !tbaa !7
  %93 = load double, double* %bisectX1, align 8, !tbaa !7
  %94 = fmul double %92, %93
  %95 = fsub double %91, %94
  %96 = fmul double 2.500000e-01, %95
  store double %96, double* %areaZ, align 8, !tbaa !7
  %97 = load double, double* %areaX, align 8, !tbaa !7
  %98 = load double*, double** %1, align 8, !tbaa !1
  %99 = load double, double* %98, align 8, !tbaa !7
  %100 = fadd double %99, %97
  store double %100, double* %98, align 8, !tbaa !7
  %101 = load double, double* %areaX, align 8, !tbaa !7
  %102 = load double*, double** %4, align 8, !tbaa !1
  %103 = load double, double* %102, align 8, !tbaa !7
  %104 = fadd double %103, %101
  store double %104, double* %102, align 8, !tbaa !7
  %105 = load double, double* %areaX, align 8, !tbaa !7
  %106 = load double*, double** %7, align 8, !tbaa !1
  %107 = load double, double* %106, align 8, !tbaa !7
  %108 = fadd double %107, %105
  store double %108, double* %106, align 8, !tbaa !7
  %109 = load double, double* %areaX, align 8, !tbaa !7
  %110 = load double*, double** %10, align 8, !tbaa !1
  %111 = load double, double* %110, align 8, !tbaa !7
  %112 = fadd double %111, %109
  store double %112, double* %110, align 8, !tbaa !7
  %113 = load double, double* %areaY, align 8, !tbaa !7
  %114 = load double*, double** %2, align 8, !tbaa !1
  %115 = load double, double* %114, align 8, !tbaa !7
  %116 = fadd double %115, %113
  store double %116, double* %114, align 8, !tbaa !7
  %117 = load double, double* %areaY, align 8, !tbaa !7
  %118 = load double*, double** %5, align 8, !tbaa !1
  %119 = load double, double* %118, align 8, !tbaa !7
  %120 = fadd double %119, %117
  store double %120, double* %118, align 8, !tbaa !7
  %121 = load double, double* %areaY, align 8, !tbaa !7
  %122 = load double*, double** %8, align 8, !tbaa !1
  %123 = load double, double* %122, align 8, !tbaa !7
  %124 = fadd double %123, %121
  store double %124, double* %122, align 8, !tbaa !7
  %125 = load double, double* %areaY, align 8, !tbaa !7
  %126 = load double*, double** %11, align 8, !tbaa !1
  %127 = load double, double* %126, align 8, !tbaa !7
  %128 = fadd double %127, %125
  store double %128, double* %126, align 8, !tbaa !7
  %129 = load double, double* %areaZ, align 8, !tbaa !7
  %130 = load double*, double** %3, align 8, !tbaa !1
  %131 = load double, double* %130, align 8, !tbaa !7
  %132 = fadd double %131, %129
  store double %132, double* %130, align 8, !tbaa !7
  %133 = load double, double* %areaZ, align 8, !tbaa !7
  %134 = load double*, double** %6, align 8, !tbaa !1
  %135 = load double, double* %134, align 8, !tbaa !7
  %136 = fadd double %135, %133
  store double %136, double* %134, align 8, !tbaa !7
  %137 = load double, double* %areaZ, align 8, !tbaa !7
  %138 = load double*, double** %9, align 8, !tbaa !1
  %139 = load double, double* %138, align 8, !tbaa !7
  %140 = fadd double %139, %137
  store double %140, double* %138, align 8, !tbaa !7
  %141 = load double, double* %areaZ, align 8, !tbaa !7
  %142 = load double*, double** %12, align 8, !tbaa !1
  %143 = load double, double* %142, align 8, !tbaa !7
  %144 = fadd double %143, %141
  store double %144, double* %142, align 8, !tbaa !7
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL29CollectDomainNodesToElemNodesPKiPdS1_S1_(i32* %elemToNode, double* %elemX, double* %elemY, double* %elemZ) #0 {
  %1 = alloca i32*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %nd0i = alloca i32, align 4
  %nd1i = alloca i32, align 4
  %nd2i = alloca i32, align 4
  %nd3i = alloca i32, align 4
  %nd4i = alloca i32, align 4
  %nd5i = alloca i32, align 4
  %nd6i = alloca i32, align 4
  %nd7i = alloca i32, align 4
  store i32* %elemToNode, i32** %1, align 8, !tbaa !1
  store double* %elemX, double** %2, align 8, !tbaa !1
  store double* %elemY, double** %3, align 8, !tbaa !1
  store double* %elemZ, double** %4, align 8, !tbaa !1
  %5 = load i32*, i32** %1, align 8, !tbaa !1
  %6 = getelementptr inbounds i32, i32* %5, i64 0
  %7 = load i32, i32* %6, align 4, !tbaa !5
  store i32 %7, i32* %nd0i, align 4, !tbaa !5
  %8 = load i32*, i32** %1, align 8, !tbaa !1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = load i32, i32* %9, align 4, !tbaa !5
  store i32 %10, i32* %nd1i, align 4, !tbaa !5
  %11 = load i32*, i32** %1, align 8, !tbaa !1
  %12 = getelementptr inbounds i32, i32* %11, i64 2
  %13 = load i32, i32* %12, align 4, !tbaa !5
  store i32 %13, i32* %nd2i, align 4, !tbaa !5
  %14 = load i32*, i32** %1, align 8, !tbaa !1
  %15 = getelementptr inbounds i32, i32* %14, i64 3
  %16 = load i32, i32* %15, align 4, !tbaa !5
  store i32 %16, i32* %nd3i, align 4, !tbaa !5
  %17 = load i32*, i32** %1, align 8, !tbaa !1
  %18 = getelementptr inbounds i32, i32* %17, i64 4
  %19 = load i32, i32* %18, align 4, !tbaa !5
  store i32 %19, i32* %nd4i, align 4, !tbaa !5
  %20 = load i32*, i32** %1, align 8, !tbaa !1
  %21 = getelementptr inbounds i32, i32* %20, i64 5
  %22 = load i32, i32* %21, align 4, !tbaa !5
  store i32 %22, i32* %nd5i, align 4, !tbaa !5
  %23 = load i32*, i32** %1, align 8, !tbaa !1
  %24 = getelementptr inbounds i32, i32* %23, i64 6
  %25 = load i32, i32* %24, align 4, !tbaa !5
  store i32 %25, i32* %nd6i, align 4, !tbaa !5
  %26 = load i32*, i32** %1, align 8, !tbaa !1
  %27 = getelementptr inbounds i32, i32* %26, i64 7
  %28 = load i32, i32* %27, align 4, !tbaa !5
  store i32 %28, i32* %nd7i, align 4, !tbaa !5
  %29 = load i32, i32* %nd0i, align 4, !tbaa !5
  %30 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %29)
  %31 = load double, double* %30, !tbaa !7
  %32 = load double*, double** %2, align 8, !tbaa !1
  %33 = getelementptr inbounds double, double* %32, i64 0
  store double %31, double* %33, align 8, !tbaa !7
  %34 = load i32, i32* %nd1i, align 4, !tbaa !5
  %35 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %34)
  %36 = load double, double* %35, !tbaa !7
  %37 = load double*, double** %2, align 8, !tbaa !1
  %38 = getelementptr inbounds double, double* %37, i64 1
  store double %36, double* %38, align 8, !tbaa !7
  %39 = load i32, i32* %nd2i, align 4, !tbaa !5
  %40 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %39)
  %41 = load double, double* %40, !tbaa !7
  %42 = load double*, double** %2, align 8, !tbaa !1
  %43 = getelementptr inbounds double, double* %42, i64 2
  store double %41, double* %43, align 8, !tbaa !7
  %44 = load i32, i32* %nd3i, align 4, !tbaa !5
  %45 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %44)
  %46 = load double, double* %45, !tbaa !7
  %47 = load double*, double** %2, align 8, !tbaa !1
  %48 = getelementptr inbounds double, double* %47, i64 3
  store double %46, double* %48, align 8, !tbaa !7
  %49 = load i32, i32* %nd4i, align 4, !tbaa !5
  %50 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %49)
  %51 = load double, double* %50, !tbaa !7
  %52 = load double*, double** %2, align 8, !tbaa !1
  %53 = getelementptr inbounds double, double* %52, i64 4
  store double %51, double* %53, align 8, !tbaa !7
  %54 = load i32, i32* %nd5i, align 4, !tbaa !5
  %55 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %54)
  %56 = load double, double* %55, !tbaa !7
  %57 = load double*, double** %2, align 8, !tbaa !1
  %58 = getelementptr inbounds double, double* %57, i64 5
  store double %56, double* %58, align 8, !tbaa !7
  %59 = load i32, i32* %nd6i, align 4, !tbaa !5
  %60 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %59)
  %61 = load double, double* %60, !tbaa !7
  %62 = load double*, double** %2, align 8, !tbaa !1
  %63 = getelementptr inbounds double, double* %62, i64 6
  store double %61, double* %63, align 8, !tbaa !7
  %64 = load i32, i32* %nd7i, align 4, !tbaa !5
  %65 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %64)
  %66 = load double, double* %65, !tbaa !7
  %67 = load double*, double** %2, align 8, !tbaa !1
  %68 = getelementptr inbounds double, double* %67, i64 7
  store double %66, double* %68, align 8, !tbaa !7
  %69 = load i32, i32* %nd0i, align 4, !tbaa !5
  %70 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %69)
  %71 = load double, double* %70, !tbaa !7
  %72 = load double*, double** %3, align 8, !tbaa !1
  %73 = getelementptr inbounds double, double* %72, i64 0
  store double %71, double* %73, align 8, !tbaa !7
  %74 = load i32, i32* %nd1i, align 4, !tbaa !5
  %75 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %74)
  %76 = load double, double* %75, !tbaa !7
  %77 = load double*, double** %3, align 8, !tbaa !1
  %78 = getelementptr inbounds double, double* %77, i64 1
  store double %76, double* %78, align 8, !tbaa !7
  %79 = load i32, i32* %nd2i, align 4, !tbaa !5
  %80 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %79)
  %81 = load double, double* %80, !tbaa !7
  %82 = load double*, double** %3, align 8, !tbaa !1
  %83 = getelementptr inbounds double, double* %82, i64 2
  store double %81, double* %83, align 8, !tbaa !7
  %84 = load i32, i32* %nd3i, align 4, !tbaa !5
  %85 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %84)
  %86 = load double, double* %85, !tbaa !7
  %87 = load double*, double** %3, align 8, !tbaa !1
  %88 = getelementptr inbounds double, double* %87, i64 3
  store double %86, double* %88, align 8, !tbaa !7
  %89 = load i32, i32* %nd4i, align 4, !tbaa !5
  %90 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %89)
  %91 = load double, double* %90, !tbaa !7
  %92 = load double*, double** %3, align 8, !tbaa !1
  %93 = getelementptr inbounds double, double* %92, i64 4
  store double %91, double* %93, align 8, !tbaa !7
  %94 = load i32, i32* %nd5i, align 4, !tbaa !5
  %95 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %94)
  %96 = load double, double* %95, !tbaa !7
  %97 = load double*, double** %3, align 8, !tbaa !1
  %98 = getelementptr inbounds double, double* %97, i64 5
  store double %96, double* %98, align 8, !tbaa !7
  %99 = load i32, i32* %nd6i, align 4, !tbaa !5
  %100 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %99)
  %101 = load double, double* %100, !tbaa !7
  %102 = load double*, double** %3, align 8, !tbaa !1
  %103 = getelementptr inbounds double, double* %102, i64 6
  store double %101, double* %103, align 8, !tbaa !7
  %104 = load i32, i32* %nd7i, align 4, !tbaa !5
  %105 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %104)
  %106 = load double, double* %105, !tbaa !7
  %107 = load double*, double** %3, align 8, !tbaa !1
  %108 = getelementptr inbounds double, double* %107, i64 7
  store double %106, double* %108, align 8, !tbaa !7
  %109 = load i32, i32* %nd0i, align 4, !tbaa !5
  %110 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %109)
  %111 = load double, double* %110, !tbaa !7
  %112 = load double*, double** %4, align 8, !tbaa !1
  %113 = getelementptr inbounds double, double* %112, i64 0
  store double %111, double* %113, align 8, !tbaa !7
  %114 = load i32, i32* %nd1i, align 4, !tbaa !5
  %115 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %114)
  %116 = load double, double* %115, !tbaa !7
  %117 = load double*, double** %4, align 8, !tbaa !1
  %118 = getelementptr inbounds double, double* %117, i64 1
  store double %116, double* %118, align 8, !tbaa !7
  %119 = load i32, i32* %nd2i, align 4, !tbaa !5
  %120 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %119)
  %121 = load double, double* %120, !tbaa !7
  %122 = load double*, double** %4, align 8, !tbaa !1
  %123 = getelementptr inbounds double, double* %122, i64 2
  store double %121, double* %123, align 8, !tbaa !7
  %124 = load i32, i32* %nd3i, align 4, !tbaa !5
  %125 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %124)
  %126 = load double, double* %125, !tbaa !7
  %127 = load double*, double** %4, align 8, !tbaa !1
  %128 = getelementptr inbounds double, double* %127, i64 3
  store double %126, double* %128, align 8, !tbaa !7
  %129 = load i32, i32* %nd4i, align 4, !tbaa !5
  %130 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %129)
  %131 = load double, double* %130, !tbaa !7
  %132 = load double*, double** %4, align 8, !tbaa !1
  %133 = getelementptr inbounds double, double* %132, i64 4
  store double %131, double* %133, align 8, !tbaa !7
  %134 = load i32, i32* %nd5i, align 4, !tbaa !5
  %135 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %134)
  %136 = load double, double* %135, !tbaa !7
  %137 = load double*, double** %4, align 8, !tbaa !1
  %138 = getelementptr inbounds double, double* %137, i64 5
  store double %136, double* %138, align 8, !tbaa !7
  %139 = load i32, i32* %nd6i, align 4, !tbaa !5
  %140 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %139)
  %141 = load double, double* %140, !tbaa !7
  %142 = load double*, double** %4, align 8, !tbaa !1
  %143 = getelementptr inbounds double, double* %142, i64 6
  store double %141, double* %143, align 8, !tbaa !7
  %144 = load i32, i32* %nd7i, align 4, !tbaa !5
  %145 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %144)
  %146 = load double, double* %145, !tbaa !7
  %147 = load double*, double** %4, align 8, !tbaa !1
  %148 = getelementptr inbounds double, double* %147, i64 7
  store double %146, double* %148, align 8, !tbaa !7
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL24CalcElemVolumeDerivativePdS_S_PKdS1_S1_(double* %dvdx, double* %dvdy, double* %dvdz, double* %x, double* %y, double* %z) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  store double* %dvdx, double** %1, align 8, !tbaa !1
  store double* %dvdy, double** %2, align 8, !tbaa !1
  store double* %dvdz, double** %3, align 8, !tbaa !1
  store double* %x, double** %4, align 8, !tbaa !1
  store double* %y, double** %5, align 8, !tbaa !1
  store double* %z, double** %6, align 8, !tbaa !1
  %7 = load double*, double** %4, align 8, !tbaa !1
  %8 = getelementptr inbounds double, double* %7, i64 1
  %9 = load double, double* %8, align 8, !tbaa !7
  %10 = load double*, double** %4, align 8, !tbaa !1
  %11 = getelementptr inbounds double, double* %10, i64 2
  %12 = load double, double* %11, align 8, !tbaa !7
  %13 = load double*, double** %4, align 8, !tbaa !1
  %14 = getelementptr inbounds double, double* %13, i64 3
  %15 = load double, double* %14, align 8, !tbaa !7
  %16 = load double*, double** %4, align 8, !tbaa !1
  %17 = getelementptr inbounds double, double* %16, i64 4
  %18 = load double, double* %17, align 8, !tbaa !7
  %19 = load double*, double** %4, align 8, !tbaa !1
  %20 = getelementptr inbounds double, double* %19, i64 5
  %21 = load double, double* %20, align 8, !tbaa !7
  %22 = load double*, double** %4, align 8, !tbaa !1
  %23 = getelementptr inbounds double, double* %22, i64 7
  %24 = load double, double* %23, align 8, !tbaa !7
  %25 = load double*, double** %5, align 8, !tbaa !1
  %26 = getelementptr inbounds double, double* %25, i64 1
  %27 = load double, double* %26, align 8, !tbaa !7
  %28 = load double*, double** %5, align 8, !tbaa !1
  %29 = getelementptr inbounds double, double* %28, i64 2
  %30 = load double, double* %29, align 8, !tbaa !7
  %31 = load double*, double** %5, align 8, !tbaa !1
  %32 = getelementptr inbounds double, double* %31, i64 3
  %33 = load double, double* %32, align 8, !tbaa !7
  %34 = load double*, double** %5, align 8, !tbaa !1
  %35 = getelementptr inbounds double, double* %34, i64 4
  %36 = load double, double* %35, align 8, !tbaa !7
  %37 = load double*, double** %5, align 8, !tbaa !1
  %38 = getelementptr inbounds double, double* %37, i64 5
  %39 = load double, double* %38, align 8, !tbaa !7
  %40 = load double*, double** %5, align 8, !tbaa !1
  %41 = getelementptr inbounds double, double* %40, i64 7
  %42 = load double, double* %41, align 8, !tbaa !7
  %43 = load double*, double** %6, align 8, !tbaa !1
  %44 = getelementptr inbounds double, double* %43, i64 1
  %45 = load double, double* %44, align 8, !tbaa !7
  %46 = load double*, double** %6, align 8, !tbaa !1
  %47 = getelementptr inbounds double, double* %46, i64 2
  %48 = load double, double* %47, align 8, !tbaa !7
  %49 = load double*, double** %6, align 8, !tbaa !1
  %50 = getelementptr inbounds double, double* %49, i64 3
  %51 = load double, double* %50, align 8, !tbaa !7
  %52 = load double*, double** %6, align 8, !tbaa !1
  %53 = getelementptr inbounds double, double* %52, i64 4
  %54 = load double, double* %53, align 8, !tbaa !7
  %55 = load double*, double** %6, align 8, !tbaa !1
  %56 = getelementptr inbounds double, double* %55, i64 5
  %57 = load double, double* %56, align 8, !tbaa !7
  %58 = load double*, double** %6, align 8, !tbaa !1
  %59 = getelementptr inbounds double, double* %58, i64 7
  %60 = load double, double* %59, align 8, !tbaa !7
  %61 = load double*, double** %1, align 8, !tbaa !1
  %62 = getelementptr inbounds double, double* %61, i64 0
  %63 = load double*, double** %2, align 8, !tbaa !1
  %64 = getelementptr inbounds double, double* %63, i64 0
  %65 = load double*, double** %3, align 8, !tbaa !1
  %66 = getelementptr inbounds double, double* %65, i64 0
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %9, double %12, double %15, double %18, double %21, double %24, double %27, double %30, double %33, double %36, double %39, double %42, double %45, double %48, double %51, double %54, double %57, double %60, double* %62, double* %64, double* %66)
  %67 = load double*, double** %4, align 8, !tbaa !1
  %68 = getelementptr inbounds double, double* %67, i64 0
  %69 = load double, double* %68, align 8, !tbaa !7
  %70 = load double*, double** %4, align 8, !tbaa !1
  %71 = getelementptr inbounds double, double* %70, i64 1
  %72 = load double, double* %71, align 8, !tbaa !7
  %73 = load double*, double** %4, align 8, !tbaa !1
  %74 = getelementptr inbounds double, double* %73, i64 2
  %75 = load double, double* %74, align 8, !tbaa !7
  %76 = load double*, double** %4, align 8, !tbaa !1
  %77 = getelementptr inbounds double, double* %76, i64 7
  %78 = load double, double* %77, align 8, !tbaa !7
  %79 = load double*, double** %4, align 8, !tbaa !1
  %80 = getelementptr inbounds double, double* %79, i64 4
  %81 = load double, double* %80, align 8, !tbaa !7
  %82 = load double*, double** %4, align 8, !tbaa !1
  %83 = getelementptr inbounds double, double* %82, i64 6
  %84 = load double, double* %83, align 8, !tbaa !7
  %85 = load double*, double** %5, align 8, !tbaa !1
  %86 = getelementptr inbounds double, double* %85, i64 0
  %87 = load double, double* %86, align 8, !tbaa !7
  %88 = load double*, double** %5, align 8, !tbaa !1
  %89 = getelementptr inbounds double, double* %88, i64 1
  %90 = load double, double* %89, align 8, !tbaa !7
  %91 = load double*, double** %5, align 8, !tbaa !1
  %92 = getelementptr inbounds double, double* %91, i64 2
  %93 = load double, double* %92, align 8, !tbaa !7
  %94 = load double*, double** %5, align 8, !tbaa !1
  %95 = getelementptr inbounds double, double* %94, i64 7
  %96 = load double, double* %95, align 8, !tbaa !7
  %97 = load double*, double** %5, align 8, !tbaa !1
  %98 = getelementptr inbounds double, double* %97, i64 4
  %99 = load double, double* %98, align 8, !tbaa !7
  %100 = load double*, double** %5, align 8, !tbaa !1
  %101 = getelementptr inbounds double, double* %100, i64 6
  %102 = load double, double* %101, align 8, !tbaa !7
  %103 = load double*, double** %6, align 8, !tbaa !1
  %104 = getelementptr inbounds double, double* %103, i64 0
  %105 = load double, double* %104, align 8, !tbaa !7
  %106 = load double*, double** %6, align 8, !tbaa !1
  %107 = getelementptr inbounds double, double* %106, i64 1
  %108 = load double, double* %107, align 8, !tbaa !7
  %109 = load double*, double** %6, align 8, !tbaa !1
  %110 = getelementptr inbounds double, double* %109, i64 2
  %111 = load double, double* %110, align 8, !tbaa !7
  %112 = load double*, double** %6, align 8, !tbaa !1
  %113 = getelementptr inbounds double, double* %112, i64 7
  %114 = load double, double* %113, align 8, !tbaa !7
  %115 = load double*, double** %6, align 8, !tbaa !1
  %116 = getelementptr inbounds double, double* %115, i64 4
  %117 = load double, double* %116, align 8, !tbaa !7
  %118 = load double*, double** %6, align 8, !tbaa !1
  %119 = getelementptr inbounds double, double* %118, i64 6
  %120 = load double, double* %119, align 8, !tbaa !7
  %121 = load double*, double** %1, align 8, !tbaa !1
  %122 = getelementptr inbounds double, double* %121, i64 3
  %123 = load double*, double** %2, align 8, !tbaa !1
  %124 = getelementptr inbounds double, double* %123, i64 3
  %125 = load double*, double** %3, align 8, !tbaa !1
  %126 = getelementptr inbounds double, double* %125, i64 3
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %69, double %72, double %75, double %78, double %81, double %84, double %87, double %90, double %93, double %96, double %99, double %102, double %105, double %108, double %111, double %114, double %117, double %120, double* %122, double* %124, double* %126)
  %127 = load double*, double** %4, align 8, !tbaa !1
  %128 = getelementptr inbounds double, double* %127, i64 3
  %129 = load double, double* %128, align 8, !tbaa !7
  %130 = load double*, double** %4, align 8, !tbaa !1
  %131 = getelementptr inbounds double, double* %130, i64 0
  %132 = load double, double* %131, align 8, !tbaa !7
  %133 = load double*, double** %4, align 8, !tbaa !1
  %134 = getelementptr inbounds double, double* %133, i64 1
  %135 = load double, double* %134, align 8, !tbaa !7
  %136 = load double*, double** %4, align 8, !tbaa !1
  %137 = getelementptr inbounds double, double* %136, i64 6
  %138 = load double, double* %137, align 8, !tbaa !7
  %139 = load double*, double** %4, align 8, !tbaa !1
  %140 = getelementptr inbounds double, double* %139, i64 7
  %141 = load double, double* %140, align 8, !tbaa !7
  %142 = load double*, double** %4, align 8, !tbaa !1
  %143 = getelementptr inbounds double, double* %142, i64 5
  %144 = load double, double* %143, align 8, !tbaa !7
  %145 = load double*, double** %5, align 8, !tbaa !1
  %146 = getelementptr inbounds double, double* %145, i64 3
  %147 = load double, double* %146, align 8, !tbaa !7
  %148 = load double*, double** %5, align 8, !tbaa !1
  %149 = getelementptr inbounds double, double* %148, i64 0
  %150 = load double, double* %149, align 8, !tbaa !7
  %151 = load double*, double** %5, align 8, !tbaa !1
  %152 = getelementptr inbounds double, double* %151, i64 1
  %153 = load double, double* %152, align 8, !tbaa !7
  %154 = load double*, double** %5, align 8, !tbaa !1
  %155 = getelementptr inbounds double, double* %154, i64 6
  %156 = load double, double* %155, align 8, !tbaa !7
  %157 = load double*, double** %5, align 8, !tbaa !1
  %158 = getelementptr inbounds double, double* %157, i64 7
  %159 = load double, double* %158, align 8, !tbaa !7
  %160 = load double*, double** %5, align 8, !tbaa !1
  %161 = getelementptr inbounds double, double* %160, i64 5
  %162 = load double, double* %161, align 8, !tbaa !7
  %163 = load double*, double** %6, align 8, !tbaa !1
  %164 = getelementptr inbounds double, double* %163, i64 3
  %165 = load double, double* %164, align 8, !tbaa !7
  %166 = load double*, double** %6, align 8, !tbaa !1
  %167 = getelementptr inbounds double, double* %166, i64 0
  %168 = load double, double* %167, align 8, !tbaa !7
  %169 = load double*, double** %6, align 8, !tbaa !1
  %170 = getelementptr inbounds double, double* %169, i64 1
  %171 = load double, double* %170, align 8, !tbaa !7
  %172 = load double*, double** %6, align 8, !tbaa !1
  %173 = getelementptr inbounds double, double* %172, i64 6
  %174 = load double, double* %173, align 8, !tbaa !7
  %175 = load double*, double** %6, align 8, !tbaa !1
  %176 = getelementptr inbounds double, double* %175, i64 7
  %177 = load double, double* %176, align 8, !tbaa !7
  %178 = load double*, double** %6, align 8, !tbaa !1
  %179 = getelementptr inbounds double, double* %178, i64 5
  %180 = load double, double* %179, align 8, !tbaa !7
  %181 = load double*, double** %1, align 8, !tbaa !1
  %182 = getelementptr inbounds double, double* %181, i64 2
  %183 = load double*, double** %2, align 8, !tbaa !1
  %184 = getelementptr inbounds double, double* %183, i64 2
  %185 = load double*, double** %3, align 8, !tbaa !1
  %186 = getelementptr inbounds double, double* %185, i64 2
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %129, double %132, double %135, double %138, double %141, double %144, double %147, double %150, double %153, double %156, double %159, double %162, double %165, double %168, double %171, double %174, double %177, double %180, double* %182, double* %184, double* %186)
  %187 = load double*, double** %4, align 8, !tbaa !1
  %188 = getelementptr inbounds double, double* %187, i64 2
  %189 = load double, double* %188, align 8, !tbaa !7
  %190 = load double*, double** %4, align 8, !tbaa !1
  %191 = getelementptr inbounds double, double* %190, i64 3
  %192 = load double, double* %191, align 8, !tbaa !7
  %193 = load double*, double** %4, align 8, !tbaa !1
  %194 = getelementptr inbounds double, double* %193, i64 0
  %195 = load double, double* %194, align 8, !tbaa !7
  %196 = load double*, double** %4, align 8, !tbaa !1
  %197 = getelementptr inbounds double, double* %196, i64 5
  %198 = load double, double* %197, align 8, !tbaa !7
  %199 = load double*, double** %4, align 8, !tbaa !1
  %200 = getelementptr inbounds double, double* %199, i64 6
  %201 = load double, double* %200, align 8, !tbaa !7
  %202 = load double*, double** %4, align 8, !tbaa !1
  %203 = getelementptr inbounds double, double* %202, i64 4
  %204 = load double, double* %203, align 8, !tbaa !7
  %205 = load double*, double** %5, align 8, !tbaa !1
  %206 = getelementptr inbounds double, double* %205, i64 2
  %207 = load double, double* %206, align 8, !tbaa !7
  %208 = load double*, double** %5, align 8, !tbaa !1
  %209 = getelementptr inbounds double, double* %208, i64 3
  %210 = load double, double* %209, align 8, !tbaa !7
  %211 = load double*, double** %5, align 8, !tbaa !1
  %212 = getelementptr inbounds double, double* %211, i64 0
  %213 = load double, double* %212, align 8, !tbaa !7
  %214 = load double*, double** %5, align 8, !tbaa !1
  %215 = getelementptr inbounds double, double* %214, i64 5
  %216 = load double, double* %215, align 8, !tbaa !7
  %217 = load double*, double** %5, align 8, !tbaa !1
  %218 = getelementptr inbounds double, double* %217, i64 6
  %219 = load double, double* %218, align 8, !tbaa !7
  %220 = load double*, double** %5, align 8, !tbaa !1
  %221 = getelementptr inbounds double, double* %220, i64 4
  %222 = load double, double* %221, align 8, !tbaa !7
  %223 = load double*, double** %6, align 8, !tbaa !1
  %224 = getelementptr inbounds double, double* %223, i64 2
  %225 = load double, double* %224, align 8, !tbaa !7
  %226 = load double*, double** %6, align 8, !tbaa !1
  %227 = getelementptr inbounds double, double* %226, i64 3
  %228 = load double, double* %227, align 8, !tbaa !7
  %229 = load double*, double** %6, align 8, !tbaa !1
  %230 = getelementptr inbounds double, double* %229, i64 0
  %231 = load double, double* %230, align 8, !tbaa !7
  %232 = load double*, double** %6, align 8, !tbaa !1
  %233 = getelementptr inbounds double, double* %232, i64 5
  %234 = load double, double* %233, align 8, !tbaa !7
  %235 = load double*, double** %6, align 8, !tbaa !1
  %236 = getelementptr inbounds double, double* %235, i64 6
  %237 = load double, double* %236, align 8, !tbaa !7
  %238 = load double*, double** %6, align 8, !tbaa !1
  %239 = getelementptr inbounds double, double* %238, i64 4
  %240 = load double, double* %239, align 8, !tbaa !7
  %241 = load double*, double** %1, align 8, !tbaa !1
  %242 = getelementptr inbounds double, double* %241, i64 1
  %243 = load double*, double** %2, align 8, !tbaa !1
  %244 = getelementptr inbounds double, double* %243, i64 1
  %245 = load double*, double** %3, align 8, !tbaa !1
  %246 = getelementptr inbounds double, double* %245, i64 1
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %189, double %192, double %195, double %198, double %201, double %204, double %207, double %210, double %213, double %216, double %219, double %222, double %225, double %228, double %231, double %234, double %237, double %240, double* %242, double* %244, double* %246)
  %247 = load double*, double** %4, align 8, !tbaa !1
  %248 = getelementptr inbounds double, double* %247, i64 7
  %249 = load double, double* %248, align 8, !tbaa !7
  %250 = load double*, double** %4, align 8, !tbaa !1
  %251 = getelementptr inbounds double, double* %250, i64 6
  %252 = load double, double* %251, align 8, !tbaa !7
  %253 = load double*, double** %4, align 8, !tbaa !1
  %254 = getelementptr inbounds double, double* %253, i64 5
  %255 = load double, double* %254, align 8, !tbaa !7
  %256 = load double*, double** %4, align 8, !tbaa !1
  %257 = getelementptr inbounds double, double* %256, i64 0
  %258 = load double, double* %257, align 8, !tbaa !7
  %259 = load double*, double** %4, align 8, !tbaa !1
  %260 = getelementptr inbounds double, double* %259, i64 3
  %261 = load double, double* %260, align 8, !tbaa !7
  %262 = load double*, double** %4, align 8, !tbaa !1
  %263 = getelementptr inbounds double, double* %262, i64 1
  %264 = load double, double* %263, align 8, !tbaa !7
  %265 = load double*, double** %5, align 8, !tbaa !1
  %266 = getelementptr inbounds double, double* %265, i64 7
  %267 = load double, double* %266, align 8, !tbaa !7
  %268 = load double*, double** %5, align 8, !tbaa !1
  %269 = getelementptr inbounds double, double* %268, i64 6
  %270 = load double, double* %269, align 8, !tbaa !7
  %271 = load double*, double** %5, align 8, !tbaa !1
  %272 = getelementptr inbounds double, double* %271, i64 5
  %273 = load double, double* %272, align 8, !tbaa !7
  %274 = load double*, double** %5, align 8, !tbaa !1
  %275 = getelementptr inbounds double, double* %274, i64 0
  %276 = load double, double* %275, align 8, !tbaa !7
  %277 = load double*, double** %5, align 8, !tbaa !1
  %278 = getelementptr inbounds double, double* %277, i64 3
  %279 = load double, double* %278, align 8, !tbaa !7
  %280 = load double*, double** %5, align 8, !tbaa !1
  %281 = getelementptr inbounds double, double* %280, i64 1
  %282 = load double, double* %281, align 8, !tbaa !7
  %283 = load double*, double** %6, align 8, !tbaa !1
  %284 = getelementptr inbounds double, double* %283, i64 7
  %285 = load double, double* %284, align 8, !tbaa !7
  %286 = load double*, double** %6, align 8, !tbaa !1
  %287 = getelementptr inbounds double, double* %286, i64 6
  %288 = load double, double* %287, align 8, !tbaa !7
  %289 = load double*, double** %6, align 8, !tbaa !1
  %290 = getelementptr inbounds double, double* %289, i64 5
  %291 = load double, double* %290, align 8, !tbaa !7
  %292 = load double*, double** %6, align 8, !tbaa !1
  %293 = getelementptr inbounds double, double* %292, i64 0
  %294 = load double, double* %293, align 8, !tbaa !7
  %295 = load double*, double** %6, align 8, !tbaa !1
  %296 = getelementptr inbounds double, double* %295, i64 3
  %297 = load double, double* %296, align 8, !tbaa !7
  %298 = load double*, double** %6, align 8, !tbaa !1
  %299 = getelementptr inbounds double, double* %298, i64 1
  %300 = load double, double* %299, align 8, !tbaa !7
  %301 = load double*, double** %1, align 8, !tbaa !1
  %302 = getelementptr inbounds double, double* %301, i64 4
  %303 = load double*, double** %2, align 8, !tbaa !1
  %304 = getelementptr inbounds double, double* %303, i64 4
  %305 = load double*, double** %3, align 8, !tbaa !1
  %306 = getelementptr inbounds double, double* %305, i64 4
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %249, double %252, double %255, double %258, double %261, double %264, double %267, double %270, double %273, double %276, double %279, double %282, double %285, double %288, double %291, double %294, double %297, double %300, double* %302, double* %304, double* %306)
  %307 = load double*, double** %4, align 8, !tbaa !1
  %308 = getelementptr inbounds double, double* %307, i64 4
  %309 = load double, double* %308, align 8, !tbaa !7
  %310 = load double*, double** %4, align 8, !tbaa !1
  %311 = getelementptr inbounds double, double* %310, i64 7
  %312 = load double, double* %311, align 8, !tbaa !7
  %313 = load double*, double** %4, align 8, !tbaa !1
  %314 = getelementptr inbounds double, double* %313, i64 6
  %315 = load double, double* %314, align 8, !tbaa !7
  %316 = load double*, double** %4, align 8, !tbaa !1
  %317 = getelementptr inbounds double, double* %316, i64 1
  %318 = load double, double* %317, align 8, !tbaa !7
  %319 = load double*, double** %4, align 8, !tbaa !1
  %320 = getelementptr inbounds double, double* %319, i64 0
  %321 = load double, double* %320, align 8, !tbaa !7
  %322 = load double*, double** %4, align 8, !tbaa !1
  %323 = getelementptr inbounds double, double* %322, i64 2
  %324 = load double, double* %323, align 8, !tbaa !7
  %325 = load double*, double** %5, align 8, !tbaa !1
  %326 = getelementptr inbounds double, double* %325, i64 4
  %327 = load double, double* %326, align 8, !tbaa !7
  %328 = load double*, double** %5, align 8, !tbaa !1
  %329 = getelementptr inbounds double, double* %328, i64 7
  %330 = load double, double* %329, align 8, !tbaa !7
  %331 = load double*, double** %5, align 8, !tbaa !1
  %332 = getelementptr inbounds double, double* %331, i64 6
  %333 = load double, double* %332, align 8, !tbaa !7
  %334 = load double*, double** %5, align 8, !tbaa !1
  %335 = getelementptr inbounds double, double* %334, i64 1
  %336 = load double, double* %335, align 8, !tbaa !7
  %337 = load double*, double** %5, align 8, !tbaa !1
  %338 = getelementptr inbounds double, double* %337, i64 0
  %339 = load double, double* %338, align 8, !tbaa !7
  %340 = load double*, double** %5, align 8, !tbaa !1
  %341 = getelementptr inbounds double, double* %340, i64 2
  %342 = load double, double* %341, align 8, !tbaa !7
  %343 = load double*, double** %6, align 8, !tbaa !1
  %344 = getelementptr inbounds double, double* %343, i64 4
  %345 = load double, double* %344, align 8, !tbaa !7
  %346 = load double*, double** %6, align 8, !tbaa !1
  %347 = getelementptr inbounds double, double* %346, i64 7
  %348 = load double, double* %347, align 8, !tbaa !7
  %349 = load double*, double** %6, align 8, !tbaa !1
  %350 = getelementptr inbounds double, double* %349, i64 6
  %351 = load double, double* %350, align 8, !tbaa !7
  %352 = load double*, double** %6, align 8, !tbaa !1
  %353 = getelementptr inbounds double, double* %352, i64 1
  %354 = load double, double* %353, align 8, !tbaa !7
  %355 = load double*, double** %6, align 8, !tbaa !1
  %356 = getelementptr inbounds double, double* %355, i64 0
  %357 = load double, double* %356, align 8, !tbaa !7
  %358 = load double*, double** %6, align 8, !tbaa !1
  %359 = getelementptr inbounds double, double* %358, i64 2
  %360 = load double, double* %359, align 8, !tbaa !7
  %361 = load double*, double** %1, align 8, !tbaa !1
  %362 = getelementptr inbounds double, double* %361, i64 5
  %363 = load double*, double** %2, align 8, !tbaa !1
  %364 = getelementptr inbounds double, double* %363, i64 5
  %365 = load double*, double** %3, align 8, !tbaa !1
  %366 = getelementptr inbounds double, double* %365, i64 5
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %309, double %312, double %315, double %318, double %321, double %324, double %327, double %330, double %333, double %336, double %339, double %342, double %345, double %348, double %351, double %354, double %357, double %360, double* %362, double* %364, double* %366)
  %367 = load double*, double** %4, align 8, !tbaa !1
  %368 = getelementptr inbounds double, double* %367, i64 5
  %369 = load double, double* %368, align 8, !tbaa !7
  %370 = load double*, double** %4, align 8, !tbaa !1
  %371 = getelementptr inbounds double, double* %370, i64 4
  %372 = load double, double* %371, align 8, !tbaa !7
  %373 = load double*, double** %4, align 8, !tbaa !1
  %374 = getelementptr inbounds double, double* %373, i64 7
  %375 = load double, double* %374, align 8, !tbaa !7
  %376 = load double*, double** %4, align 8, !tbaa !1
  %377 = getelementptr inbounds double, double* %376, i64 2
  %378 = load double, double* %377, align 8, !tbaa !7
  %379 = load double*, double** %4, align 8, !tbaa !1
  %380 = getelementptr inbounds double, double* %379, i64 1
  %381 = load double, double* %380, align 8, !tbaa !7
  %382 = load double*, double** %4, align 8, !tbaa !1
  %383 = getelementptr inbounds double, double* %382, i64 3
  %384 = load double, double* %383, align 8, !tbaa !7
  %385 = load double*, double** %5, align 8, !tbaa !1
  %386 = getelementptr inbounds double, double* %385, i64 5
  %387 = load double, double* %386, align 8, !tbaa !7
  %388 = load double*, double** %5, align 8, !tbaa !1
  %389 = getelementptr inbounds double, double* %388, i64 4
  %390 = load double, double* %389, align 8, !tbaa !7
  %391 = load double*, double** %5, align 8, !tbaa !1
  %392 = getelementptr inbounds double, double* %391, i64 7
  %393 = load double, double* %392, align 8, !tbaa !7
  %394 = load double*, double** %5, align 8, !tbaa !1
  %395 = getelementptr inbounds double, double* %394, i64 2
  %396 = load double, double* %395, align 8, !tbaa !7
  %397 = load double*, double** %5, align 8, !tbaa !1
  %398 = getelementptr inbounds double, double* %397, i64 1
  %399 = load double, double* %398, align 8, !tbaa !7
  %400 = load double*, double** %5, align 8, !tbaa !1
  %401 = getelementptr inbounds double, double* %400, i64 3
  %402 = load double, double* %401, align 8, !tbaa !7
  %403 = load double*, double** %6, align 8, !tbaa !1
  %404 = getelementptr inbounds double, double* %403, i64 5
  %405 = load double, double* %404, align 8, !tbaa !7
  %406 = load double*, double** %6, align 8, !tbaa !1
  %407 = getelementptr inbounds double, double* %406, i64 4
  %408 = load double, double* %407, align 8, !tbaa !7
  %409 = load double*, double** %6, align 8, !tbaa !1
  %410 = getelementptr inbounds double, double* %409, i64 7
  %411 = load double, double* %410, align 8, !tbaa !7
  %412 = load double*, double** %6, align 8, !tbaa !1
  %413 = getelementptr inbounds double, double* %412, i64 2
  %414 = load double, double* %413, align 8, !tbaa !7
  %415 = load double*, double** %6, align 8, !tbaa !1
  %416 = getelementptr inbounds double, double* %415, i64 1
  %417 = load double, double* %416, align 8, !tbaa !7
  %418 = load double*, double** %6, align 8, !tbaa !1
  %419 = getelementptr inbounds double, double* %418, i64 3
  %420 = load double, double* %419, align 8, !tbaa !7
  %421 = load double*, double** %1, align 8, !tbaa !1
  %422 = getelementptr inbounds double, double* %421, i64 6
  %423 = load double*, double** %2, align 8, !tbaa !1
  %424 = getelementptr inbounds double, double* %423, i64 6
  %425 = load double*, double** %3, align 8, !tbaa !1
  %426 = getelementptr inbounds double, double* %425, i64 6
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %369, double %372, double %375, double %378, double %381, double %384, double %387, double %390, double %393, double %396, double %399, double %402, double %405, double %408, double %411, double %414, double %417, double %420, double* %422, double* %424, double* %426)
  %427 = load double*, double** %4, align 8, !tbaa !1
  %428 = getelementptr inbounds double, double* %427, i64 6
  %429 = load double, double* %428, align 8, !tbaa !7
  %430 = load double*, double** %4, align 8, !tbaa !1
  %431 = getelementptr inbounds double, double* %430, i64 5
  %432 = load double, double* %431, align 8, !tbaa !7
  %433 = load double*, double** %4, align 8, !tbaa !1
  %434 = getelementptr inbounds double, double* %433, i64 4
  %435 = load double, double* %434, align 8, !tbaa !7
  %436 = load double*, double** %4, align 8, !tbaa !1
  %437 = getelementptr inbounds double, double* %436, i64 3
  %438 = load double, double* %437, align 8, !tbaa !7
  %439 = load double*, double** %4, align 8, !tbaa !1
  %440 = getelementptr inbounds double, double* %439, i64 2
  %441 = load double, double* %440, align 8, !tbaa !7
  %442 = load double*, double** %4, align 8, !tbaa !1
  %443 = getelementptr inbounds double, double* %442, i64 0
  %444 = load double, double* %443, align 8, !tbaa !7
  %445 = load double*, double** %5, align 8, !tbaa !1
  %446 = getelementptr inbounds double, double* %445, i64 6
  %447 = load double, double* %446, align 8, !tbaa !7
  %448 = load double*, double** %5, align 8, !tbaa !1
  %449 = getelementptr inbounds double, double* %448, i64 5
  %450 = load double, double* %449, align 8, !tbaa !7
  %451 = load double*, double** %5, align 8, !tbaa !1
  %452 = getelementptr inbounds double, double* %451, i64 4
  %453 = load double, double* %452, align 8, !tbaa !7
  %454 = load double*, double** %5, align 8, !tbaa !1
  %455 = getelementptr inbounds double, double* %454, i64 3
  %456 = load double, double* %455, align 8, !tbaa !7
  %457 = load double*, double** %5, align 8, !tbaa !1
  %458 = getelementptr inbounds double, double* %457, i64 2
  %459 = load double, double* %458, align 8, !tbaa !7
  %460 = load double*, double** %5, align 8, !tbaa !1
  %461 = getelementptr inbounds double, double* %460, i64 0
  %462 = load double, double* %461, align 8, !tbaa !7
  %463 = load double*, double** %6, align 8, !tbaa !1
  %464 = getelementptr inbounds double, double* %463, i64 6
  %465 = load double, double* %464, align 8, !tbaa !7
  %466 = load double*, double** %6, align 8, !tbaa !1
  %467 = getelementptr inbounds double, double* %466, i64 5
  %468 = load double, double* %467, align 8, !tbaa !7
  %469 = load double*, double** %6, align 8, !tbaa !1
  %470 = getelementptr inbounds double, double* %469, i64 4
  %471 = load double, double* %470, align 8, !tbaa !7
  %472 = load double*, double** %6, align 8, !tbaa !1
  %473 = getelementptr inbounds double, double* %472, i64 3
  %474 = load double, double* %473, align 8, !tbaa !7
  %475 = load double*, double** %6, align 8, !tbaa !1
  %476 = getelementptr inbounds double, double* %475, i64 2
  %477 = load double, double* %476, align 8, !tbaa !7
  %478 = load double*, double** %6, align 8, !tbaa !1
  %479 = getelementptr inbounds double, double* %478, i64 0
  %480 = load double, double* %479, align 8, !tbaa !7
  %481 = load double*, double** %1, align 8, !tbaa !1
  %482 = getelementptr inbounds double, double* %481, i64 7
  %483 = load double*, double** %2, align 8, !tbaa !1
  %484 = getelementptr inbounds double, double* %483, i64 7
  %485 = load double*, double** %3, align 8, !tbaa !1
  %486 = getelementptr inbounds double, double* %485, i64 7
  call void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %429, double %432, double %435, double %438, double %441, double %444, double %447, double %450, double %453, double %456, double %459, double %462, double %465, double %468, double %471, double %474, double %477, double %480, double* %482, double* %484, double* %486)
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain1vEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 42
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL28CalcFBHourglassForceForElemsPdS_S_S_S_S_S_d(double* %determ, double* %x8n, double* %y8n, double* %z8n, double* %dvdx, double* %dvdy, double* %dvdz, double %hourg) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double, align 8
  %numElem = alloca i32, align 4
  %numElem8 = alloca i32, align 4
  %fx_elem = alloca double*, align 8
  %fy_elem = alloca double*, align 8
  %fz_elem = alloca double*, align 8
  %gamma = alloca [4 x [8 x double]], align 16
  %i2 = alloca i32, align 4
  %fx_local = alloca double*, align 8
  %fy_local = alloca double*, align 8
  %fz_local = alloca double*, align 8
  %hgfx = alloca [8 x double], align 16
  %hgfy = alloca [8 x double], align 16
  %hgfz = alloca [8 x double], align 16
  %coefficient = alloca double, align 8
  %hourgam0 = alloca [4 x double], align 16
  %hourgam1 = alloca [4 x double], align 16
  %hourgam2 = alloca [4 x double], align 16
  %hourgam3 = alloca [4 x double], align 16
  %hourgam4 = alloca [4 x double], align 16
  %hourgam5 = alloca [4 x double], align 16
  %hourgam6 = alloca [4 x double], align 16
  %hourgam7 = alloca [4 x double], align 16
  %xd1 = alloca [8 x double], align 16
  %yd1 = alloca [8 x double], align 16
  %zd1 = alloca [8 x double], align 16
  %elemToNode = alloca i32*, align 8
  %i3 = alloca i32, align 4
  %volinv = alloca double, align 8
  %ss1 = alloca double, align 8
  %mass1 = alloca double, align 8
  %volume13 = alloca double, align 8
  %i1 = alloca i32, align 4
  %hourmodx = alloca double, align 8
  %hourmody = alloca double, align 8
  %hourmodz = alloca double, align 8
  %n0si2 = alloca i32, align 4
  %n1si2 = alloca i32, align 4
  %n2si2 = alloca i32, align 4
  %n3si2 = alloca i32, align 4
  %n4si2 = alloca i32, align 4
  %n5si2 = alloca i32, align 4
  %n6si2 = alloca i32, align 4
  %n7si2 = alloca i32, align 4
  %numNode = alloca i32, align 4
  %gnode = alloca i32, align 4
  %count = alloca i32, align 4
  %start = alloca i32, align 4
  %fx = alloca double, align 8
  %fy = alloca double, align 8
  %fz = alloca double, align 8
  %i = alloca i32, align 4
  %elem = alloca i32, align 4
  store double* %determ, double** %1, align 8, !tbaa !1
  store double* %x8n, double** %2, align 8, !tbaa !1
  store double* %y8n, double** %3, align 8, !tbaa !1
  store double* %z8n, double** %4, align 8, !tbaa !1
  store double* %dvdx, double** %5, align 8, !tbaa !1
  store double* %dvdy, double** %6, align 8, !tbaa !1
  store double* %dvdz, double** %7, align 8, !tbaa !1
  store double %hourg, double* %8, align 8, !tbaa !7
  %9 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %10 = load i32, i32* %9, !tbaa !5
  store i32 %10, i32* %numElem, align 4, !tbaa !5
  %11 = load i32, i32* %numElem, align 4, !tbaa !5
  %12 = mul nsw i32 %11, 8
  store i32 %12, i32* %numElem8, align 4, !tbaa !5
  %13 = load i32, i32* %numElem8, align 4, !tbaa !5
  %14 = sext i32 %13 to i64
  %15 = call double* @_Z8AllocateIdEPT_m(i64 %14)
  store double* %15, double** %fx_elem, align 8, !tbaa !1
  %16 = load i32, i32* %numElem8, align 4, !tbaa !5
  %17 = sext i32 %16 to i64
  %18 = call double* @_Z8AllocateIdEPT_m(i64 %17)
  store double* %18, double** %fy_elem, align 8, !tbaa !1
  %19 = load i32, i32* %numElem8, align 4, !tbaa !5
  %20 = sext i32 %19 to i64
  %21 = call double* @_Z8AllocateIdEPT_m(i64 %20)
  store double* %21, double** %fz_elem, align 8, !tbaa !1
  %22 = bitcast [4 x [8 x double]]* %gamma to i8*
  call void @llvm.lifetime.start(i64 256, i8* %22) #1
  %23 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %24 = getelementptr inbounds [8 x double], [8 x double]* %23, i32 0, i64 0
  store double 1.000000e+00, double* %24, align 8, !tbaa !7
  %25 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %26 = getelementptr inbounds [8 x double], [8 x double]* %25, i32 0, i64 1
  store double 1.000000e+00, double* %26, align 8, !tbaa !7
  %27 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %28 = getelementptr inbounds [8 x double], [8 x double]* %27, i32 0, i64 2
  store double -1.000000e+00, double* %28, align 8, !tbaa !7
  %29 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %30 = getelementptr inbounds [8 x double], [8 x double]* %29, i32 0, i64 3
  store double -1.000000e+00, double* %30, align 8, !tbaa !7
  %31 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %32 = getelementptr inbounds [8 x double], [8 x double]* %31, i32 0, i64 4
  store double -1.000000e+00, double* %32, align 8, !tbaa !7
  %33 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %34 = getelementptr inbounds [8 x double], [8 x double]* %33, i32 0, i64 5
  store double -1.000000e+00, double* %34, align 8, !tbaa !7
  %35 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %36 = getelementptr inbounds [8 x double], [8 x double]* %35, i32 0, i64 6
  store double 1.000000e+00, double* %36, align 8, !tbaa !7
  %37 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 0
  %38 = getelementptr inbounds [8 x double], [8 x double]* %37, i32 0, i64 7
  store double 1.000000e+00, double* %38, align 8, !tbaa !7
  %39 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %40 = getelementptr inbounds [8 x double], [8 x double]* %39, i32 0, i64 0
  store double 1.000000e+00, double* %40, align 8, !tbaa !7
  %41 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %42 = getelementptr inbounds [8 x double], [8 x double]* %41, i32 0, i64 1
  store double -1.000000e+00, double* %42, align 8, !tbaa !7
  %43 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %44 = getelementptr inbounds [8 x double], [8 x double]* %43, i32 0, i64 2
  store double -1.000000e+00, double* %44, align 8, !tbaa !7
  %45 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %46 = getelementptr inbounds [8 x double], [8 x double]* %45, i32 0, i64 3
  store double 1.000000e+00, double* %46, align 8, !tbaa !7
  %47 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %48 = getelementptr inbounds [8 x double], [8 x double]* %47, i32 0, i64 4
  store double -1.000000e+00, double* %48, align 8, !tbaa !7
  %49 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %50 = getelementptr inbounds [8 x double], [8 x double]* %49, i32 0, i64 5
  store double 1.000000e+00, double* %50, align 8, !tbaa !7
  %51 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %52 = getelementptr inbounds [8 x double], [8 x double]* %51, i32 0, i64 6
  store double 1.000000e+00, double* %52, align 8, !tbaa !7
  %53 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 1
  %54 = getelementptr inbounds [8 x double], [8 x double]* %53, i32 0, i64 7
  store double -1.000000e+00, double* %54, align 8, !tbaa !7
  %55 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %56 = getelementptr inbounds [8 x double], [8 x double]* %55, i32 0, i64 0
  store double 1.000000e+00, double* %56, align 8, !tbaa !7
  %57 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %58 = getelementptr inbounds [8 x double], [8 x double]* %57, i32 0, i64 1
  store double -1.000000e+00, double* %58, align 8, !tbaa !7
  %59 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %60 = getelementptr inbounds [8 x double], [8 x double]* %59, i32 0, i64 2
  store double 1.000000e+00, double* %60, align 8, !tbaa !7
  %61 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %62 = getelementptr inbounds [8 x double], [8 x double]* %61, i32 0, i64 3
  store double -1.000000e+00, double* %62, align 8, !tbaa !7
  %63 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %64 = getelementptr inbounds [8 x double], [8 x double]* %63, i32 0, i64 4
  store double 1.000000e+00, double* %64, align 8, !tbaa !7
  %65 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %66 = getelementptr inbounds [8 x double], [8 x double]* %65, i32 0, i64 5
  store double -1.000000e+00, double* %66, align 8, !tbaa !7
  %67 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %68 = getelementptr inbounds [8 x double], [8 x double]* %67, i32 0, i64 6
  store double 1.000000e+00, double* %68, align 8, !tbaa !7
  %69 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 2
  %70 = getelementptr inbounds [8 x double], [8 x double]* %69, i32 0, i64 7
  store double -1.000000e+00, double* %70, align 8, !tbaa !7
  %71 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %72 = getelementptr inbounds [8 x double], [8 x double]* %71, i32 0, i64 0
  store double -1.000000e+00, double* %72, align 8, !tbaa !7
  %73 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %74 = getelementptr inbounds [8 x double], [8 x double]* %73, i32 0, i64 1
  store double 1.000000e+00, double* %74, align 8, !tbaa !7
  %75 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %76 = getelementptr inbounds [8 x double], [8 x double]* %75, i32 0, i64 2
  store double -1.000000e+00, double* %76, align 8, !tbaa !7
  %77 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %78 = getelementptr inbounds [8 x double], [8 x double]* %77, i32 0, i64 3
  store double 1.000000e+00, double* %78, align 8, !tbaa !7
  %79 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %80 = getelementptr inbounds [8 x double], [8 x double]* %79, i32 0, i64 4
  store double 1.000000e+00, double* %80, align 8, !tbaa !7
  %81 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %82 = getelementptr inbounds [8 x double], [8 x double]* %81, i32 0, i64 5
  store double -1.000000e+00, double* %82, align 8, !tbaa !7
  %83 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %84 = getelementptr inbounds [8 x double], [8 x double]* %83, i32 0, i64 6
  store double 1.000000e+00, double* %84, align 8, !tbaa !7
  %85 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 3
  %86 = getelementptr inbounds [8 x double], [8 x double]* %85, i32 0, i64 7
  store double -1.000000e+00, double* %86, align 8, !tbaa !7
  store i32 0, i32* %i2, align 4, !tbaa !5
  br label %87

; <label>:87                                      ; preds = %985, %0
  %88 = load i32, i32* %i2, align 4, !tbaa !5
  %89 = load i32, i32* %numElem, align 4, !tbaa !5
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %988

; <label>:91                                      ; preds = %87
  %92 = bitcast [8 x double]* %hgfx to i8*
  call void @llvm.lifetime.start(i64 64, i8* %92) #1
  %93 = bitcast [8 x double]* %hgfy to i8*
  call void @llvm.lifetime.start(i64 64, i8* %93) #1
  %94 = bitcast [8 x double]* %hgfz to i8*
  call void @llvm.lifetime.start(i64 64, i8* %94) #1
  %95 = bitcast [8 x double]* %xd1 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %95) #1
  %96 = bitcast [8 x double]* %yd1 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %96) #1
  %97 = bitcast [8 x double]* %zd1 to i8*
  call void @llvm.lifetime.start(i64 64, i8* %97) #1
  %98 = load i32, i32* %i2, align 4, !tbaa !5
  %99 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %98)
  store i32* %99, i32** %elemToNode, align 8, !tbaa !1
  %100 = load i32, i32* %i2, align 4, !tbaa !5
  %101 = mul nsw i32 8, %100
  store i32 %101, i32* %i3, align 4, !tbaa !5
  %102 = load i32, i32* %i2, align 4, !tbaa !5
  %103 = sext i32 %102 to i64
  %104 = load double*, double** %1, align 8, !tbaa !1
  %105 = getelementptr inbounds double, double* %104, i64 %103
  %106 = load double, double* %105, align 8, !tbaa !7
  %107 = fdiv double 1.000000e+00, %106
  store double %107, double* %volinv, align 8, !tbaa !7
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %108

; <label>:108                                     ; preds = %711, %91
  %109 = load i32, i32* %i1, align 4, !tbaa !5
  %110 = icmp slt i32 %109, 4
  br i1 %110, label %111, label %714

; <label>:111                                     ; preds = %108
  %112 = load i32, i32* %i3, align 4, !tbaa !5
  %113 = sext i32 %112 to i64
  %114 = load double*, double** %2, align 8, !tbaa !1
  %115 = getelementptr inbounds double, double* %114, i64 %113
  %116 = load double, double* %115, align 8, !tbaa !7
  %117 = load i32, i32* %i1, align 4, !tbaa !5
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %118
  %120 = getelementptr inbounds [8 x double], [8 x double]* %119, i32 0, i64 0
  %121 = load double, double* %120, align 8, !tbaa !7
  %122 = fmul double %116, %121
  %123 = load i32, i32* %i3, align 4, !tbaa !5
  %124 = add nsw i32 %123, 1
  %125 = sext i32 %124 to i64
  %126 = load double*, double** %2, align 8, !tbaa !1
  %127 = getelementptr inbounds double, double* %126, i64 %125
  %128 = load double, double* %127, align 8, !tbaa !7
  %129 = load i32, i32* %i1, align 4, !tbaa !5
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %130
  %132 = getelementptr inbounds [8 x double], [8 x double]* %131, i32 0, i64 1
  %133 = load double, double* %132, align 8, !tbaa !7
  %134 = fmul double %128, %133
  %135 = fadd double %122, %134
  %136 = load i32, i32* %i3, align 4, !tbaa !5
  %137 = add nsw i32 %136, 2
  %138 = sext i32 %137 to i64
  %139 = load double*, double** %2, align 8, !tbaa !1
  %140 = getelementptr inbounds double, double* %139, i64 %138
  %141 = load double, double* %140, align 8, !tbaa !7
  %142 = load i32, i32* %i1, align 4, !tbaa !5
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %143
  %145 = getelementptr inbounds [8 x double], [8 x double]* %144, i32 0, i64 2
  %146 = load double, double* %145, align 8, !tbaa !7
  %147 = fmul double %141, %146
  %148 = fadd double %135, %147
  %149 = load i32, i32* %i3, align 4, !tbaa !5
  %150 = add nsw i32 %149, 3
  %151 = sext i32 %150 to i64
  %152 = load double*, double** %2, align 8, !tbaa !1
  %153 = getelementptr inbounds double, double* %152, i64 %151
  %154 = load double, double* %153, align 8, !tbaa !7
  %155 = load i32, i32* %i1, align 4, !tbaa !5
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %156
  %158 = getelementptr inbounds [8 x double], [8 x double]* %157, i32 0, i64 3
  %159 = load double, double* %158, align 8, !tbaa !7
  %160 = fmul double %154, %159
  %161 = fadd double %148, %160
  %162 = load i32, i32* %i3, align 4, !tbaa !5
  %163 = add nsw i32 %162, 4
  %164 = sext i32 %163 to i64
  %165 = load double*, double** %2, align 8, !tbaa !1
  %166 = getelementptr inbounds double, double* %165, i64 %164
  %167 = load double, double* %166, align 8, !tbaa !7
  %168 = load i32, i32* %i1, align 4, !tbaa !5
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %169
  %171 = getelementptr inbounds [8 x double], [8 x double]* %170, i32 0, i64 4
  %172 = load double, double* %171, align 8, !tbaa !7
  %173 = fmul double %167, %172
  %174 = fadd double %161, %173
  %175 = load i32, i32* %i3, align 4, !tbaa !5
  %176 = add nsw i32 %175, 5
  %177 = sext i32 %176 to i64
  %178 = load double*, double** %2, align 8, !tbaa !1
  %179 = getelementptr inbounds double, double* %178, i64 %177
  %180 = load double, double* %179, align 8, !tbaa !7
  %181 = load i32, i32* %i1, align 4, !tbaa !5
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %182
  %184 = getelementptr inbounds [8 x double], [8 x double]* %183, i32 0, i64 5
  %185 = load double, double* %184, align 8, !tbaa !7
  %186 = fmul double %180, %185
  %187 = fadd double %174, %186
  %188 = load i32, i32* %i3, align 4, !tbaa !5
  %189 = add nsw i32 %188, 6
  %190 = sext i32 %189 to i64
  %191 = load double*, double** %2, align 8, !tbaa !1
  %192 = getelementptr inbounds double, double* %191, i64 %190
  %193 = load double, double* %192, align 8, !tbaa !7
  %194 = load i32, i32* %i1, align 4, !tbaa !5
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %195
  %197 = getelementptr inbounds [8 x double], [8 x double]* %196, i32 0, i64 6
  %198 = load double, double* %197, align 8, !tbaa !7
  %199 = fmul double %193, %198
  %200 = fadd double %187, %199
  %201 = load i32, i32* %i3, align 4, !tbaa !5
  %202 = add nsw i32 %201, 7
  %203 = sext i32 %202 to i64
  %204 = load double*, double** %2, align 8, !tbaa !1
  %205 = getelementptr inbounds double, double* %204, i64 %203
  %206 = load double, double* %205, align 8, !tbaa !7
  %207 = load i32, i32* %i1, align 4, !tbaa !5
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %208
  %210 = getelementptr inbounds [8 x double], [8 x double]* %209, i32 0, i64 7
  %211 = load double, double* %210, align 8, !tbaa !7
  %212 = fmul double %206, %211
  %213 = fadd double %200, %212
  store double %213, double* %hourmodx, align 8, !tbaa !7
  %214 = load i32, i32* %i3, align 4, !tbaa !5
  %215 = sext i32 %214 to i64
  %216 = load double*, double** %3, align 8, !tbaa !1
  %217 = getelementptr inbounds double, double* %216, i64 %215
  %218 = load double, double* %217, align 8, !tbaa !7
  %219 = load i32, i32* %i1, align 4, !tbaa !5
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %220
  %222 = getelementptr inbounds [8 x double], [8 x double]* %221, i32 0, i64 0
  %223 = load double, double* %222, align 8, !tbaa !7
  %224 = fmul double %218, %223
  %225 = load i32, i32* %i3, align 4, !tbaa !5
  %226 = add nsw i32 %225, 1
  %227 = sext i32 %226 to i64
  %228 = load double*, double** %3, align 8, !tbaa !1
  %229 = getelementptr inbounds double, double* %228, i64 %227
  %230 = load double, double* %229, align 8, !tbaa !7
  %231 = load i32, i32* %i1, align 4, !tbaa !5
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %232
  %234 = getelementptr inbounds [8 x double], [8 x double]* %233, i32 0, i64 1
  %235 = load double, double* %234, align 8, !tbaa !7
  %236 = fmul double %230, %235
  %237 = fadd double %224, %236
  %238 = load i32, i32* %i3, align 4, !tbaa !5
  %239 = add nsw i32 %238, 2
  %240 = sext i32 %239 to i64
  %241 = load double*, double** %3, align 8, !tbaa !1
  %242 = getelementptr inbounds double, double* %241, i64 %240
  %243 = load double, double* %242, align 8, !tbaa !7
  %244 = load i32, i32* %i1, align 4, !tbaa !5
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %245
  %247 = getelementptr inbounds [8 x double], [8 x double]* %246, i32 0, i64 2
  %248 = load double, double* %247, align 8, !tbaa !7
  %249 = fmul double %243, %248
  %250 = fadd double %237, %249
  %251 = load i32, i32* %i3, align 4, !tbaa !5
  %252 = add nsw i32 %251, 3
  %253 = sext i32 %252 to i64
  %254 = load double*, double** %3, align 8, !tbaa !1
  %255 = getelementptr inbounds double, double* %254, i64 %253
  %256 = load double, double* %255, align 8, !tbaa !7
  %257 = load i32, i32* %i1, align 4, !tbaa !5
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %258
  %260 = getelementptr inbounds [8 x double], [8 x double]* %259, i32 0, i64 3
  %261 = load double, double* %260, align 8, !tbaa !7
  %262 = fmul double %256, %261
  %263 = fadd double %250, %262
  %264 = load i32, i32* %i3, align 4, !tbaa !5
  %265 = add nsw i32 %264, 4
  %266 = sext i32 %265 to i64
  %267 = load double*, double** %3, align 8, !tbaa !1
  %268 = getelementptr inbounds double, double* %267, i64 %266
  %269 = load double, double* %268, align 8, !tbaa !7
  %270 = load i32, i32* %i1, align 4, !tbaa !5
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %271
  %273 = getelementptr inbounds [8 x double], [8 x double]* %272, i32 0, i64 4
  %274 = load double, double* %273, align 8, !tbaa !7
  %275 = fmul double %269, %274
  %276 = fadd double %263, %275
  %277 = load i32, i32* %i3, align 4, !tbaa !5
  %278 = add nsw i32 %277, 5
  %279 = sext i32 %278 to i64
  %280 = load double*, double** %3, align 8, !tbaa !1
  %281 = getelementptr inbounds double, double* %280, i64 %279
  %282 = load double, double* %281, align 8, !tbaa !7
  %283 = load i32, i32* %i1, align 4, !tbaa !5
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %284
  %286 = getelementptr inbounds [8 x double], [8 x double]* %285, i32 0, i64 5
  %287 = load double, double* %286, align 8, !tbaa !7
  %288 = fmul double %282, %287
  %289 = fadd double %276, %288
  %290 = load i32, i32* %i3, align 4, !tbaa !5
  %291 = add nsw i32 %290, 6
  %292 = sext i32 %291 to i64
  %293 = load double*, double** %3, align 8, !tbaa !1
  %294 = getelementptr inbounds double, double* %293, i64 %292
  %295 = load double, double* %294, align 8, !tbaa !7
  %296 = load i32, i32* %i1, align 4, !tbaa !5
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %297
  %299 = getelementptr inbounds [8 x double], [8 x double]* %298, i32 0, i64 6
  %300 = load double, double* %299, align 8, !tbaa !7
  %301 = fmul double %295, %300
  %302 = fadd double %289, %301
  %303 = load i32, i32* %i3, align 4, !tbaa !5
  %304 = add nsw i32 %303, 7
  %305 = sext i32 %304 to i64
  %306 = load double*, double** %3, align 8, !tbaa !1
  %307 = getelementptr inbounds double, double* %306, i64 %305
  %308 = load double, double* %307, align 8, !tbaa !7
  %309 = load i32, i32* %i1, align 4, !tbaa !5
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %310
  %312 = getelementptr inbounds [8 x double], [8 x double]* %311, i32 0, i64 7
  %313 = load double, double* %312, align 8, !tbaa !7
  %314 = fmul double %308, %313
  %315 = fadd double %302, %314
  store double %315, double* %hourmody, align 8, !tbaa !7
  %316 = load i32, i32* %i3, align 4, !tbaa !5
  %317 = sext i32 %316 to i64
  %318 = load double*, double** %4, align 8, !tbaa !1
  %319 = getelementptr inbounds double, double* %318, i64 %317
  %320 = load double, double* %319, align 8, !tbaa !7
  %321 = load i32, i32* %i1, align 4, !tbaa !5
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %322
  %324 = getelementptr inbounds [8 x double], [8 x double]* %323, i32 0, i64 0
  %325 = load double, double* %324, align 8, !tbaa !7
  %326 = fmul double %320, %325
  %327 = load i32, i32* %i3, align 4, !tbaa !5
  %328 = add nsw i32 %327, 1
  %329 = sext i32 %328 to i64
  %330 = load double*, double** %4, align 8, !tbaa !1
  %331 = getelementptr inbounds double, double* %330, i64 %329
  %332 = load double, double* %331, align 8, !tbaa !7
  %333 = load i32, i32* %i1, align 4, !tbaa !5
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %334
  %336 = getelementptr inbounds [8 x double], [8 x double]* %335, i32 0, i64 1
  %337 = load double, double* %336, align 8, !tbaa !7
  %338 = fmul double %332, %337
  %339 = fadd double %326, %338
  %340 = load i32, i32* %i3, align 4, !tbaa !5
  %341 = add nsw i32 %340, 2
  %342 = sext i32 %341 to i64
  %343 = load double*, double** %4, align 8, !tbaa !1
  %344 = getelementptr inbounds double, double* %343, i64 %342
  %345 = load double, double* %344, align 8, !tbaa !7
  %346 = load i32, i32* %i1, align 4, !tbaa !5
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %347
  %349 = getelementptr inbounds [8 x double], [8 x double]* %348, i32 0, i64 2
  %350 = load double, double* %349, align 8, !tbaa !7
  %351 = fmul double %345, %350
  %352 = fadd double %339, %351
  %353 = load i32, i32* %i3, align 4, !tbaa !5
  %354 = add nsw i32 %353, 3
  %355 = sext i32 %354 to i64
  %356 = load double*, double** %4, align 8, !tbaa !1
  %357 = getelementptr inbounds double, double* %356, i64 %355
  %358 = load double, double* %357, align 8, !tbaa !7
  %359 = load i32, i32* %i1, align 4, !tbaa !5
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %360
  %362 = getelementptr inbounds [8 x double], [8 x double]* %361, i32 0, i64 3
  %363 = load double, double* %362, align 8, !tbaa !7
  %364 = fmul double %358, %363
  %365 = fadd double %352, %364
  %366 = load i32, i32* %i3, align 4, !tbaa !5
  %367 = add nsw i32 %366, 4
  %368 = sext i32 %367 to i64
  %369 = load double*, double** %4, align 8, !tbaa !1
  %370 = getelementptr inbounds double, double* %369, i64 %368
  %371 = load double, double* %370, align 8, !tbaa !7
  %372 = load i32, i32* %i1, align 4, !tbaa !5
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %373
  %375 = getelementptr inbounds [8 x double], [8 x double]* %374, i32 0, i64 4
  %376 = load double, double* %375, align 8, !tbaa !7
  %377 = fmul double %371, %376
  %378 = fadd double %365, %377
  %379 = load i32, i32* %i3, align 4, !tbaa !5
  %380 = add nsw i32 %379, 5
  %381 = sext i32 %380 to i64
  %382 = load double*, double** %4, align 8, !tbaa !1
  %383 = getelementptr inbounds double, double* %382, i64 %381
  %384 = load double, double* %383, align 8, !tbaa !7
  %385 = load i32, i32* %i1, align 4, !tbaa !5
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %386
  %388 = getelementptr inbounds [8 x double], [8 x double]* %387, i32 0, i64 5
  %389 = load double, double* %388, align 8, !tbaa !7
  %390 = fmul double %384, %389
  %391 = fadd double %378, %390
  %392 = load i32, i32* %i3, align 4, !tbaa !5
  %393 = add nsw i32 %392, 6
  %394 = sext i32 %393 to i64
  %395 = load double*, double** %4, align 8, !tbaa !1
  %396 = getelementptr inbounds double, double* %395, i64 %394
  %397 = load double, double* %396, align 8, !tbaa !7
  %398 = load i32, i32* %i1, align 4, !tbaa !5
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %399
  %401 = getelementptr inbounds [8 x double], [8 x double]* %400, i32 0, i64 6
  %402 = load double, double* %401, align 8, !tbaa !7
  %403 = fmul double %397, %402
  %404 = fadd double %391, %403
  %405 = load i32, i32* %i3, align 4, !tbaa !5
  %406 = add nsw i32 %405, 7
  %407 = sext i32 %406 to i64
  %408 = load double*, double** %4, align 8, !tbaa !1
  %409 = getelementptr inbounds double, double* %408, i64 %407
  %410 = load double, double* %409, align 8, !tbaa !7
  %411 = load i32, i32* %i1, align 4, !tbaa !5
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %412
  %414 = getelementptr inbounds [8 x double], [8 x double]* %413, i32 0, i64 7
  %415 = load double, double* %414, align 8, !tbaa !7
  %416 = fmul double %410, %415
  %417 = fadd double %404, %416
  store double %417, double* %hourmodz, align 8, !tbaa !7
  %418 = load i32, i32* %i1, align 4, !tbaa !5
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %419
  %421 = getelementptr inbounds [8 x double], [8 x double]* %420, i32 0, i64 0
  %422 = load double, double* %421, align 8, !tbaa !7
  %423 = load double, double* %volinv, align 8, !tbaa !7
  %424 = load i32, i32* %i3, align 4, !tbaa !5
  %425 = sext i32 %424 to i64
  %426 = load double*, double** %5, align 8, !tbaa !1
  %427 = getelementptr inbounds double, double* %426, i64 %425
  %428 = load double, double* %427, align 8, !tbaa !7
  %429 = load double, double* %hourmodx, align 8, !tbaa !7
  %430 = fmul double %428, %429
  %431 = load i32, i32* %i3, align 4, !tbaa !5
  %432 = sext i32 %431 to i64
  %433 = load double*, double** %6, align 8, !tbaa !1
  %434 = getelementptr inbounds double, double* %433, i64 %432
  %435 = load double, double* %434, align 8, !tbaa !7
  %436 = load double, double* %hourmody, align 8, !tbaa !7
  %437 = fmul double %435, %436
  %438 = fadd double %430, %437
  %439 = load i32, i32* %i3, align 4, !tbaa !5
  %440 = sext i32 %439 to i64
  %441 = load double*, double** %7, align 8, !tbaa !1
  %442 = getelementptr inbounds double, double* %441, i64 %440
  %443 = load double, double* %442, align 8, !tbaa !7
  %444 = load double, double* %hourmodz, align 8, !tbaa !7
  %445 = fmul double %443, %444
  %446 = fadd double %438, %445
  %447 = fmul double %423, %446
  %448 = fsub double %422, %447
  %449 = load i32, i32* %i1, align 4, !tbaa !5
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [4 x double], [4 x double]* %hourgam0, i32 0, i64 %450
  store double %448, double* %451, align 8, !tbaa !7
  %452 = load i32, i32* %i1, align 4, !tbaa !5
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %453
  %455 = getelementptr inbounds [8 x double], [8 x double]* %454, i32 0, i64 1
  %456 = load double, double* %455, align 8, !tbaa !7
  %457 = load double, double* %volinv, align 8, !tbaa !7
  %458 = load i32, i32* %i3, align 4, !tbaa !5
  %459 = add nsw i32 %458, 1
  %460 = sext i32 %459 to i64
  %461 = load double*, double** %5, align 8, !tbaa !1
  %462 = getelementptr inbounds double, double* %461, i64 %460
  %463 = load double, double* %462, align 8, !tbaa !7
  %464 = load double, double* %hourmodx, align 8, !tbaa !7
  %465 = fmul double %463, %464
  %466 = load i32, i32* %i3, align 4, !tbaa !5
  %467 = add nsw i32 %466, 1
  %468 = sext i32 %467 to i64
  %469 = load double*, double** %6, align 8, !tbaa !1
  %470 = getelementptr inbounds double, double* %469, i64 %468
  %471 = load double, double* %470, align 8, !tbaa !7
  %472 = load double, double* %hourmody, align 8, !tbaa !7
  %473 = fmul double %471, %472
  %474 = fadd double %465, %473
  %475 = load i32, i32* %i3, align 4, !tbaa !5
  %476 = add nsw i32 %475, 1
  %477 = sext i32 %476 to i64
  %478 = load double*, double** %7, align 8, !tbaa !1
  %479 = getelementptr inbounds double, double* %478, i64 %477
  %480 = load double, double* %479, align 8, !tbaa !7
  %481 = load double, double* %hourmodz, align 8, !tbaa !7
  %482 = fmul double %480, %481
  %483 = fadd double %474, %482
  %484 = fmul double %457, %483
  %485 = fsub double %456, %484
  %486 = load i32, i32* %i1, align 4, !tbaa !5
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds [4 x double], [4 x double]* %hourgam1, i32 0, i64 %487
  store double %485, double* %488, align 8, !tbaa !7
  %489 = load i32, i32* %i1, align 4, !tbaa !5
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %490
  %492 = getelementptr inbounds [8 x double], [8 x double]* %491, i32 0, i64 2
  %493 = load double, double* %492, align 8, !tbaa !7
  %494 = load double, double* %volinv, align 8, !tbaa !7
  %495 = load i32, i32* %i3, align 4, !tbaa !5
  %496 = add nsw i32 %495, 2
  %497 = sext i32 %496 to i64
  %498 = load double*, double** %5, align 8, !tbaa !1
  %499 = getelementptr inbounds double, double* %498, i64 %497
  %500 = load double, double* %499, align 8, !tbaa !7
  %501 = load double, double* %hourmodx, align 8, !tbaa !7
  %502 = fmul double %500, %501
  %503 = load i32, i32* %i3, align 4, !tbaa !5
  %504 = add nsw i32 %503, 2
  %505 = sext i32 %504 to i64
  %506 = load double*, double** %6, align 8, !tbaa !1
  %507 = getelementptr inbounds double, double* %506, i64 %505
  %508 = load double, double* %507, align 8, !tbaa !7
  %509 = load double, double* %hourmody, align 8, !tbaa !7
  %510 = fmul double %508, %509
  %511 = fadd double %502, %510
  %512 = load i32, i32* %i3, align 4, !tbaa !5
  %513 = add nsw i32 %512, 2
  %514 = sext i32 %513 to i64
  %515 = load double*, double** %7, align 8, !tbaa !1
  %516 = getelementptr inbounds double, double* %515, i64 %514
  %517 = load double, double* %516, align 8, !tbaa !7
  %518 = load double, double* %hourmodz, align 8, !tbaa !7
  %519 = fmul double %517, %518
  %520 = fadd double %511, %519
  %521 = fmul double %494, %520
  %522 = fsub double %493, %521
  %523 = load i32, i32* %i1, align 4, !tbaa !5
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds [4 x double], [4 x double]* %hourgam2, i32 0, i64 %524
  store double %522, double* %525, align 8, !tbaa !7
  %526 = load i32, i32* %i1, align 4, !tbaa !5
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %527
  %529 = getelementptr inbounds [8 x double], [8 x double]* %528, i32 0, i64 3
  %530 = load double, double* %529, align 8, !tbaa !7
  %531 = load double, double* %volinv, align 8, !tbaa !7
  %532 = load i32, i32* %i3, align 4, !tbaa !5
  %533 = add nsw i32 %532, 3
  %534 = sext i32 %533 to i64
  %535 = load double*, double** %5, align 8, !tbaa !1
  %536 = getelementptr inbounds double, double* %535, i64 %534
  %537 = load double, double* %536, align 8, !tbaa !7
  %538 = load double, double* %hourmodx, align 8, !tbaa !7
  %539 = fmul double %537, %538
  %540 = load i32, i32* %i3, align 4, !tbaa !5
  %541 = add nsw i32 %540, 3
  %542 = sext i32 %541 to i64
  %543 = load double*, double** %6, align 8, !tbaa !1
  %544 = getelementptr inbounds double, double* %543, i64 %542
  %545 = load double, double* %544, align 8, !tbaa !7
  %546 = load double, double* %hourmody, align 8, !tbaa !7
  %547 = fmul double %545, %546
  %548 = fadd double %539, %547
  %549 = load i32, i32* %i3, align 4, !tbaa !5
  %550 = add nsw i32 %549, 3
  %551 = sext i32 %550 to i64
  %552 = load double*, double** %7, align 8, !tbaa !1
  %553 = getelementptr inbounds double, double* %552, i64 %551
  %554 = load double, double* %553, align 8, !tbaa !7
  %555 = load double, double* %hourmodz, align 8, !tbaa !7
  %556 = fmul double %554, %555
  %557 = fadd double %548, %556
  %558 = fmul double %531, %557
  %559 = fsub double %530, %558
  %560 = load i32, i32* %i1, align 4, !tbaa !5
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds [4 x double], [4 x double]* %hourgam3, i32 0, i64 %561
  store double %559, double* %562, align 8, !tbaa !7
  %563 = load i32, i32* %i1, align 4, !tbaa !5
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %564
  %566 = getelementptr inbounds [8 x double], [8 x double]* %565, i32 0, i64 4
  %567 = load double, double* %566, align 8, !tbaa !7
  %568 = load double, double* %volinv, align 8, !tbaa !7
  %569 = load i32, i32* %i3, align 4, !tbaa !5
  %570 = add nsw i32 %569, 4
  %571 = sext i32 %570 to i64
  %572 = load double*, double** %5, align 8, !tbaa !1
  %573 = getelementptr inbounds double, double* %572, i64 %571
  %574 = load double, double* %573, align 8, !tbaa !7
  %575 = load double, double* %hourmodx, align 8, !tbaa !7
  %576 = fmul double %574, %575
  %577 = load i32, i32* %i3, align 4, !tbaa !5
  %578 = add nsw i32 %577, 4
  %579 = sext i32 %578 to i64
  %580 = load double*, double** %6, align 8, !tbaa !1
  %581 = getelementptr inbounds double, double* %580, i64 %579
  %582 = load double, double* %581, align 8, !tbaa !7
  %583 = load double, double* %hourmody, align 8, !tbaa !7
  %584 = fmul double %582, %583
  %585 = fadd double %576, %584
  %586 = load i32, i32* %i3, align 4, !tbaa !5
  %587 = add nsw i32 %586, 4
  %588 = sext i32 %587 to i64
  %589 = load double*, double** %7, align 8, !tbaa !1
  %590 = getelementptr inbounds double, double* %589, i64 %588
  %591 = load double, double* %590, align 8, !tbaa !7
  %592 = load double, double* %hourmodz, align 8, !tbaa !7
  %593 = fmul double %591, %592
  %594 = fadd double %585, %593
  %595 = fmul double %568, %594
  %596 = fsub double %567, %595
  %597 = load i32, i32* %i1, align 4, !tbaa !5
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds [4 x double], [4 x double]* %hourgam4, i32 0, i64 %598
  store double %596, double* %599, align 8, !tbaa !7
  %600 = load i32, i32* %i1, align 4, !tbaa !5
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %601
  %603 = getelementptr inbounds [8 x double], [8 x double]* %602, i32 0, i64 5
  %604 = load double, double* %603, align 8, !tbaa !7
  %605 = load double, double* %volinv, align 8, !tbaa !7
  %606 = load i32, i32* %i3, align 4, !tbaa !5
  %607 = add nsw i32 %606, 5
  %608 = sext i32 %607 to i64
  %609 = load double*, double** %5, align 8, !tbaa !1
  %610 = getelementptr inbounds double, double* %609, i64 %608
  %611 = load double, double* %610, align 8, !tbaa !7
  %612 = load double, double* %hourmodx, align 8, !tbaa !7
  %613 = fmul double %611, %612
  %614 = load i32, i32* %i3, align 4, !tbaa !5
  %615 = add nsw i32 %614, 5
  %616 = sext i32 %615 to i64
  %617 = load double*, double** %6, align 8, !tbaa !1
  %618 = getelementptr inbounds double, double* %617, i64 %616
  %619 = load double, double* %618, align 8, !tbaa !7
  %620 = load double, double* %hourmody, align 8, !tbaa !7
  %621 = fmul double %619, %620
  %622 = fadd double %613, %621
  %623 = load i32, i32* %i3, align 4, !tbaa !5
  %624 = add nsw i32 %623, 5
  %625 = sext i32 %624 to i64
  %626 = load double*, double** %7, align 8, !tbaa !1
  %627 = getelementptr inbounds double, double* %626, i64 %625
  %628 = load double, double* %627, align 8, !tbaa !7
  %629 = load double, double* %hourmodz, align 8, !tbaa !7
  %630 = fmul double %628, %629
  %631 = fadd double %622, %630
  %632 = fmul double %605, %631
  %633 = fsub double %604, %632
  %634 = load i32, i32* %i1, align 4, !tbaa !5
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds [4 x double], [4 x double]* %hourgam5, i32 0, i64 %635
  store double %633, double* %636, align 8, !tbaa !7
  %637 = load i32, i32* %i1, align 4, !tbaa !5
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %638
  %640 = getelementptr inbounds [8 x double], [8 x double]* %639, i32 0, i64 6
  %641 = load double, double* %640, align 8, !tbaa !7
  %642 = load double, double* %volinv, align 8, !tbaa !7
  %643 = load i32, i32* %i3, align 4, !tbaa !5
  %644 = add nsw i32 %643, 6
  %645 = sext i32 %644 to i64
  %646 = load double*, double** %5, align 8, !tbaa !1
  %647 = getelementptr inbounds double, double* %646, i64 %645
  %648 = load double, double* %647, align 8, !tbaa !7
  %649 = load double, double* %hourmodx, align 8, !tbaa !7
  %650 = fmul double %648, %649
  %651 = load i32, i32* %i3, align 4, !tbaa !5
  %652 = add nsw i32 %651, 6
  %653 = sext i32 %652 to i64
  %654 = load double*, double** %6, align 8, !tbaa !1
  %655 = getelementptr inbounds double, double* %654, i64 %653
  %656 = load double, double* %655, align 8, !tbaa !7
  %657 = load double, double* %hourmody, align 8, !tbaa !7
  %658 = fmul double %656, %657
  %659 = fadd double %650, %658
  %660 = load i32, i32* %i3, align 4, !tbaa !5
  %661 = add nsw i32 %660, 6
  %662 = sext i32 %661 to i64
  %663 = load double*, double** %7, align 8, !tbaa !1
  %664 = getelementptr inbounds double, double* %663, i64 %662
  %665 = load double, double* %664, align 8, !tbaa !7
  %666 = load double, double* %hourmodz, align 8, !tbaa !7
  %667 = fmul double %665, %666
  %668 = fadd double %659, %667
  %669 = fmul double %642, %668
  %670 = fsub double %641, %669
  %671 = load i32, i32* %i1, align 4, !tbaa !5
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds [4 x double], [4 x double]* %hourgam6, i32 0, i64 %672
  store double %670, double* %673, align 8, !tbaa !7
  %674 = load i32, i32* %i1, align 4, !tbaa !5
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds [4 x [8 x double]], [4 x [8 x double]]* %gamma, i32 0, i64 %675
  %677 = getelementptr inbounds [8 x double], [8 x double]* %676, i32 0, i64 7
  %678 = load double, double* %677, align 8, !tbaa !7
  %679 = load double, double* %volinv, align 8, !tbaa !7
  %680 = load i32, i32* %i3, align 4, !tbaa !5
  %681 = add nsw i32 %680, 7
  %682 = sext i32 %681 to i64
  %683 = load double*, double** %5, align 8, !tbaa !1
  %684 = getelementptr inbounds double, double* %683, i64 %682
  %685 = load double, double* %684, align 8, !tbaa !7
  %686 = load double, double* %hourmodx, align 8, !tbaa !7
  %687 = fmul double %685, %686
  %688 = load i32, i32* %i3, align 4, !tbaa !5
  %689 = add nsw i32 %688, 7
  %690 = sext i32 %689 to i64
  %691 = load double*, double** %6, align 8, !tbaa !1
  %692 = getelementptr inbounds double, double* %691, i64 %690
  %693 = load double, double* %692, align 8, !tbaa !7
  %694 = load double, double* %hourmody, align 8, !tbaa !7
  %695 = fmul double %693, %694
  %696 = fadd double %687, %695
  %697 = load i32, i32* %i3, align 4, !tbaa !5
  %698 = add nsw i32 %697, 7
  %699 = sext i32 %698 to i64
  %700 = load double*, double** %7, align 8, !tbaa !1
  %701 = getelementptr inbounds double, double* %700, i64 %699
  %702 = load double, double* %701, align 8, !tbaa !7
  %703 = load double, double* %hourmodz, align 8, !tbaa !7
  %704 = fmul double %702, %703
  %705 = fadd double %696, %704
  %706 = fmul double %679, %705
  %707 = fsub double %678, %706
  %708 = load i32, i32* %i1, align 4, !tbaa !5
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds [4 x double], [4 x double]* %hourgam7, i32 0, i64 %709
  store double %707, double* %710, align 8, !tbaa !7
  br label %711

; <label>:711                                     ; preds = %111
  %712 = load i32, i32* %i1, align 4, !tbaa !5
  %713 = add nsw i32 %712, 1
  store i32 %713, i32* %i1, align 4, !tbaa !5
  br label %108

; <label>:714                                     ; preds = %108
  %715 = load i32, i32* %i2, align 4, !tbaa !5
  %716 = call dereferenceable(8) double* @_ZN6Domain2ssEi(%struct.Domain* @domain, i32 %715)
  %717 = load double, double* %716, !tbaa !7
  store double %717, double* %ss1, align 8, !tbaa !7
  %718 = load i32, i32* %i2, align 4, !tbaa !5
  %719 = call dereferenceable(8) double* @_ZN6Domain8elemMassEi(%struct.Domain* @domain, i32 %718)
  %720 = load double, double* %719, !tbaa !7
  store double %720, double* %mass1, align 8, !tbaa !7
  %721 = load i32, i32* %i2, align 4, !tbaa !5
  %722 = sext i32 %721 to i64
  %723 = load double*, double** %1, align 8, !tbaa !1
  %724 = getelementptr inbounds double, double* %723, i64 %722
  %725 = load double, double* %724, align 8, !tbaa !7
  %726 = call double @_Z4CBRTd(double %725)
  store double %726, double* %volume13, align 8, !tbaa !7
  %727 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %728 = getelementptr inbounds i32, i32* %727, i64 0
  %729 = load i32, i32* %728, align 4, !tbaa !5
  store i32 %729, i32* %n0si2, align 4, !tbaa !5
  %730 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %731 = getelementptr inbounds i32, i32* %730, i64 1
  %732 = load i32, i32* %731, align 4, !tbaa !5
  store i32 %732, i32* %n1si2, align 4, !tbaa !5
  %733 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %734 = getelementptr inbounds i32, i32* %733, i64 2
  %735 = load i32, i32* %734, align 4, !tbaa !5
  store i32 %735, i32* %n2si2, align 4, !tbaa !5
  %736 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %737 = getelementptr inbounds i32, i32* %736, i64 3
  %738 = load i32, i32* %737, align 4, !tbaa !5
  store i32 %738, i32* %n3si2, align 4, !tbaa !5
  %739 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %740 = getelementptr inbounds i32, i32* %739, i64 4
  %741 = load i32, i32* %740, align 4, !tbaa !5
  store i32 %741, i32* %n4si2, align 4, !tbaa !5
  %742 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %743 = getelementptr inbounds i32, i32* %742, i64 5
  %744 = load i32, i32* %743, align 4, !tbaa !5
  store i32 %744, i32* %n5si2, align 4, !tbaa !5
  %745 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %746 = getelementptr inbounds i32, i32* %745, i64 6
  %747 = load i32, i32* %746, align 4, !tbaa !5
  store i32 %747, i32* %n6si2, align 4, !tbaa !5
  %748 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %749 = getelementptr inbounds i32, i32* %748, i64 7
  %750 = load i32, i32* %749, align 4, !tbaa !5
  store i32 %750, i32* %n7si2, align 4, !tbaa !5
  %751 = load i32, i32* %n0si2, align 4, !tbaa !5
  %752 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %751)
  %753 = load double, double* %752, !tbaa !7
  %754 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 0
  store double %753, double* %754, align 8, !tbaa !7
  %755 = load i32, i32* %n1si2, align 4, !tbaa !5
  %756 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %755)
  %757 = load double, double* %756, !tbaa !7
  %758 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 1
  store double %757, double* %758, align 8, !tbaa !7
  %759 = load i32, i32* %n2si2, align 4, !tbaa !5
  %760 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %759)
  %761 = load double, double* %760, !tbaa !7
  %762 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 2
  store double %761, double* %762, align 8, !tbaa !7
  %763 = load i32, i32* %n3si2, align 4, !tbaa !5
  %764 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %763)
  %765 = load double, double* %764, !tbaa !7
  %766 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 3
  store double %765, double* %766, align 8, !tbaa !7
  %767 = load i32, i32* %n4si2, align 4, !tbaa !5
  %768 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %767)
  %769 = load double, double* %768, !tbaa !7
  %770 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 4
  store double %769, double* %770, align 8, !tbaa !7
  %771 = load i32, i32* %n5si2, align 4, !tbaa !5
  %772 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %771)
  %773 = load double, double* %772, !tbaa !7
  %774 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 5
  store double %773, double* %774, align 8, !tbaa !7
  %775 = load i32, i32* %n6si2, align 4, !tbaa !5
  %776 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %775)
  %777 = load double, double* %776, !tbaa !7
  %778 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 6
  store double %777, double* %778, align 8, !tbaa !7
  %779 = load i32, i32* %n7si2, align 4, !tbaa !5
  %780 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %779)
  %781 = load double, double* %780, !tbaa !7
  %782 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i64 7
  store double %781, double* %782, align 8, !tbaa !7
  %783 = load i32, i32* %n0si2, align 4, !tbaa !5
  %784 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %783)
  %785 = load double, double* %784, !tbaa !7
  %786 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 0
  store double %785, double* %786, align 8, !tbaa !7
  %787 = load i32, i32* %n1si2, align 4, !tbaa !5
  %788 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %787)
  %789 = load double, double* %788, !tbaa !7
  %790 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 1
  store double %789, double* %790, align 8, !tbaa !7
  %791 = load i32, i32* %n2si2, align 4, !tbaa !5
  %792 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %791)
  %793 = load double, double* %792, !tbaa !7
  %794 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 2
  store double %793, double* %794, align 8, !tbaa !7
  %795 = load i32, i32* %n3si2, align 4, !tbaa !5
  %796 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %795)
  %797 = load double, double* %796, !tbaa !7
  %798 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 3
  store double %797, double* %798, align 8, !tbaa !7
  %799 = load i32, i32* %n4si2, align 4, !tbaa !5
  %800 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %799)
  %801 = load double, double* %800, !tbaa !7
  %802 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 4
  store double %801, double* %802, align 8, !tbaa !7
  %803 = load i32, i32* %n5si2, align 4, !tbaa !5
  %804 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %803)
  %805 = load double, double* %804, !tbaa !7
  %806 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 5
  store double %805, double* %806, align 8, !tbaa !7
  %807 = load i32, i32* %n6si2, align 4, !tbaa !5
  %808 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %807)
  %809 = load double, double* %808, !tbaa !7
  %810 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 6
  store double %809, double* %810, align 8, !tbaa !7
  %811 = load i32, i32* %n7si2, align 4, !tbaa !5
  %812 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %811)
  %813 = load double, double* %812, !tbaa !7
  %814 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i64 7
  store double %813, double* %814, align 8, !tbaa !7
  %815 = load i32, i32* %n0si2, align 4, !tbaa !5
  %816 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %815)
  %817 = load double, double* %816, !tbaa !7
  %818 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 0
  store double %817, double* %818, align 8, !tbaa !7
  %819 = load i32, i32* %n1si2, align 4, !tbaa !5
  %820 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %819)
  %821 = load double, double* %820, !tbaa !7
  %822 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 1
  store double %821, double* %822, align 8, !tbaa !7
  %823 = load i32, i32* %n2si2, align 4, !tbaa !5
  %824 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %823)
  %825 = load double, double* %824, !tbaa !7
  %826 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 2
  store double %825, double* %826, align 8, !tbaa !7
  %827 = load i32, i32* %n3si2, align 4, !tbaa !5
  %828 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %827)
  %829 = load double, double* %828, !tbaa !7
  %830 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 3
  store double %829, double* %830, align 8, !tbaa !7
  %831 = load i32, i32* %n4si2, align 4, !tbaa !5
  %832 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %831)
  %833 = load double, double* %832, !tbaa !7
  %834 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 4
  store double %833, double* %834, align 8, !tbaa !7
  %835 = load i32, i32* %n5si2, align 4, !tbaa !5
  %836 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %835)
  %837 = load double, double* %836, !tbaa !7
  %838 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 5
  store double %837, double* %838, align 8, !tbaa !7
  %839 = load i32, i32* %n6si2, align 4, !tbaa !5
  %840 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %839)
  %841 = load double, double* %840, !tbaa !7
  %842 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 6
  store double %841, double* %842, align 8, !tbaa !7
  %843 = load i32, i32* %n7si2, align 4, !tbaa !5
  %844 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %843)
  %845 = load double, double* %844, !tbaa !7
  %846 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i64 7
  store double %845, double* %846, align 8, !tbaa !7
  %847 = load double, double* %8, align 8, !tbaa !7
  %848 = fsub double -0.000000e+00, %847
  %849 = fmul double %848, 1.000000e-02
  %850 = load double, double* %ss1, align 8, !tbaa !7
  %851 = fmul double %849, %850
  %852 = load double, double* %mass1, align 8, !tbaa !7
  %853 = fmul double %851, %852
  %854 = load double, double* %volume13, align 8, !tbaa !7
  %855 = fdiv double %853, %854
  store double %855, double* %coefficient, align 8, !tbaa !7
  %856 = getelementptr inbounds [8 x double], [8 x double]* %xd1, i32 0, i32 0
  %857 = getelementptr inbounds [8 x double], [8 x double]* %yd1, i32 0, i32 0
  %858 = getelementptr inbounds [8 x double], [8 x double]* %zd1, i32 0, i32 0
  %859 = getelementptr inbounds [4 x double], [4 x double]* %hourgam0, i32 0, i32 0
  %860 = getelementptr inbounds [4 x double], [4 x double]* %hourgam1, i32 0, i32 0
  %861 = getelementptr inbounds [4 x double], [4 x double]* %hourgam2, i32 0, i32 0
  %862 = getelementptr inbounds [4 x double], [4 x double]* %hourgam3, i32 0, i32 0
  %863 = getelementptr inbounds [4 x double], [4 x double]* %hourgam4, i32 0, i32 0
  %864 = getelementptr inbounds [4 x double], [4 x double]* %hourgam5, i32 0, i32 0
  %865 = getelementptr inbounds [4 x double], [4 x double]* %hourgam6, i32 0, i32 0
  %866 = getelementptr inbounds [4 x double], [4 x double]* %hourgam7, i32 0, i32 0
  %867 = load double, double* %coefficient, align 8, !tbaa !7
  %868 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i32 0
  %869 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i32 0
  %870 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i32 0
  call void @_ZL24CalcElemFBHourglassForcePdS_S_S_S_S_S_S_S_S_S_dS_S_S_(double* %856, double* %857, double* %858, double* %859, double* %860, double* %861, double* %862, double* %863, double* %864, double* %865, double* %866, double %867, double* %868, double* %869, double* %870)
  %871 = load i32, i32* %i3, align 4, !tbaa !5
  %872 = sext i32 %871 to i64
  %873 = load double*, double** %fx_elem, align 8, !tbaa !1
  %874 = getelementptr inbounds double, double* %873, i64 %872
  store double* %874, double** %fx_local, align 8, !tbaa !1
  %875 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 0
  %876 = load double, double* %875, align 8, !tbaa !7
  %877 = load double*, double** %fx_local, align 8, !tbaa !1
  %878 = getelementptr inbounds double, double* %877, i64 0
  store double %876, double* %878, align 8, !tbaa !7
  %879 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 1
  %880 = load double, double* %879, align 8, !tbaa !7
  %881 = load double*, double** %fx_local, align 8, !tbaa !1
  %882 = getelementptr inbounds double, double* %881, i64 1
  store double %880, double* %882, align 8, !tbaa !7
  %883 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 2
  %884 = load double, double* %883, align 8, !tbaa !7
  %885 = load double*, double** %fx_local, align 8, !tbaa !1
  %886 = getelementptr inbounds double, double* %885, i64 2
  store double %884, double* %886, align 8, !tbaa !7
  %887 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 3
  %888 = load double, double* %887, align 8, !tbaa !7
  %889 = load double*, double** %fx_local, align 8, !tbaa !1
  %890 = getelementptr inbounds double, double* %889, i64 3
  store double %888, double* %890, align 8, !tbaa !7
  %891 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 4
  %892 = load double, double* %891, align 8, !tbaa !7
  %893 = load double*, double** %fx_local, align 8, !tbaa !1
  %894 = getelementptr inbounds double, double* %893, i64 4
  store double %892, double* %894, align 8, !tbaa !7
  %895 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 5
  %896 = load double, double* %895, align 8, !tbaa !7
  %897 = load double*, double** %fx_local, align 8, !tbaa !1
  %898 = getelementptr inbounds double, double* %897, i64 5
  store double %896, double* %898, align 8, !tbaa !7
  %899 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 6
  %900 = load double, double* %899, align 8, !tbaa !7
  %901 = load double*, double** %fx_local, align 8, !tbaa !1
  %902 = getelementptr inbounds double, double* %901, i64 6
  store double %900, double* %902, align 8, !tbaa !7
  %903 = getelementptr inbounds [8 x double], [8 x double]* %hgfx, i32 0, i64 7
  %904 = load double, double* %903, align 8, !tbaa !7
  %905 = load double*, double** %fx_local, align 8, !tbaa !1
  %906 = getelementptr inbounds double, double* %905, i64 7
  store double %904, double* %906, align 8, !tbaa !7
  %907 = load i32, i32* %i3, align 4, !tbaa !5
  %908 = sext i32 %907 to i64
  %909 = load double*, double** %fy_elem, align 8, !tbaa !1
  %910 = getelementptr inbounds double, double* %909, i64 %908
  store double* %910, double** %fy_local, align 8, !tbaa !1
  %911 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 0
  %912 = load double, double* %911, align 8, !tbaa !7
  %913 = load double*, double** %fy_local, align 8, !tbaa !1
  %914 = getelementptr inbounds double, double* %913, i64 0
  store double %912, double* %914, align 8, !tbaa !7
  %915 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 1
  %916 = load double, double* %915, align 8, !tbaa !7
  %917 = load double*, double** %fy_local, align 8, !tbaa !1
  %918 = getelementptr inbounds double, double* %917, i64 1
  store double %916, double* %918, align 8, !tbaa !7
  %919 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 2
  %920 = load double, double* %919, align 8, !tbaa !7
  %921 = load double*, double** %fy_local, align 8, !tbaa !1
  %922 = getelementptr inbounds double, double* %921, i64 2
  store double %920, double* %922, align 8, !tbaa !7
  %923 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 3
  %924 = load double, double* %923, align 8, !tbaa !7
  %925 = load double*, double** %fy_local, align 8, !tbaa !1
  %926 = getelementptr inbounds double, double* %925, i64 3
  store double %924, double* %926, align 8, !tbaa !7
  %927 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 4
  %928 = load double, double* %927, align 8, !tbaa !7
  %929 = load double*, double** %fy_local, align 8, !tbaa !1
  %930 = getelementptr inbounds double, double* %929, i64 4
  store double %928, double* %930, align 8, !tbaa !7
  %931 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 5
  %932 = load double, double* %931, align 8, !tbaa !7
  %933 = load double*, double** %fy_local, align 8, !tbaa !1
  %934 = getelementptr inbounds double, double* %933, i64 5
  store double %932, double* %934, align 8, !tbaa !7
  %935 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 6
  %936 = load double, double* %935, align 8, !tbaa !7
  %937 = load double*, double** %fy_local, align 8, !tbaa !1
  %938 = getelementptr inbounds double, double* %937, i64 6
  store double %936, double* %938, align 8, !tbaa !7
  %939 = getelementptr inbounds [8 x double], [8 x double]* %hgfy, i32 0, i64 7
  %940 = load double, double* %939, align 8, !tbaa !7
  %941 = load double*, double** %fy_local, align 8, !tbaa !1
  %942 = getelementptr inbounds double, double* %941, i64 7
  store double %940, double* %942, align 8, !tbaa !7
  %943 = load i32, i32* %i3, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = load double*, double** %fz_elem, align 8, !tbaa !1
  %946 = getelementptr inbounds double, double* %945, i64 %944
  store double* %946, double** %fz_local, align 8, !tbaa !1
  %947 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 0
  %948 = load double, double* %947, align 8, !tbaa !7
  %949 = load double*, double** %fz_local, align 8, !tbaa !1
  %950 = getelementptr inbounds double, double* %949, i64 0
  store double %948, double* %950, align 8, !tbaa !7
  %951 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 1
  %952 = load double, double* %951, align 8, !tbaa !7
  %953 = load double*, double** %fz_local, align 8, !tbaa !1
  %954 = getelementptr inbounds double, double* %953, i64 1
  store double %952, double* %954, align 8, !tbaa !7
  %955 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 2
  %956 = load double, double* %955, align 8, !tbaa !7
  %957 = load double*, double** %fz_local, align 8, !tbaa !1
  %958 = getelementptr inbounds double, double* %957, i64 2
  store double %956, double* %958, align 8, !tbaa !7
  %959 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 3
  %960 = load double, double* %959, align 8, !tbaa !7
  %961 = load double*, double** %fz_local, align 8, !tbaa !1
  %962 = getelementptr inbounds double, double* %961, i64 3
  store double %960, double* %962, align 8, !tbaa !7
  %963 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 4
  %964 = load double, double* %963, align 8, !tbaa !7
  %965 = load double*, double** %fz_local, align 8, !tbaa !1
  %966 = getelementptr inbounds double, double* %965, i64 4
  store double %964, double* %966, align 8, !tbaa !7
  %967 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 5
  %968 = load double, double* %967, align 8, !tbaa !7
  %969 = load double*, double** %fz_local, align 8, !tbaa !1
  %970 = getelementptr inbounds double, double* %969, i64 5
  store double %968, double* %970, align 8, !tbaa !7
  %971 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 6
  %972 = load double, double* %971, align 8, !tbaa !7
  %973 = load double*, double** %fz_local, align 8, !tbaa !1
  %974 = getelementptr inbounds double, double* %973, i64 6
  store double %972, double* %974, align 8, !tbaa !7
  %975 = getelementptr inbounds [8 x double], [8 x double]* %hgfz, i32 0, i64 7
  %976 = load double, double* %975, align 8, !tbaa !7
  %977 = load double*, double** %fz_local, align 8, !tbaa !1
  %978 = getelementptr inbounds double, double* %977, i64 7
  store double %976, double* %978, align 8, !tbaa !7
  %979 = bitcast [8 x double]* %zd1 to i8*
  call void @llvm.lifetime.end(i64 64, i8* %979) #1
  %980 = bitcast [8 x double]* %yd1 to i8*
  call void @llvm.lifetime.end(i64 64, i8* %980) #1
  %981 = bitcast [8 x double]* %xd1 to i8*
  call void @llvm.lifetime.end(i64 64, i8* %981) #1
  %982 = bitcast [8 x double]* %hgfz to i8*
  call void @llvm.lifetime.end(i64 64, i8* %982) #1
  %983 = bitcast [8 x double]* %hgfy to i8*
  call void @llvm.lifetime.end(i64 64, i8* %983) #1
  %984 = bitcast [8 x double]* %hgfx to i8*
  call void @llvm.lifetime.end(i64 64, i8* %984) #1
  br label %985

; <label>:985                                     ; preds = %714
  %986 = load i32, i32* %i2, align 4, !tbaa !5
  %987 = add nsw i32 %986, 1
  store i32 %987, i32* %i2, align 4, !tbaa !5
  br label %87

; <label>:988                                     ; preds = %87
  %989 = call dereferenceable(4) i32* @_ZN6Domain7numNodeEv(%struct.Domain* @domain)
  %990 = load i32, i32* %989, !tbaa !5
  store i32 %990, i32* %numNode, align 4, !tbaa !5
  store i32 0, i32* %gnode, align 4, !tbaa !5
  br label %991

; <label>:991                                     ; preds = %1052, %988
  %992 = load i32, i32* %gnode, align 4, !tbaa !5
  %993 = load i32, i32* %numNode, align 4, !tbaa !5
  %994 = icmp slt i32 %992, %993
  br i1 %994, label %995, label %1055

; <label>:995                                     ; preds = %991
  %996 = load i32, i32* %gnode, align 4, !tbaa !5
  %997 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemCountEi(%struct.Domain* @domain, i32 %996)
  %998 = load i32, i32* %997, !tbaa !5
  store i32 %998, i32* %count, align 4, !tbaa !5
  %999 = load i32, i32* %gnode, align 4, !tbaa !5
  %1000 = call dereferenceable(4) i32* @_ZN6Domain13nodeElemStartEi(%struct.Domain* @domain, i32 %999)
  %1001 = load i32, i32* %1000, !tbaa !5
  store i32 %1001, i32* %start, align 4, !tbaa !5
  store double 0.000000e+00, double* %fx, align 8, !tbaa !7
  store double 0.000000e+00, double* %fy, align 8, !tbaa !7
  store double 0.000000e+00, double* %fz, align 8, !tbaa !7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %1002

; <label>:1002                                    ; preds = %1033, %995
  %1003 = load i32, i32* %i, align 4, !tbaa !5
  %1004 = load i32, i32* %count, align 4, !tbaa !5
  %1005 = icmp slt i32 %1003, %1004
  br i1 %1005, label %1006, label %1036

; <label>:1006                                    ; preds = %1002
  %1007 = load i32, i32* %start, align 4, !tbaa !5
  %1008 = load i32, i32* %i, align 4, !tbaa !5
  %1009 = add nsw i32 %1007, %1008
  %1010 = call dereferenceable(4) i32* @_ZN6Domain18nodeElemCornerListEi(%struct.Domain* @domain, i32 %1009)
  %1011 = load i32, i32* %1010, !tbaa !5
  store i32 %1011, i32* %elem, align 4, !tbaa !5
  %1012 = load i32, i32* %elem, align 4, !tbaa !5
  %1013 = sext i32 %1012 to i64
  %1014 = load double*, double** %fx_elem, align 8, !tbaa !1
  %1015 = getelementptr inbounds double, double* %1014, i64 %1013
  %1016 = load double, double* %1015, align 8, !tbaa !7
  %1017 = load double, double* %fx, align 8, !tbaa !7
  %1018 = fadd double %1017, %1016
  store double %1018, double* %fx, align 8, !tbaa !7
  %1019 = load i32, i32* %elem, align 4, !tbaa !5
  %1020 = sext i32 %1019 to i64
  %1021 = load double*, double** %fy_elem, align 8, !tbaa !1
  %1022 = getelementptr inbounds double, double* %1021, i64 %1020
  %1023 = load double, double* %1022, align 8, !tbaa !7
  %1024 = load double, double* %fy, align 8, !tbaa !7
  %1025 = fadd double %1024, %1023
  store double %1025, double* %fy, align 8, !tbaa !7
  %1026 = load i32, i32* %elem, align 4, !tbaa !5
  %1027 = sext i32 %1026 to i64
  %1028 = load double*, double** %fz_elem, align 8, !tbaa !1
  %1029 = getelementptr inbounds double, double* %1028, i64 %1027
  %1030 = load double, double* %1029, align 8, !tbaa !7
  %1031 = load double, double* %fz, align 8, !tbaa !7
  %1032 = fadd double %1031, %1030
  store double %1032, double* %fz, align 8, !tbaa !7
  br label %1033

; <label>:1033                                    ; preds = %1006
  %1034 = load i32, i32* %i, align 4, !tbaa !5
  %1035 = add nsw i32 %1034, 1
  store i32 %1035, i32* %i, align 4, !tbaa !5
  br label %1002

; <label>:1036                                    ; preds = %1002
  %1037 = load double, double* %fx, align 8, !tbaa !7
  %1038 = load i32, i32* %gnode, align 4, !tbaa !5
  %1039 = call dereferenceable(8) double* @_ZN6Domain2fxEi(%struct.Domain* @domain, i32 %1038)
  %1040 = load double, double* %1039, !tbaa !7
  %1041 = fadd double %1040, %1037
  store double %1041, double* %1039, !tbaa !7
  %1042 = load double, double* %fy, align 8, !tbaa !7
  %1043 = load i32, i32* %gnode, align 4, !tbaa !5
  %1044 = call dereferenceable(8) double* @_ZN6Domain2fyEi(%struct.Domain* @domain, i32 %1043)
  %1045 = load double, double* %1044, !tbaa !7
  %1046 = fadd double %1045, %1042
  store double %1046, double* %1044, !tbaa !7
  %1047 = load double, double* %fz, align 8, !tbaa !7
  %1048 = load i32, i32* %gnode, align 4, !tbaa !5
  %1049 = call dereferenceable(8) double* @_ZN6Domain2fzEi(%struct.Domain* @domain, i32 %1048)
  %1050 = load double, double* %1049, !tbaa !7
  %1051 = fadd double %1050, %1047
  store double %1051, double* %1049, !tbaa !7
  br label %1052

; <label>:1052                                    ; preds = %1036
  %1053 = load i32, i32* %gnode, align 4, !tbaa !5
  %1054 = add nsw i32 %1053, 1
  store i32 %1054, i32* %gnode, align 4, !tbaa !5
  br label %991

; <label>:1055                                    ; preds = %991
  call void @_Z7ReleaseIdEvPPT_(double** %fz_elem)
  call void @_Z7ReleaseIdEvPPT_(double** %fy_elem)
  call void @_Z7ReleaseIdEvPPT_(double** %fx_elem)
  %1056 = bitcast [4 x [8 x double]]* %gamma to i8*
  call void @llvm.lifetime.end(i64 256, i8* %1056) #1
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL7VoluDerddddddddddddddddddPdS_S_(double %x0, double %x1, double %x2, double %x3, double %x4, double %x5, double %y0, double %y1, double %y2, double %y3, double %y4, double %y5, double %z0, double %z1, double %z2, double %z3, double %z4, double %z5, double* %dvdx, double* %dvdy, double* %dvdz) #6 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double*, align 8
  %20 = alloca double*, align 8
  %21 = alloca double*, align 8
  %twelfth = alloca double, align 8
  store double %x0, double* %1, align 8, !tbaa !7
  store double %x1, double* %2, align 8, !tbaa !7
  store double %x2, double* %3, align 8, !tbaa !7
  store double %x3, double* %4, align 8, !tbaa !7
  store double %x4, double* %5, align 8, !tbaa !7
  store double %x5, double* %6, align 8, !tbaa !7
  store double %y0, double* %7, align 8, !tbaa !7
  store double %y1, double* %8, align 8, !tbaa !7
  store double %y2, double* %9, align 8, !tbaa !7
  store double %y3, double* %10, align 8, !tbaa !7
  store double %y4, double* %11, align 8, !tbaa !7
  store double %y5, double* %12, align 8, !tbaa !7
  store double %z0, double* %13, align 8, !tbaa !7
  store double %z1, double* %14, align 8, !tbaa !7
  store double %z2, double* %15, align 8, !tbaa !7
  store double %z3, double* %16, align 8, !tbaa !7
  store double %z4, double* %17, align 8, !tbaa !7
  store double %z5, double* %18, align 8, !tbaa !7
  store double* %dvdx, double** %19, align 8, !tbaa !1
  store double* %dvdy, double** %20, align 8, !tbaa !1
  store double* %dvdz, double** %21, align 8, !tbaa !1
  store double 0x3FB5555555555555, double* %twelfth, align 8, !tbaa !7
  %22 = load double, double* %8, align 8, !tbaa !7
  %23 = load double, double* %9, align 8, !tbaa !7
  %24 = fadd double %22, %23
  %25 = load double, double* %13, align 8, !tbaa !7
  %26 = load double, double* %14, align 8, !tbaa !7
  %27 = fadd double %25, %26
  %28 = fmul double %24, %27
  %29 = load double, double* %7, align 8, !tbaa !7
  %30 = load double, double* %8, align 8, !tbaa !7
  %31 = fadd double %29, %30
  %32 = load double, double* %14, align 8, !tbaa !7
  %33 = load double, double* %15, align 8, !tbaa !7
  %34 = fadd double %32, %33
  %35 = fmul double %31, %34
  %36 = fsub double %28, %35
  %37 = load double, double* %7, align 8, !tbaa !7
  %38 = load double, double* %11, align 8, !tbaa !7
  %39 = fadd double %37, %38
  %40 = load double, double* %16, align 8, !tbaa !7
  %41 = load double, double* %17, align 8, !tbaa !7
  %42 = fadd double %40, %41
  %43 = fmul double %39, %42
  %44 = fadd double %36, %43
  %45 = load double, double* %10, align 8, !tbaa !7
  %46 = load double, double* %11, align 8, !tbaa !7
  %47 = fadd double %45, %46
  %48 = load double, double* %13, align 8, !tbaa !7
  %49 = load double, double* %17, align 8, !tbaa !7
  %50 = fadd double %48, %49
  %51 = fmul double %47, %50
  %52 = fsub double %44, %51
  %53 = load double, double* %9, align 8, !tbaa !7
  %54 = load double, double* %12, align 8, !tbaa !7
  %55 = fadd double %53, %54
  %56 = load double, double* %16, align 8, !tbaa !7
  %57 = load double, double* %18, align 8, !tbaa !7
  %58 = fadd double %56, %57
  %59 = fmul double %55, %58
  %60 = fsub double %52, %59
  %61 = load double, double* %10, align 8, !tbaa !7
  %62 = load double, double* %12, align 8, !tbaa !7
  %63 = fadd double %61, %62
  %64 = load double, double* %15, align 8, !tbaa !7
  %65 = load double, double* %18, align 8, !tbaa !7
  %66 = fadd double %64, %65
  %67 = fmul double %63, %66
  %68 = fadd double %60, %67
  %69 = load double*, double** %19, align 8, !tbaa !1
  store double %68, double* %69, align 8, !tbaa !7
  %70 = load double, double* %2, align 8, !tbaa !7
  %71 = load double, double* %3, align 8, !tbaa !7
  %72 = fadd double %70, %71
  %73 = fsub double -0.000000e+00, %72
  %74 = load double, double* %13, align 8, !tbaa !7
  %75 = load double, double* %14, align 8, !tbaa !7
  %76 = fadd double %74, %75
  %77 = fmul double %73, %76
  %78 = load double, double* %1, align 8, !tbaa !7
  %79 = load double, double* %2, align 8, !tbaa !7
  %80 = fadd double %78, %79
  %81 = load double, double* %14, align 8, !tbaa !7
  %82 = load double, double* %15, align 8, !tbaa !7
  %83 = fadd double %81, %82
  %84 = fmul double %80, %83
  %85 = fadd double %77, %84
  %86 = load double, double* %1, align 8, !tbaa !7
  %87 = load double, double* %5, align 8, !tbaa !7
  %88 = fadd double %86, %87
  %89 = load double, double* %16, align 8, !tbaa !7
  %90 = load double, double* %17, align 8, !tbaa !7
  %91 = fadd double %89, %90
  %92 = fmul double %88, %91
  %93 = fsub double %85, %92
  %94 = load double, double* %4, align 8, !tbaa !7
  %95 = load double, double* %5, align 8, !tbaa !7
  %96 = fadd double %94, %95
  %97 = load double, double* %13, align 8, !tbaa !7
  %98 = load double, double* %17, align 8, !tbaa !7
  %99 = fadd double %97, %98
  %100 = fmul double %96, %99
  %101 = fadd double %93, %100
  %102 = load double, double* %3, align 8, !tbaa !7
  %103 = load double, double* %6, align 8, !tbaa !7
  %104 = fadd double %102, %103
  %105 = load double, double* %16, align 8, !tbaa !7
  %106 = load double, double* %18, align 8, !tbaa !7
  %107 = fadd double %105, %106
  %108 = fmul double %104, %107
  %109 = fadd double %101, %108
  %110 = load double, double* %4, align 8, !tbaa !7
  %111 = load double, double* %6, align 8, !tbaa !7
  %112 = fadd double %110, %111
  %113 = load double, double* %15, align 8, !tbaa !7
  %114 = load double, double* %18, align 8, !tbaa !7
  %115 = fadd double %113, %114
  %116 = fmul double %112, %115
  %117 = fsub double %109, %116
  %118 = load double*, double** %20, align 8, !tbaa !1
  store double %117, double* %118, align 8, !tbaa !7
  %119 = load double, double* %8, align 8, !tbaa !7
  %120 = load double, double* %9, align 8, !tbaa !7
  %121 = fadd double %119, %120
  %122 = fsub double -0.000000e+00, %121
  %123 = load double, double* %1, align 8, !tbaa !7
  %124 = load double, double* %2, align 8, !tbaa !7
  %125 = fadd double %123, %124
  %126 = fmul double %122, %125
  %127 = load double, double* %7, align 8, !tbaa !7
  %128 = load double, double* %8, align 8, !tbaa !7
  %129 = fadd double %127, %128
  %130 = load double, double* %2, align 8, !tbaa !7
  %131 = load double, double* %3, align 8, !tbaa !7
  %132 = fadd double %130, %131
  %133 = fmul double %129, %132
  %134 = fadd double %126, %133
  %135 = load double, double* %7, align 8, !tbaa !7
  %136 = load double, double* %11, align 8, !tbaa !7
  %137 = fadd double %135, %136
  %138 = load double, double* %4, align 8, !tbaa !7
  %139 = load double, double* %5, align 8, !tbaa !7
  %140 = fadd double %138, %139
  %141 = fmul double %137, %140
  %142 = fsub double %134, %141
  %143 = load double, double* %10, align 8, !tbaa !7
  %144 = load double, double* %11, align 8, !tbaa !7
  %145 = fadd double %143, %144
  %146 = load double, double* %1, align 8, !tbaa !7
  %147 = load double, double* %5, align 8, !tbaa !7
  %148 = fadd double %146, %147
  %149 = fmul double %145, %148
  %150 = fadd double %142, %149
  %151 = load double, double* %9, align 8, !tbaa !7
  %152 = load double, double* %12, align 8, !tbaa !7
  %153 = fadd double %151, %152
  %154 = load double, double* %4, align 8, !tbaa !7
  %155 = load double, double* %6, align 8, !tbaa !7
  %156 = fadd double %154, %155
  %157 = fmul double %153, %156
  %158 = fadd double %150, %157
  %159 = load double, double* %10, align 8, !tbaa !7
  %160 = load double, double* %12, align 8, !tbaa !7
  %161 = fadd double %159, %160
  %162 = load double, double* %3, align 8, !tbaa !7
  %163 = load double, double* %6, align 8, !tbaa !7
  %164 = fadd double %162, %163
  %165 = fmul double %161, %164
  %166 = fsub double %158, %165
  %167 = load double*, double** %21, align 8, !tbaa !1
  store double %166, double* %167, align 8, !tbaa !7
  %168 = load double*, double** %19, align 8, !tbaa !1
  %169 = load double, double* %168, align 8, !tbaa !7
  %170 = fmul double %169, 0x3FB5555555555555
  store double %170, double* %168, align 8, !tbaa !7
  %171 = load double*, double** %20, align 8, !tbaa !1
  %172 = load double, double* %171, align 8, !tbaa !7
  %173 = fmul double %172, 0x3FB5555555555555
  store double %173, double* %171, align 8, !tbaa !7
  %174 = load double*, double** %21, align 8, !tbaa !1
  %175 = load double, double* %174, align 8, !tbaa !7
  %176 = fmul double %175, 0x3FB5555555555555
  store double %176, double* %174, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2ssEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 48
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr double @_Z4CBRTd(double %arg) #6 comdat {
  %1 = alloca double, align 8
  store double %arg, double* %1, align 8, !tbaa !7
  %2 = load double, double* %1, align 8, !tbaa !7
  %3 = call double @cbrt(double %2) #1
  ret double %3
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 3
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 4
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 5
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL24CalcElemFBHourglassForcePdS_S_S_S_S_S_S_S_S_S_dS_S_S_(double* %xd, double* %yd, double* %zd, double* %hourgam0, double* %hourgam1, double* %hourgam2, double* %hourgam3, double* %hourgam4, double* %hourgam5, double* %hourgam6, double* %hourgam7, double %coefficient, double* %hgfx, double* %hgfy, double* %hgfz) #6 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double, align 8
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca double*, align 8
  %i00 = alloca i32, align 4
  %i01 = alloca i32, align 4
  %i02 = alloca i32, align 4
  %i03 = alloca i32, align 4
  %h00 = alloca double, align 8
  %h01 = alloca double, align 8
  %h02 = alloca double, align 8
  %h03 = alloca double, align 8
  store double* %xd, double** %1, align 8, !tbaa !1
  store double* %yd, double** %2, align 8, !tbaa !1
  store double* %zd, double** %3, align 8, !tbaa !1
  store double* %hourgam0, double** %4, align 8, !tbaa !1
  store double* %hourgam1, double** %5, align 8, !tbaa !1
  store double* %hourgam2, double** %6, align 8, !tbaa !1
  store double* %hourgam3, double** %7, align 8, !tbaa !1
  store double* %hourgam4, double** %8, align 8, !tbaa !1
  store double* %hourgam5, double** %9, align 8, !tbaa !1
  store double* %hourgam6, double** %10, align 8, !tbaa !1
  store double* %hourgam7, double** %11, align 8, !tbaa !1
  store double %coefficient, double* %12, align 8, !tbaa !7
  store double* %hgfx, double** %13, align 8, !tbaa !1
  store double* %hgfy, double** %14, align 8, !tbaa !1
  store double* %hgfz, double** %15, align 8, !tbaa !1
  store i32 0, i32* %i00, align 4, !tbaa !5
  store i32 1, i32* %i01, align 4, !tbaa !5
  store i32 2, i32* %i02, align 4, !tbaa !5
  store i32 3, i32* %i03, align 4, !tbaa !5
  %16 = load i32, i32* %i00, align 4, !tbaa !5
  %17 = sext i32 %16 to i64
  %18 = load double*, double** %4, align 8, !tbaa !1
  %19 = getelementptr inbounds double, double* %18, i64 %17
  %20 = load double, double* %19, align 8, !tbaa !7
  %21 = load double*, double** %1, align 8, !tbaa !1
  %22 = getelementptr inbounds double, double* %21, i64 0
  %23 = load double, double* %22, align 8, !tbaa !7
  %24 = fmul double %20, %23
  %25 = load i32, i32* %i00, align 4, !tbaa !5
  %26 = sext i32 %25 to i64
  %27 = load double*, double** %5, align 8, !tbaa !1
  %28 = getelementptr inbounds double, double* %27, i64 %26
  %29 = load double, double* %28, align 8, !tbaa !7
  %30 = load double*, double** %1, align 8, !tbaa !1
  %31 = getelementptr inbounds double, double* %30, i64 1
  %32 = load double, double* %31, align 8, !tbaa !7
  %33 = fmul double %29, %32
  %34 = fadd double %24, %33
  %35 = load i32, i32* %i00, align 4, !tbaa !5
  %36 = sext i32 %35 to i64
  %37 = load double*, double** %6, align 8, !tbaa !1
  %38 = getelementptr inbounds double, double* %37, i64 %36
  %39 = load double, double* %38, align 8, !tbaa !7
  %40 = load double*, double** %1, align 8, !tbaa !1
  %41 = getelementptr inbounds double, double* %40, i64 2
  %42 = load double, double* %41, align 8, !tbaa !7
  %43 = fmul double %39, %42
  %44 = fadd double %34, %43
  %45 = load i32, i32* %i00, align 4, !tbaa !5
  %46 = sext i32 %45 to i64
  %47 = load double*, double** %7, align 8, !tbaa !1
  %48 = getelementptr inbounds double, double* %47, i64 %46
  %49 = load double, double* %48, align 8, !tbaa !7
  %50 = load double*, double** %1, align 8, !tbaa !1
  %51 = getelementptr inbounds double, double* %50, i64 3
  %52 = load double, double* %51, align 8, !tbaa !7
  %53 = fmul double %49, %52
  %54 = fadd double %44, %53
  %55 = load i32, i32* %i00, align 4, !tbaa !5
  %56 = sext i32 %55 to i64
  %57 = load double*, double** %8, align 8, !tbaa !1
  %58 = getelementptr inbounds double, double* %57, i64 %56
  %59 = load double, double* %58, align 8, !tbaa !7
  %60 = load double*, double** %1, align 8, !tbaa !1
  %61 = getelementptr inbounds double, double* %60, i64 4
  %62 = load double, double* %61, align 8, !tbaa !7
  %63 = fmul double %59, %62
  %64 = fadd double %54, %63
  %65 = load i32, i32* %i00, align 4, !tbaa !5
  %66 = sext i32 %65 to i64
  %67 = load double*, double** %9, align 8, !tbaa !1
  %68 = getelementptr inbounds double, double* %67, i64 %66
  %69 = load double, double* %68, align 8, !tbaa !7
  %70 = load double*, double** %1, align 8, !tbaa !1
  %71 = getelementptr inbounds double, double* %70, i64 5
  %72 = load double, double* %71, align 8, !tbaa !7
  %73 = fmul double %69, %72
  %74 = fadd double %64, %73
  %75 = load i32, i32* %i00, align 4, !tbaa !5
  %76 = sext i32 %75 to i64
  %77 = load double*, double** %10, align 8, !tbaa !1
  %78 = getelementptr inbounds double, double* %77, i64 %76
  %79 = load double, double* %78, align 8, !tbaa !7
  %80 = load double*, double** %1, align 8, !tbaa !1
  %81 = getelementptr inbounds double, double* %80, i64 6
  %82 = load double, double* %81, align 8, !tbaa !7
  %83 = fmul double %79, %82
  %84 = fadd double %74, %83
  %85 = load i32, i32* %i00, align 4, !tbaa !5
  %86 = sext i32 %85 to i64
  %87 = load double*, double** %11, align 8, !tbaa !1
  %88 = getelementptr inbounds double, double* %87, i64 %86
  %89 = load double, double* %88, align 8, !tbaa !7
  %90 = load double*, double** %1, align 8, !tbaa !1
  %91 = getelementptr inbounds double, double* %90, i64 7
  %92 = load double, double* %91, align 8, !tbaa !7
  %93 = fmul double %89, %92
  %94 = fadd double %84, %93
  store double %94, double* %h00, align 8, !tbaa !7
  %95 = load i32, i32* %i01, align 4, !tbaa !5
  %96 = sext i32 %95 to i64
  %97 = load double*, double** %4, align 8, !tbaa !1
  %98 = getelementptr inbounds double, double* %97, i64 %96
  %99 = load double, double* %98, align 8, !tbaa !7
  %100 = load double*, double** %1, align 8, !tbaa !1
  %101 = getelementptr inbounds double, double* %100, i64 0
  %102 = load double, double* %101, align 8, !tbaa !7
  %103 = fmul double %99, %102
  %104 = load i32, i32* %i01, align 4, !tbaa !5
  %105 = sext i32 %104 to i64
  %106 = load double*, double** %5, align 8, !tbaa !1
  %107 = getelementptr inbounds double, double* %106, i64 %105
  %108 = load double, double* %107, align 8, !tbaa !7
  %109 = load double*, double** %1, align 8, !tbaa !1
  %110 = getelementptr inbounds double, double* %109, i64 1
  %111 = load double, double* %110, align 8, !tbaa !7
  %112 = fmul double %108, %111
  %113 = fadd double %103, %112
  %114 = load i32, i32* %i01, align 4, !tbaa !5
  %115 = sext i32 %114 to i64
  %116 = load double*, double** %6, align 8, !tbaa !1
  %117 = getelementptr inbounds double, double* %116, i64 %115
  %118 = load double, double* %117, align 8, !tbaa !7
  %119 = load double*, double** %1, align 8, !tbaa !1
  %120 = getelementptr inbounds double, double* %119, i64 2
  %121 = load double, double* %120, align 8, !tbaa !7
  %122 = fmul double %118, %121
  %123 = fadd double %113, %122
  %124 = load i32, i32* %i01, align 4, !tbaa !5
  %125 = sext i32 %124 to i64
  %126 = load double*, double** %7, align 8, !tbaa !1
  %127 = getelementptr inbounds double, double* %126, i64 %125
  %128 = load double, double* %127, align 8, !tbaa !7
  %129 = load double*, double** %1, align 8, !tbaa !1
  %130 = getelementptr inbounds double, double* %129, i64 3
  %131 = load double, double* %130, align 8, !tbaa !7
  %132 = fmul double %128, %131
  %133 = fadd double %123, %132
  %134 = load i32, i32* %i01, align 4, !tbaa !5
  %135 = sext i32 %134 to i64
  %136 = load double*, double** %8, align 8, !tbaa !1
  %137 = getelementptr inbounds double, double* %136, i64 %135
  %138 = load double, double* %137, align 8, !tbaa !7
  %139 = load double*, double** %1, align 8, !tbaa !1
  %140 = getelementptr inbounds double, double* %139, i64 4
  %141 = load double, double* %140, align 8, !tbaa !7
  %142 = fmul double %138, %141
  %143 = fadd double %133, %142
  %144 = load i32, i32* %i01, align 4, !tbaa !5
  %145 = sext i32 %144 to i64
  %146 = load double*, double** %9, align 8, !tbaa !1
  %147 = getelementptr inbounds double, double* %146, i64 %145
  %148 = load double, double* %147, align 8, !tbaa !7
  %149 = load double*, double** %1, align 8, !tbaa !1
  %150 = getelementptr inbounds double, double* %149, i64 5
  %151 = load double, double* %150, align 8, !tbaa !7
  %152 = fmul double %148, %151
  %153 = fadd double %143, %152
  %154 = load i32, i32* %i01, align 4, !tbaa !5
  %155 = sext i32 %154 to i64
  %156 = load double*, double** %10, align 8, !tbaa !1
  %157 = getelementptr inbounds double, double* %156, i64 %155
  %158 = load double, double* %157, align 8, !tbaa !7
  %159 = load double*, double** %1, align 8, !tbaa !1
  %160 = getelementptr inbounds double, double* %159, i64 6
  %161 = load double, double* %160, align 8, !tbaa !7
  %162 = fmul double %158, %161
  %163 = fadd double %153, %162
  %164 = load i32, i32* %i01, align 4, !tbaa !5
  %165 = sext i32 %164 to i64
  %166 = load double*, double** %11, align 8, !tbaa !1
  %167 = getelementptr inbounds double, double* %166, i64 %165
  %168 = load double, double* %167, align 8, !tbaa !7
  %169 = load double*, double** %1, align 8, !tbaa !1
  %170 = getelementptr inbounds double, double* %169, i64 7
  %171 = load double, double* %170, align 8, !tbaa !7
  %172 = fmul double %168, %171
  %173 = fadd double %163, %172
  store double %173, double* %h01, align 8, !tbaa !7
  %174 = load i32, i32* %i02, align 4, !tbaa !5
  %175 = sext i32 %174 to i64
  %176 = load double*, double** %4, align 8, !tbaa !1
  %177 = getelementptr inbounds double, double* %176, i64 %175
  %178 = load double, double* %177, align 8, !tbaa !7
  %179 = load double*, double** %1, align 8, !tbaa !1
  %180 = getelementptr inbounds double, double* %179, i64 0
  %181 = load double, double* %180, align 8, !tbaa !7
  %182 = fmul double %178, %181
  %183 = load i32, i32* %i02, align 4, !tbaa !5
  %184 = sext i32 %183 to i64
  %185 = load double*, double** %5, align 8, !tbaa !1
  %186 = getelementptr inbounds double, double* %185, i64 %184
  %187 = load double, double* %186, align 8, !tbaa !7
  %188 = load double*, double** %1, align 8, !tbaa !1
  %189 = getelementptr inbounds double, double* %188, i64 1
  %190 = load double, double* %189, align 8, !tbaa !7
  %191 = fmul double %187, %190
  %192 = fadd double %182, %191
  %193 = load i32, i32* %i02, align 4, !tbaa !5
  %194 = sext i32 %193 to i64
  %195 = load double*, double** %6, align 8, !tbaa !1
  %196 = getelementptr inbounds double, double* %195, i64 %194
  %197 = load double, double* %196, align 8, !tbaa !7
  %198 = load double*, double** %1, align 8, !tbaa !1
  %199 = getelementptr inbounds double, double* %198, i64 2
  %200 = load double, double* %199, align 8, !tbaa !7
  %201 = fmul double %197, %200
  %202 = fadd double %192, %201
  %203 = load i32, i32* %i02, align 4, !tbaa !5
  %204 = sext i32 %203 to i64
  %205 = load double*, double** %7, align 8, !tbaa !1
  %206 = getelementptr inbounds double, double* %205, i64 %204
  %207 = load double, double* %206, align 8, !tbaa !7
  %208 = load double*, double** %1, align 8, !tbaa !1
  %209 = getelementptr inbounds double, double* %208, i64 3
  %210 = load double, double* %209, align 8, !tbaa !7
  %211 = fmul double %207, %210
  %212 = fadd double %202, %211
  %213 = load i32, i32* %i02, align 4, !tbaa !5
  %214 = sext i32 %213 to i64
  %215 = load double*, double** %8, align 8, !tbaa !1
  %216 = getelementptr inbounds double, double* %215, i64 %214
  %217 = load double, double* %216, align 8, !tbaa !7
  %218 = load double*, double** %1, align 8, !tbaa !1
  %219 = getelementptr inbounds double, double* %218, i64 4
  %220 = load double, double* %219, align 8, !tbaa !7
  %221 = fmul double %217, %220
  %222 = fadd double %212, %221
  %223 = load i32, i32* %i02, align 4, !tbaa !5
  %224 = sext i32 %223 to i64
  %225 = load double*, double** %9, align 8, !tbaa !1
  %226 = getelementptr inbounds double, double* %225, i64 %224
  %227 = load double, double* %226, align 8, !tbaa !7
  %228 = load double*, double** %1, align 8, !tbaa !1
  %229 = getelementptr inbounds double, double* %228, i64 5
  %230 = load double, double* %229, align 8, !tbaa !7
  %231 = fmul double %227, %230
  %232 = fadd double %222, %231
  %233 = load i32, i32* %i02, align 4, !tbaa !5
  %234 = sext i32 %233 to i64
  %235 = load double*, double** %10, align 8, !tbaa !1
  %236 = getelementptr inbounds double, double* %235, i64 %234
  %237 = load double, double* %236, align 8, !tbaa !7
  %238 = load double*, double** %1, align 8, !tbaa !1
  %239 = getelementptr inbounds double, double* %238, i64 6
  %240 = load double, double* %239, align 8, !tbaa !7
  %241 = fmul double %237, %240
  %242 = fadd double %232, %241
  %243 = load i32, i32* %i02, align 4, !tbaa !5
  %244 = sext i32 %243 to i64
  %245 = load double*, double** %11, align 8, !tbaa !1
  %246 = getelementptr inbounds double, double* %245, i64 %244
  %247 = load double, double* %246, align 8, !tbaa !7
  %248 = load double*, double** %1, align 8, !tbaa !1
  %249 = getelementptr inbounds double, double* %248, i64 7
  %250 = load double, double* %249, align 8, !tbaa !7
  %251 = fmul double %247, %250
  %252 = fadd double %242, %251
  store double %252, double* %h02, align 8, !tbaa !7
  %253 = load i32, i32* %i03, align 4, !tbaa !5
  %254 = sext i32 %253 to i64
  %255 = load double*, double** %4, align 8, !tbaa !1
  %256 = getelementptr inbounds double, double* %255, i64 %254
  %257 = load double, double* %256, align 8, !tbaa !7
  %258 = load double*, double** %1, align 8, !tbaa !1
  %259 = getelementptr inbounds double, double* %258, i64 0
  %260 = load double, double* %259, align 8, !tbaa !7
  %261 = fmul double %257, %260
  %262 = load i32, i32* %i03, align 4, !tbaa !5
  %263 = sext i32 %262 to i64
  %264 = load double*, double** %5, align 8, !tbaa !1
  %265 = getelementptr inbounds double, double* %264, i64 %263
  %266 = load double, double* %265, align 8, !tbaa !7
  %267 = load double*, double** %1, align 8, !tbaa !1
  %268 = getelementptr inbounds double, double* %267, i64 1
  %269 = load double, double* %268, align 8, !tbaa !7
  %270 = fmul double %266, %269
  %271 = fadd double %261, %270
  %272 = load i32, i32* %i03, align 4, !tbaa !5
  %273 = sext i32 %272 to i64
  %274 = load double*, double** %6, align 8, !tbaa !1
  %275 = getelementptr inbounds double, double* %274, i64 %273
  %276 = load double, double* %275, align 8, !tbaa !7
  %277 = load double*, double** %1, align 8, !tbaa !1
  %278 = getelementptr inbounds double, double* %277, i64 2
  %279 = load double, double* %278, align 8, !tbaa !7
  %280 = fmul double %276, %279
  %281 = fadd double %271, %280
  %282 = load i32, i32* %i03, align 4, !tbaa !5
  %283 = sext i32 %282 to i64
  %284 = load double*, double** %7, align 8, !tbaa !1
  %285 = getelementptr inbounds double, double* %284, i64 %283
  %286 = load double, double* %285, align 8, !tbaa !7
  %287 = load double*, double** %1, align 8, !tbaa !1
  %288 = getelementptr inbounds double, double* %287, i64 3
  %289 = load double, double* %288, align 8, !tbaa !7
  %290 = fmul double %286, %289
  %291 = fadd double %281, %290
  %292 = load i32, i32* %i03, align 4, !tbaa !5
  %293 = sext i32 %292 to i64
  %294 = load double*, double** %8, align 8, !tbaa !1
  %295 = getelementptr inbounds double, double* %294, i64 %293
  %296 = load double, double* %295, align 8, !tbaa !7
  %297 = load double*, double** %1, align 8, !tbaa !1
  %298 = getelementptr inbounds double, double* %297, i64 4
  %299 = load double, double* %298, align 8, !tbaa !7
  %300 = fmul double %296, %299
  %301 = fadd double %291, %300
  %302 = load i32, i32* %i03, align 4, !tbaa !5
  %303 = sext i32 %302 to i64
  %304 = load double*, double** %9, align 8, !tbaa !1
  %305 = getelementptr inbounds double, double* %304, i64 %303
  %306 = load double, double* %305, align 8, !tbaa !7
  %307 = load double*, double** %1, align 8, !tbaa !1
  %308 = getelementptr inbounds double, double* %307, i64 5
  %309 = load double, double* %308, align 8, !tbaa !7
  %310 = fmul double %306, %309
  %311 = fadd double %301, %310
  %312 = load i32, i32* %i03, align 4, !tbaa !5
  %313 = sext i32 %312 to i64
  %314 = load double*, double** %10, align 8, !tbaa !1
  %315 = getelementptr inbounds double, double* %314, i64 %313
  %316 = load double, double* %315, align 8, !tbaa !7
  %317 = load double*, double** %1, align 8, !tbaa !1
  %318 = getelementptr inbounds double, double* %317, i64 6
  %319 = load double, double* %318, align 8, !tbaa !7
  %320 = fmul double %316, %319
  %321 = fadd double %311, %320
  %322 = load i32, i32* %i03, align 4, !tbaa !5
  %323 = sext i32 %322 to i64
  %324 = load double*, double** %11, align 8, !tbaa !1
  %325 = getelementptr inbounds double, double* %324, i64 %323
  %326 = load double, double* %325, align 8, !tbaa !7
  %327 = load double*, double** %1, align 8, !tbaa !1
  %328 = getelementptr inbounds double, double* %327, i64 7
  %329 = load double, double* %328, align 8, !tbaa !7
  %330 = fmul double %326, %329
  %331 = fadd double %321, %330
  store double %331, double* %h03, align 8, !tbaa !7
  %332 = load double, double* %12, align 8, !tbaa !7
  %333 = load i32, i32* %i00, align 4, !tbaa !5
  %334 = sext i32 %333 to i64
  %335 = load double*, double** %4, align 8, !tbaa !1
  %336 = getelementptr inbounds double, double* %335, i64 %334
  %337 = load double, double* %336, align 8, !tbaa !7
  %338 = load double, double* %h00, align 8, !tbaa !7
  %339 = fmul double %337, %338
  %340 = load i32, i32* %i01, align 4, !tbaa !5
  %341 = sext i32 %340 to i64
  %342 = load double*, double** %4, align 8, !tbaa !1
  %343 = getelementptr inbounds double, double* %342, i64 %341
  %344 = load double, double* %343, align 8, !tbaa !7
  %345 = load double, double* %h01, align 8, !tbaa !7
  %346 = fmul double %344, %345
  %347 = fadd double %339, %346
  %348 = load i32, i32* %i02, align 4, !tbaa !5
  %349 = sext i32 %348 to i64
  %350 = load double*, double** %4, align 8, !tbaa !1
  %351 = getelementptr inbounds double, double* %350, i64 %349
  %352 = load double, double* %351, align 8, !tbaa !7
  %353 = load double, double* %h02, align 8, !tbaa !7
  %354 = fmul double %352, %353
  %355 = fadd double %347, %354
  %356 = load i32, i32* %i03, align 4, !tbaa !5
  %357 = sext i32 %356 to i64
  %358 = load double*, double** %4, align 8, !tbaa !1
  %359 = getelementptr inbounds double, double* %358, i64 %357
  %360 = load double, double* %359, align 8, !tbaa !7
  %361 = load double, double* %h03, align 8, !tbaa !7
  %362 = fmul double %360, %361
  %363 = fadd double %355, %362
  %364 = fmul double %332, %363
  %365 = load double*, double** %13, align 8, !tbaa !1
  %366 = getelementptr inbounds double, double* %365, i64 0
  store double %364, double* %366, align 8, !tbaa !7
  %367 = load double, double* %12, align 8, !tbaa !7
  %368 = load i32, i32* %i00, align 4, !tbaa !5
  %369 = sext i32 %368 to i64
  %370 = load double*, double** %5, align 8, !tbaa !1
  %371 = getelementptr inbounds double, double* %370, i64 %369
  %372 = load double, double* %371, align 8, !tbaa !7
  %373 = load double, double* %h00, align 8, !tbaa !7
  %374 = fmul double %372, %373
  %375 = load i32, i32* %i01, align 4, !tbaa !5
  %376 = sext i32 %375 to i64
  %377 = load double*, double** %5, align 8, !tbaa !1
  %378 = getelementptr inbounds double, double* %377, i64 %376
  %379 = load double, double* %378, align 8, !tbaa !7
  %380 = load double, double* %h01, align 8, !tbaa !7
  %381 = fmul double %379, %380
  %382 = fadd double %374, %381
  %383 = load i32, i32* %i02, align 4, !tbaa !5
  %384 = sext i32 %383 to i64
  %385 = load double*, double** %5, align 8, !tbaa !1
  %386 = getelementptr inbounds double, double* %385, i64 %384
  %387 = load double, double* %386, align 8, !tbaa !7
  %388 = load double, double* %h02, align 8, !tbaa !7
  %389 = fmul double %387, %388
  %390 = fadd double %382, %389
  %391 = load i32, i32* %i03, align 4, !tbaa !5
  %392 = sext i32 %391 to i64
  %393 = load double*, double** %5, align 8, !tbaa !1
  %394 = getelementptr inbounds double, double* %393, i64 %392
  %395 = load double, double* %394, align 8, !tbaa !7
  %396 = load double, double* %h03, align 8, !tbaa !7
  %397 = fmul double %395, %396
  %398 = fadd double %390, %397
  %399 = fmul double %367, %398
  %400 = load double*, double** %13, align 8, !tbaa !1
  %401 = getelementptr inbounds double, double* %400, i64 1
  store double %399, double* %401, align 8, !tbaa !7
  %402 = load double, double* %12, align 8, !tbaa !7
  %403 = load i32, i32* %i00, align 4, !tbaa !5
  %404 = sext i32 %403 to i64
  %405 = load double*, double** %6, align 8, !tbaa !1
  %406 = getelementptr inbounds double, double* %405, i64 %404
  %407 = load double, double* %406, align 8, !tbaa !7
  %408 = load double, double* %h00, align 8, !tbaa !7
  %409 = fmul double %407, %408
  %410 = load i32, i32* %i01, align 4, !tbaa !5
  %411 = sext i32 %410 to i64
  %412 = load double*, double** %6, align 8, !tbaa !1
  %413 = getelementptr inbounds double, double* %412, i64 %411
  %414 = load double, double* %413, align 8, !tbaa !7
  %415 = load double, double* %h01, align 8, !tbaa !7
  %416 = fmul double %414, %415
  %417 = fadd double %409, %416
  %418 = load i32, i32* %i02, align 4, !tbaa !5
  %419 = sext i32 %418 to i64
  %420 = load double*, double** %6, align 8, !tbaa !1
  %421 = getelementptr inbounds double, double* %420, i64 %419
  %422 = load double, double* %421, align 8, !tbaa !7
  %423 = load double, double* %h02, align 8, !tbaa !7
  %424 = fmul double %422, %423
  %425 = fadd double %417, %424
  %426 = load i32, i32* %i03, align 4, !tbaa !5
  %427 = sext i32 %426 to i64
  %428 = load double*, double** %6, align 8, !tbaa !1
  %429 = getelementptr inbounds double, double* %428, i64 %427
  %430 = load double, double* %429, align 8, !tbaa !7
  %431 = load double, double* %h03, align 8, !tbaa !7
  %432 = fmul double %430, %431
  %433 = fadd double %425, %432
  %434 = fmul double %402, %433
  %435 = load double*, double** %13, align 8, !tbaa !1
  %436 = getelementptr inbounds double, double* %435, i64 2
  store double %434, double* %436, align 8, !tbaa !7
  %437 = load double, double* %12, align 8, !tbaa !7
  %438 = load i32, i32* %i00, align 4, !tbaa !5
  %439 = sext i32 %438 to i64
  %440 = load double*, double** %7, align 8, !tbaa !1
  %441 = getelementptr inbounds double, double* %440, i64 %439
  %442 = load double, double* %441, align 8, !tbaa !7
  %443 = load double, double* %h00, align 8, !tbaa !7
  %444 = fmul double %442, %443
  %445 = load i32, i32* %i01, align 4, !tbaa !5
  %446 = sext i32 %445 to i64
  %447 = load double*, double** %7, align 8, !tbaa !1
  %448 = getelementptr inbounds double, double* %447, i64 %446
  %449 = load double, double* %448, align 8, !tbaa !7
  %450 = load double, double* %h01, align 8, !tbaa !7
  %451 = fmul double %449, %450
  %452 = fadd double %444, %451
  %453 = load i32, i32* %i02, align 4, !tbaa !5
  %454 = sext i32 %453 to i64
  %455 = load double*, double** %7, align 8, !tbaa !1
  %456 = getelementptr inbounds double, double* %455, i64 %454
  %457 = load double, double* %456, align 8, !tbaa !7
  %458 = load double, double* %h02, align 8, !tbaa !7
  %459 = fmul double %457, %458
  %460 = fadd double %452, %459
  %461 = load i32, i32* %i03, align 4, !tbaa !5
  %462 = sext i32 %461 to i64
  %463 = load double*, double** %7, align 8, !tbaa !1
  %464 = getelementptr inbounds double, double* %463, i64 %462
  %465 = load double, double* %464, align 8, !tbaa !7
  %466 = load double, double* %h03, align 8, !tbaa !7
  %467 = fmul double %465, %466
  %468 = fadd double %460, %467
  %469 = fmul double %437, %468
  %470 = load double*, double** %13, align 8, !tbaa !1
  %471 = getelementptr inbounds double, double* %470, i64 3
  store double %469, double* %471, align 8, !tbaa !7
  %472 = load double, double* %12, align 8, !tbaa !7
  %473 = load i32, i32* %i00, align 4, !tbaa !5
  %474 = sext i32 %473 to i64
  %475 = load double*, double** %8, align 8, !tbaa !1
  %476 = getelementptr inbounds double, double* %475, i64 %474
  %477 = load double, double* %476, align 8, !tbaa !7
  %478 = load double, double* %h00, align 8, !tbaa !7
  %479 = fmul double %477, %478
  %480 = load i32, i32* %i01, align 4, !tbaa !5
  %481 = sext i32 %480 to i64
  %482 = load double*, double** %8, align 8, !tbaa !1
  %483 = getelementptr inbounds double, double* %482, i64 %481
  %484 = load double, double* %483, align 8, !tbaa !7
  %485 = load double, double* %h01, align 8, !tbaa !7
  %486 = fmul double %484, %485
  %487 = fadd double %479, %486
  %488 = load i32, i32* %i02, align 4, !tbaa !5
  %489 = sext i32 %488 to i64
  %490 = load double*, double** %8, align 8, !tbaa !1
  %491 = getelementptr inbounds double, double* %490, i64 %489
  %492 = load double, double* %491, align 8, !tbaa !7
  %493 = load double, double* %h02, align 8, !tbaa !7
  %494 = fmul double %492, %493
  %495 = fadd double %487, %494
  %496 = load i32, i32* %i03, align 4, !tbaa !5
  %497 = sext i32 %496 to i64
  %498 = load double*, double** %8, align 8, !tbaa !1
  %499 = getelementptr inbounds double, double* %498, i64 %497
  %500 = load double, double* %499, align 8, !tbaa !7
  %501 = load double, double* %h03, align 8, !tbaa !7
  %502 = fmul double %500, %501
  %503 = fadd double %495, %502
  %504 = fmul double %472, %503
  %505 = load double*, double** %13, align 8, !tbaa !1
  %506 = getelementptr inbounds double, double* %505, i64 4
  store double %504, double* %506, align 8, !tbaa !7
  %507 = load double, double* %12, align 8, !tbaa !7
  %508 = load i32, i32* %i00, align 4, !tbaa !5
  %509 = sext i32 %508 to i64
  %510 = load double*, double** %9, align 8, !tbaa !1
  %511 = getelementptr inbounds double, double* %510, i64 %509
  %512 = load double, double* %511, align 8, !tbaa !7
  %513 = load double, double* %h00, align 8, !tbaa !7
  %514 = fmul double %512, %513
  %515 = load i32, i32* %i01, align 4, !tbaa !5
  %516 = sext i32 %515 to i64
  %517 = load double*, double** %9, align 8, !tbaa !1
  %518 = getelementptr inbounds double, double* %517, i64 %516
  %519 = load double, double* %518, align 8, !tbaa !7
  %520 = load double, double* %h01, align 8, !tbaa !7
  %521 = fmul double %519, %520
  %522 = fadd double %514, %521
  %523 = load i32, i32* %i02, align 4, !tbaa !5
  %524 = sext i32 %523 to i64
  %525 = load double*, double** %9, align 8, !tbaa !1
  %526 = getelementptr inbounds double, double* %525, i64 %524
  %527 = load double, double* %526, align 8, !tbaa !7
  %528 = load double, double* %h02, align 8, !tbaa !7
  %529 = fmul double %527, %528
  %530 = fadd double %522, %529
  %531 = load i32, i32* %i03, align 4, !tbaa !5
  %532 = sext i32 %531 to i64
  %533 = load double*, double** %9, align 8, !tbaa !1
  %534 = getelementptr inbounds double, double* %533, i64 %532
  %535 = load double, double* %534, align 8, !tbaa !7
  %536 = load double, double* %h03, align 8, !tbaa !7
  %537 = fmul double %535, %536
  %538 = fadd double %530, %537
  %539 = fmul double %507, %538
  %540 = load double*, double** %13, align 8, !tbaa !1
  %541 = getelementptr inbounds double, double* %540, i64 5
  store double %539, double* %541, align 8, !tbaa !7
  %542 = load double, double* %12, align 8, !tbaa !7
  %543 = load i32, i32* %i00, align 4, !tbaa !5
  %544 = sext i32 %543 to i64
  %545 = load double*, double** %10, align 8, !tbaa !1
  %546 = getelementptr inbounds double, double* %545, i64 %544
  %547 = load double, double* %546, align 8, !tbaa !7
  %548 = load double, double* %h00, align 8, !tbaa !7
  %549 = fmul double %547, %548
  %550 = load i32, i32* %i01, align 4, !tbaa !5
  %551 = sext i32 %550 to i64
  %552 = load double*, double** %10, align 8, !tbaa !1
  %553 = getelementptr inbounds double, double* %552, i64 %551
  %554 = load double, double* %553, align 8, !tbaa !7
  %555 = load double, double* %h01, align 8, !tbaa !7
  %556 = fmul double %554, %555
  %557 = fadd double %549, %556
  %558 = load i32, i32* %i02, align 4, !tbaa !5
  %559 = sext i32 %558 to i64
  %560 = load double*, double** %10, align 8, !tbaa !1
  %561 = getelementptr inbounds double, double* %560, i64 %559
  %562 = load double, double* %561, align 8, !tbaa !7
  %563 = load double, double* %h02, align 8, !tbaa !7
  %564 = fmul double %562, %563
  %565 = fadd double %557, %564
  %566 = load i32, i32* %i03, align 4, !tbaa !5
  %567 = sext i32 %566 to i64
  %568 = load double*, double** %10, align 8, !tbaa !1
  %569 = getelementptr inbounds double, double* %568, i64 %567
  %570 = load double, double* %569, align 8, !tbaa !7
  %571 = load double, double* %h03, align 8, !tbaa !7
  %572 = fmul double %570, %571
  %573 = fadd double %565, %572
  %574 = fmul double %542, %573
  %575 = load double*, double** %13, align 8, !tbaa !1
  %576 = getelementptr inbounds double, double* %575, i64 6
  store double %574, double* %576, align 8, !tbaa !7
  %577 = load double, double* %12, align 8, !tbaa !7
  %578 = load i32, i32* %i00, align 4, !tbaa !5
  %579 = sext i32 %578 to i64
  %580 = load double*, double** %11, align 8, !tbaa !1
  %581 = getelementptr inbounds double, double* %580, i64 %579
  %582 = load double, double* %581, align 8, !tbaa !7
  %583 = load double, double* %h00, align 8, !tbaa !7
  %584 = fmul double %582, %583
  %585 = load i32, i32* %i01, align 4, !tbaa !5
  %586 = sext i32 %585 to i64
  %587 = load double*, double** %11, align 8, !tbaa !1
  %588 = getelementptr inbounds double, double* %587, i64 %586
  %589 = load double, double* %588, align 8, !tbaa !7
  %590 = load double, double* %h01, align 8, !tbaa !7
  %591 = fmul double %589, %590
  %592 = fadd double %584, %591
  %593 = load i32, i32* %i02, align 4, !tbaa !5
  %594 = sext i32 %593 to i64
  %595 = load double*, double** %11, align 8, !tbaa !1
  %596 = getelementptr inbounds double, double* %595, i64 %594
  %597 = load double, double* %596, align 8, !tbaa !7
  %598 = load double, double* %h02, align 8, !tbaa !7
  %599 = fmul double %597, %598
  %600 = fadd double %592, %599
  %601 = load i32, i32* %i03, align 4, !tbaa !5
  %602 = sext i32 %601 to i64
  %603 = load double*, double** %11, align 8, !tbaa !1
  %604 = getelementptr inbounds double, double* %603, i64 %602
  %605 = load double, double* %604, align 8, !tbaa !7
  %606 = load double, double* %h03, align 8, !tbaa !7
  %607 = fmul double %605, %606
  %608 = fadd double %600, %607
  %609 = fmul double %577, %608
  %610 = load double*, double** %13, align 8, !tbaa !1
  %611 = getelementptr inbounds double, double* %610, i64 7
  store double %609, double* %611, align 8, !tbaa !7
  %612 = load i32, i32* %i00, align 4, !tbaa !5
  %613 = sext i32 %612 to i64
  %614 = load double*, double** %4, align 8, !tbaa !1
  %615 = getelementptr inbounds double, double* %614, i64 %613
  %616 = load double, double* %615, align 8, !tbaa !7
  %617 = load double*, double** %2, align 8, !tbaa !1
  %618 = getelementptr inbounds double, double* %617, i64 0
  %619 = load double, double* %618, align 8, !tbaa !7
  %620 = fmul double %616, %619
  %621 = load i32, i32* %i00, align 4, !tbaa !5
  %622 = sext i32 %621 to i64
  %623 = load double*, double** %5, align 8, !tbaa !1
  %624 = getelementptr inbounds double, double* %623, i64 %622
  %625 = load double, double* %624, align 8, !tbaa !7
  %626 = load double*, double** %2, align 8, !tbaa !1
  %627 = getelementptr inbounds double, double* %626, i64 1
  %628 = load double, double* %627, align 8, !tbaa !7
  %629 = fmul double %625, %628
  %630 = fadd double %620, %629
  %631 = load i32, i32* %i00, align 4, !tbaa !5
  %632 = sext i32 %631 to i64
  %633 = load double*, double** %6, align 8, !tbaa !1
  %634 = getelementptr inbounds double, double* %633, i64 %632
  %635 = load double, double* %634, align 8, !tbaa !7
  %636 = load double*, double** %2, align 8, !tbaa !1
  %637 = getelementptr inbounds double, double* %636, i64 2
  %638 = load double, double* %637, align 8, !tbaa !7
  %639 = fmul double %635, %638
  %640 = fadd double %630, %639
  %641 = load i32, i32* %i00, align 4, !tbaa !5
  %642 = sext i32 %641 to i64
  %643 = load double*, double** %7, align 8, !tbaa !1
  %644 = getelementptr inbounds double, double* %643, i64 %642
  %645 = load double, double* %644, align 8, !tbaa !7
  %646 = load double*, double** %2, align 8, !tbaa !1
  %647 = getelementptr inbounds double, double* %646, i64 3
  %648 = load double, double* %647, align 8, !tbaa !7
  %649 = fmul double %645, %648
  %650 = fadd double %640, %649
  %651 = load i32, i32* %i00, align 4, !tbaa !5
  %652 = sext i32 %651 to i64
  %653 = load double*, double** %8, align 8, !tbaa !1
  %654 = getelementptr inbounds double, double* %653, i64 %652
  %655 = load double, double* %654, align 8, !tbaa !7
  %656 = load double*, double** %2, align 8, !tbaa !1
  %657 = getelementptr inbounds double, double* %656, i64 4
  %658 = load double, double* %657, align 8, !tbaa !7
  %659 = fmul double %655, %658
  %660 = fadd double %650, %659
  %661 = load i32, i32* %i00, align 4, !tbaa !5
  %662 = sext i32 %661 to i64
  %663 = load double*, double** %9, align 8, !tbaa !1
  %664 = getelementptr inbounds double, double* %663, i64 %662
  %665 = load double, double* %664, align 8, !tbaa !7
  %666 = load double*, double** %2, align 8, !tbaa !1
  %667 = getelementptr inbounds double, double* %666, i64 5
  %668 = load double, double* %667, align 8, !tbaa !7
  %669 = fmul double %665, %668
  %670 = fadd double %660, %669
  %671 = load i32, i32* %i00, align 4, !tbaa !5
  %672 = sext i32 %671 to i64
  %673 = load double*, double** %10, align 8, !tbaa !1
  %674 = getelementptr inbounds double, double* %673, i64 %672
  %675 = load double, double* %674, align 8, !tbaa !7
  %676 = load double*, double** %2, align 8, !tbaa !1
  %677 = getelementptr inbounds double, double* %676, i64 6
  %678 = load double, double* %677, align 8, !tbaa !7
  %679 = fmul double %675, %678
  %680 = fadd double %670, %679
  %681 = load i32, i32* %i00, align 4, !tbaa !5
  %682 = sext i32 %681 to i64
  %683 = load double*, double** %11, align 8, !tbaa !1
  %684 = getelementptr inbounds double, double* %683, i64 %682
  %685 = load double, double* %684, align 8, !tbaa !7
  %686 = load double*, double** %2, align 8, !tbaa !1
  %687 = getelementptr inbounds double, double* %686, i64 7
  %688 = load double, double* %687, align 8, !tbaa !7
  %689 = fmul double %685, %688
  %690 = fadd double %680, %689
  store double %690, double* %h00, align 8, !tbaa !7
  %691 = load i32, i32* %i01, align 4, !tbaa !5
  %692 = sext i32 %691 to i64
  %693 = load double*, double** %4, align 8, !tbaa !1
  %694 = getelementptr inbounds double, double* %693, i64 %692
  %695 = load double, double* %694, align 8, !tbaa !7
  %696 = load double*, double** %2, align 8, !tbaa !1
  %697 = getelementptr inbounds double, double* %696, i64 0
  %698 = load double, double* %697, align 8, !tbaa !7
  %699 = fmul double %695, %698
  %700 = load i32, i32* %i01, align 4, !tbaa !5
  %701 = sext i32 %700 to i64
  %702 = load double*, double** %5, align 8, !tbaa !1
  %703 = getelementptr inbounds double, double* %702, i64 %701
  %704 = load double, double* %703, align 8, !tbaa !7
  %705 = load double*, double** %2, align 8, !tbaa !1
  %706 = getelementptr inbounds double, double* %705, i64 1
  %707 = load double, double* %706, align 8, !tbaa !7
  %708 = fmul double %704, %707
  %709 = fadd double %699, %708
  %710 = load i32, i32* %i01, align 4, !tbaa !5
  %711 = sext i32 %710 to i64
  %712 = load double*, double** %6, align 8, !tbaa !1
  %713 = getelementptr inbounds double, double* %712, i64 %711
  %714 = load double, double* %713, align 8, !tbaa !7
  %715 = load double*, double** %2, align 8, !tbaa !1
  %716 = getelementptr inbounds double, double* %715, i64 2
  %717 = load double, double* %716, align 8, !tbaa !7
  %718 = fmul double %714, %717
  %719 = fadd double %709, %718
  %720 = load i32, i32* %i01, align 4, !tbaa !5
  %721 = sext i32 %720 to i64
  %722 = load double*, double** %7, align 8, !tbaa !1
  %723 = getelementptr inbounds double, double* %722, i64 %721
  %724 = load double, double* %723, align 8, !tbaa !7
  %725 = load double*, double** %2, align 8, !tbaa !1
  %726 = getelementptr inbounds double, double* %725, i64 3
  %727 = load double, double* %726, align 8, !tbaa !7
  %728 = fmul double %724, %727
  %729 = fadd double %719, %728
  %730 = load i32, i32* %i01, align 4, !tbaa !5
  %731 = sext i32 %730 to i64
  %732 = load double*, double** %8, align 8, !tbaa !1
  %733 = getelementptr inbounds double, double* %732, i64 %731
  %734 = load double, double* %733, align 8, !tbaa !7
  %735 = load double*, double** %2, align 8, !tbaa !1
  %736 = getelementptr inbounds double, double* %735, i64 4
  %737 = load double, double* %736, align 8, !tbaa !7
  %738 = fmul double %734, %737
  %739 = fadd double %729, %738
  %740 = load i32, i32* %i01, align 4, !tbaa !5
  %741 = sext i32 %740 to i64
  %742 = load double*, double** %9, align 8, !tbaa !1
  %743 = getelementptr inbounds double, double* %742, i64 %741
  %744 = load double, double* %743, align 8, !tbaa !7
  %745 = load double*, double** %2, align 8, !tbaa !1
  %746 = getelementptr inbounds double, double* %745, i64 5
  %747 = load double, double* %746, align 8, !tbaa !7
  %748 = fmul double %744, %747
  %749 = fadd double %739, %748
  %750 = load i32, i32* %i01, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = load double*, double** %10, align 8, !tbaa !1
  %753 = getelementptr inbounds double, double* %752, i64 %751
  %754 = load double, double* %753, align 8, !tbaa !7
  %755 = load double*, double** %2, align 8, !tbaa !1
  %756 = getelementptr inbounds double, double* %755, i64 6
  %757 = load double, double* %756, align 8, !tbaa !7
  %758 = fmul double %754, %757
  %759 = fadd double %749, %758
  %760 = load i32, i32* %i01, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = load double*, double** %11, align 8, !tbaa !1
  %763 = getelementptr inbounds double, double* %762, i64 %761
  %764 = load double, double* %763, align 8, !tbaa !7
  %765 = load double*, double** %2, align 8, !tbaa !1
  %766 = getelementptr inbounds double, double* %765, i64 7
  %767 = load double, double* %766, align 8, !tbaa !7
  %768 = fmul double %764, %767
  %769 = fadd double %759, %768
  store double %769, double* %h01, align 8, !tbaa !7
  %770 = load i32, i32* %i02, align 4, !tbaa !5
  %771 = sext i32 %770 to i64
  %772 = load double*, double** %4, align 8, !tbaa !1
  %773 = getelementptr inbounds double, double* %772, i64 %771
  %774 = load double, double* %773, align 8, !tbaa !7
  %775 = load double*, double** %2, align 8, !tbaa !1
  %776 = getelementptr inbounds double, double* %775, i64 0
  %777 = load double, double* %776, align 8, !tbaa !7
  %778 = fmul double %774, %777
  %779 = load i32, i32* %i02, align 4, !tbaa !5
  %780 = sext i32 %779 to i64
  %781 = load double*, double** %5, align 8, !tbaa !1
  %782 = getelementptr inbounds double, double* %781, i64 %780
  %783 = load double, double* %782, align 8, !tbaa !7
  %784 = load double*, double** %2, align 8, !tbaa !1
  %785 = getelementptr inbounds double, double* %784, i64 1
  %786 = load double, double* %785, align 8, !tbaa !7
  %787 = fmul double %783, %786
  %788 = fadd double %778, %787
  %789 = load i32, i32* %i02, align 4, !tbaa !5
  %790 = sext i32 %789 to i64
  %791 = load double*, double** %6, align 8, !tbaa !1
  %792 = getelementptr inbounds double, double* %791, i64 %790
  %793 = load double, double* %792, align 8, !tbaa !7
  %794 = load double*, double** %2, align 8, !tbaa !1
  %795 = getelementptr inbounds double, double* %794, i64 2
  %796 = load double, double* %795, align 8, !tbaa !7
  %797 = fmul double %793, %796
  %798 = fadd double %788, %797
  %799 = load i32, i32* %i02, align 4, !tbaa !5
  %800 = sext i32 %799 to i64
  %801 = load double*, double** %7, align 8, !tbaa !1
  %802 = getelementptr inbounds double, double* %801, i64 %800
  %803 = load double, double* %802, align 8, !tbaa !7
  %804 = load double*, double** %2, align 8, !tbaa !1
  %805 = getelementptr inbounds double, double* %804, i64 3
  %806 = load double, double* %805, align 8, !tbaa !7
  %807 = fmul double %803, %806
  %808 = fadd double %798, %807
  %809 = load i32, i32* %i02, align 4, !tbaa !5
  %810 = sext i32 %809 to i64
  %811 = load double*, double** %8, align 8, !tbaa !1
  %812 = getelementptr inbounds double, double* %811, i64 %810
  %813 = load double, double* %812, align 8, !tbaa !7
  %814 = load double*, double** %2, align 8, !tbaa !1
  %815 = getelementptr inbounds double, double* %814, i64 4
  %816 = load double, double* %815, align 8, !tbaa !7
  %817 = fmul double %813, %816
  %818 = fadd double %808, %817
  %819 = load i32, i32* %i02, align 4, !tbaa !5
  %820 = sext i32 %819 to i64
  %821 = load double*, double** %9, align 8, !tbaa !1
  %822 = getelementptr inbounds double, double* %821, i64 %820
  %823 = load double, double* %822, align 8, !tbaa !7
  %824 = load double*, double** %2, align 8, !tbaa !1
  %825 = getelementptr inbounds double, double* %824, i64 5
  %826 = load double, double* %825, align 8, !tbaa !7
  %827 = fmul double %823, %826
  %828 = fadd double %818, %827
  %829 = load i32, i32* %i02, align 4, !tbaa !5
  %830 = sext i32 %829 to i64
  %831 = load double*, double** %10, align 8, !tbaa !1
  %832 = getelementptr inbounds double, double* %831, i64 %830
  %833 = load double, double* %832, align 8, !tbaa !7
  %834 = load double*, double** %2, align 8, !tbaa !1
  %835 = getelementptr inbounds double, double* %834, i64 6
  %836 = load double, double* %835, align 8, !tbaa !7
  %837 = fmul double %833, %836
  %838 = fadd double %828, %837
  %839 = load i32, i32* %i02, align 4, !tbaa !5
  %840 = sext i32 %839 to i64
  %841 = load double*, double** %11, align 8, !tbaa !1
  %842 = getelementptr inbounds double, double* %841, i64 %840
  %843 = load double, double* %842, align 8, !tbaa !7
  %844 = load double*, double** %2, align 8, !tbaa !1
  %845 = getelementptr inbounds double, double* %844, i64 7
  %846 = load double, double* %845, align 8, !tbaa !7
  %847 = fmul double %843, %846
  %848 = fadd double %838, %847
  store double %848, double* %h02, align 8, !tbaa !7
  %849 = load i32, i32* %i03, align 4, !tbaa !5
  %850 = sext i32 %849 to i64
  %851 = load double*, double** %4, align 8, !tbaa !1
  %852 = getelementptr inbounds double, double* %851, i64 %850
  %853 = load double, double* %852, align 8, !tbaa !7
  %854 = load double*, double** %2, align 8, !tbaa !1
  %855 = getelementptr inbounds double, double* %854, i64 0
  %856 = load double, double* %855, align 8, !tbaa !7
  %857 = fmul double %853, %856
  %858 = load i32, i32* %i03, align 4, !tbaa !5
  %859 = sext i32 %858 to i64
  %860 = load double*, double** %5, align 8, !tbaa !1
  %861 = getelementptr inbounds double, double* %860, i64 %859
  %862 = load double, double* %861, align 8, !tbaa !7
  %863 = load double*, double** %2, align 8, !tbaa !1
  %864 = getelementptr inbounds double, double* %863, i64 1
  %865 = load double, double* %864, align 8, !tbaa !7
  %866 = fmul double %862, %865
  %867 = fadd double %857, %866
  %868 = load i32, i32* %i03, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = load double*, double** %6, align 8, !tbaa !1
  %871 = getelementptr inbounds double, double* %870, i64 %869
  %872 = load double, double* %871, align 8, !tbaa !7
  %873 = load double*, double** %2, align 8, !tbaa !1
  %874 = getelementptr inbounds double, double* %873, i64 2
  %875 = load double, double* %874, align 8, !tbaa !7
  %876 = fmul double %872, %875
  %877 = fadd double %867, %876
  %878 = load i32, i32* %i03, align 4, !tbaa !5
  %879 = sext i32 %878 to i64
  %880 = load double*, double** %7, align 8, !tbaa !1
  %881 = getelementptr inbounds double, double* %880, i64 %879
  %882 = load double, double* %881, align 8, !tbaa !7
  %883 = load double*, double** %2, align 8, !tbaa !1
  %884 = getelementptr inbounds double, double* %883, i64 3
  %885 = load double, double* %884, align 8, !tbaa !7
  %886 = fmul double %882, %885
  %887 = fadd double %877, %886
  %888 = load i32, i32* %i03, align 4, !tbaa !5
  %889 = sext i32 %888 to i64
  %890 = load double*, double** %8, align 8, !tbaa !1
  %891 = getelementptr inbounds double, double* %890, i64 %889
  %892 = load double, double* %891, align 8, !tbaa !7
  %893 = load double*, double** %2, align 8, !tbaa !1
  %894 = getelementptr inbounds double, double* %893, i64 4
  %895 = load double, double* %894, align 8, !tbaa !7
  %896 = fmul double %892, %895
  %897 = fadd double %887, %896
  %898 = load i32, i32* %i03, align 4, !tbaa !5
  %899 = sext i32 %898 to i64
  %900 = load double*, double** %9, align 8, !tbaa !1
  %901 = getelementptr inbounds double, double* %900, i64 %899
  %902 = load double, double* %901, align 8, !tbaa !7
  %903 = load double*, double** %2, align 8, !tbaa !1
  %904 = getelementptr inbounds double, double* %903, i64 5
  %905 = load double, double* %904, align 8, !tbaa !7
  %906 = fmul double %902, %905
  %907 = fadd double %897, %906
  %908 = load i32, i32* %i03, align 4, !tbaa !5
  %909 = sext i32 %908 to i64
  %910 = load double*, double** %10, align 8, !tbaa !1
  %911 = getelementptr inbounds double, double* %910, i64 %909
  %912 = load double, double* %911, align 8, !tbaa !7
  %913 = load double*, double** %2, align 8, !tbaa !1
  %914 = getelementptr inbounds double, double* %913, i64 6
  %915 = load double, double* %914, align 8, !tbaa !7
  %916 = fmul double %912, %915
  %917 = fadd double %907, %916
  %918 = load i32, i32* %i03, align 4, !tbaa !5
  %919 = sext i32 %918 to i64
  %920 = load double*, double** %11, align 8, !tbaa !1
  %921 = getelementptr inbounds double, double* %920, i64 %919
  %922 = load double, double* %921, align 8, !tbaa !7
  %923 = load double*, double** %2, align 8, !tbaa !1
  %924 = getelementptr inbounds double, double* %923, i64 7
  %925 = load double, double* %924, align 8, !tbaa !7
  %926 = fmul double %922, %925
  %927 = fadd double %917, %926
  store double %927, double* %h03, align 8, !tbaa !7
  %928 = load double, double* %12, align 8, !tbaa !7
  %929 = load i32, i32* %i00, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = load double*, double** %4, align 8, !tbaa !1
  %932 = getelementptr inbounds double, double* %931, i64 %930
  %933 = load double, double* %932, align 8, !tbaa !7
  %934 = load double, double* %h00, align 8, !tbaa !7
  %935 = fmul double %933, %934
  %936 = load i32, i32* %i01, align 4, !tbaa !5
  %937 = sext i32 %936 to i64
  %938 = load double*, double** %4, align 8, !tbaa !1
  %939 = getelementptr inbounds double, double* %938, i64 %937
  %940 = load double, double* %939, align 8, !tbaa !7
  %941 = load double, double* %h01, align 8, !tbaa !7
  %942 = fmul double %940, %941
  %943 = fadd double %935, %942
  %944 = load i32, i32* %i02, align 4, !tbaa !5
  %945 = sext i32 %944 to i64
  %946 = load double*, double** %4, align 8, !tbaa !1
  %947 = getelementptr inbounds double, double* %946, i64 %945
  %948 = load double, double* %947, align 8, !tbaa !7
  %949 = load double, double* %h02, align 8, !tbaa !7
  %950 = fmul double %948, %949
  %951 = fadd double %943, %950
  %952 = load i32, i32* %i03, align 4, !tbaa !5
  %953 = sext i32 %952 to i64
  %954 = load double*, double** %4, align 8, !tbaa !1
  %955 = getelementptr inbounds double, double* %954, i64 %953
  %956 = load double, double* %955, align 8, !tbaa !7
  %957 = load double, double* %h03, align 8, !tbaa !7
  %958 = fmul double %956, %957
  %959 = fadd double %951, %958
  %960 = fmul double %928, %959
  %961 = load double*, double** %14, align 8, !tbaa !1
  %962 = getelementptr inbounds double, double* %961, i64 0
  store double %960, double* %962, align 8, !tbaa !7
  %963 = load double, double* %12, align 8, !tbaa !7
  %964 = load i32, i32* %i00, align 4, !tbaa !5
  %965 = sext i32 %964 to i64
  %966 = load double*, double** %5, align 8, !tbaa !1
  %967 = getelementptr inbounds double, double* %966, i64 %965
  %968 = load double, double* %967, align 8, !tbaa !7
  %969 = load double, double* %h00, align 8, !tbaa !7
  %970 = fmul double %968, %969
  %971 = load i32, i32* %i01, align 4, !tbaa !5
  %972 = sext i32 %971 to i64
  %973 = load double*, double** %5, align 8, !tbaa !1
  %974 = getelementptr inbounds double, double* %973, i64 %972
  %975 = load double, double* %974, align 8, !tbaa !7
  %976 = load double, double* %h01, align 8, !tbaa !7
  %977 = fmul double %975, %976
  %978 = fadd double %970, %977
  %979 = load i32, i32* %i02, align 4, !tbaa !5
  %980 = sext i32 %979 to i64
  %981 = load double*, double** %5, align 8, !tbaa !1
  %982 = getelementptr inbounds double, double* %981, i64 %980
  %983 = load double, double* %982, align 8, !tbaa !7
  %984 = load double, double* %h02, align 8, !tbaa !7
  %985 = fmul double %983, %984
  %986 = fadd double %978, %985
  %987 = load i32, i32* %i03, align 4, !tbaa !5
  %988 = sext i32 %987 to i64
  %989 = load double*, double** %5, align 8, !tbaa !1
  %990 = getelementptr inbounds double, double* %989, i64 %988
  %991 = load double, double* %990, align 8, !tbaa !7
  %992 = load double, double* %h03, align 8, !tbaa !7
  %993 = fmul double %991, %992
  %994 = fadd double %986, %993
  %995 = fmul double %963, %994
  %996 = load double*, double** %14, align 8, !tbaa !1
  %997 = getelementptr inbounds double, double* %996, i64 1
  store double %995, double* %997, align 8, !tbaa !7
  %998 = load double, double* %12, align 8, !tbaa !7
  %999 = load i32, i32* %i00, align 4, !tbaa !5
  %1000 = sext i32 %999 to i64
  %1001 = load double*, double** %6, align 8, !tbaa !1
  %1002 = getelementptr inbounds double, double* %1001, i64 %1000
  %1003 = load double, double* %1002, align 8, !tbaa !7
  %1004 = load double, double* %h00, align 8, !tbaa !7
  %1005 = fmul double %1003, %1004
  %1006 = load i32, i32* %i01, align 4, !tbaa !5
  %1007 = sext i32 %1006 to i64
  %1008 = load double*, double** %6, align 8, !tbaa !1
  %1009 = getelementptr inbounds double, double* %1008, i64 %1007
  %1010 = load double, double* %1009, align 8, !tbaa !7
  %1011 = load double, double* %h01, align 8, !tbaa !7
  %1012 = fmul double %1010, %1011
  %1013 = fadd double %1005, %1012
  %1014 = load i32, i32* %i02, align 4, !tbaa !5
  %1015 = sext i32 %1014 to i64
  %1016 = load double*, double** %6, align 8, !tbaa !1
  %1017 = getelementptr inbounds double, double* %1016, i64 %1015
  %1018 = load double, double* %1017, align 8, !tbaa !7
  %1019 = load double, double* %h02, align 8, !tbaa !7
  %1020 = fmul double %1018, %1019
  %1021 = fadd double %1013, %1020
  %1022 = load i32, i32* %i03, align 4, !tbaa !5
  %1023 = sext i32 %1022 to i64
  %1024 = load double*, double** %6, align 8, !tbaa !1
  %1025 = getelementptr inbounds double, double* %1024, i64 %1023
  %1026 = load double, double* %1025, align 8, !tbaa !7
  %1027 = load double, double* %h03, align 8, !tbaa !7
  %1028 = fmul double %1026, %1027
  %1029 = fadd double %1021, %1028
  %1030 = fmul double %998, %1029
  %1031 = load double*, double** %14, align 8, !tbaa !1
  %1032 = getelementptr inbounds double, double* %1031, i64 2
  store double %1030, double* %1032, align 8, !tbaa !7
  %1033 = load double, double* %12, align 8, !tbaa !7
  %1034 = load i32, i32* %i00, align 4, !tbaa !5
  %1035 = sext i32 %1034 to i64
  %1036 = load double*, double** %7, align 8, !tbaa !1
  %1037 = getelementptr inbounds double, double* %1036, i64 %1035
  %1038 = load double, double* %1037, align 8, !tbaa !7
  %1039 = load double, double* %h00, align 8, !tbaa !7
  %1040 = fmul double %1038, %1039
  %1041 = load i32, i32* %i01, align 4, !tbaa !5
  %1042 = sext i32 %1041 to i64
  %1043 = load double*, double** %7, align 8, !tbaa !1
  %1044 = getelementptr inbounds double, double* %1043, i64 %1042
  %1045 = load double, double* %1044, align 8, !tbaa !7
  %1046 = load double, double* %h01, align 8, !tbaa !7
  %1047 = fmul double %1045, %1046
  %1048 = fadd double %1040, %1047
  %1049 = load i32, i32* %i02, align 4, !tbaa !5
  %1050 = sext i32 %1049 to i64
  %1051 = load double*, double** %7, align 8, !tbaa !1
  %1052 = getelementptr inbounds double, double* %1051, i64 %1050
  %1053 = load double, double* %1052, align 8, !tbaa !7
  %1054 = load double, double* %h02, align 8, !tbaa !7
  %1055 = fmul double %1053, %1054
  %1056 = fadd double %1048, %1055
  %1057 = load i32, i32* %i03, align 4, !tbaa !5
  %1058 = sext i32 %1057 to i64
  %1059 = load double*, double** %7, align 8, !tbaa !1
  %1060 = getelementptr inbounds double, double* %1059, i64 %1058
  %1061 = load double, double* %1060, align 8, !tbaa !7
  %1062 = load double, double* %h03, align 8, !tbaa !7
  %1063 = fmul double %1061, %1062
  %1064 = fadd double %1056, %1063
  %1065 = fmul double %1033, %1064
  %1066 = load double*, double** %14, align 8, !tbaa !1
  %1067 = getelementptr inbounds double, double* %1066, i64 3
  store double %1065, double* %1067, align 8, !tbaa !7
  %1068 = load double, double* %12, align 8, !tbaa !7
  %1069 = load i32, i32* %i00, align 4, !tbaa !5
  %1070 = sext i32 %1069 to i64
  %1071 = load double*, double** %8, align 8, !tbaa !1
  %1072 = getelementptr inbounds double, double* %1071, i64 %1070
  %1073 = load double, double* %1072, align 8, !tbaa !7
  %1074 = load double, double* %h00, align 8, !tbaa !7
  %1075 = fmul double %1073, %1074
  %1076 = load i32, i32* %i01, align 4, !tbaa !5
  %1077 = sext i32 %1076 to i64
  %1078 = load double*, double** %8, align 8, !tbaa !1
  %1079 = getelementptr inbounds double, double* %1078, i64 %1077
  %1080 = load double, double* %1079, align 8, !tbaa !7
  %1081 = load double, double* %h01, align 8, !tbaa !7
  %1082 = fmul double %1080, %1081
  %1083 = fadd double %1075, %1082
  %1084 = load i32, i32* %i02, align 4, !tbaa !5
  %1085 = sext i32 %1084 to i64
  %1086 = load double*, double** %8, align 8, !tbaa !1
  %1087 = getelementptr inbounds double, double* %1086, i64 %1085
  %1088 = load double, double* %1087, align 8, !tbaa !7
  %1089 = load double, double* %h02, align 8, !tbaa !7
  %1090 = fmul double %1088, %1089
  %1091 = fadd double %1083, %1090
  %1092 = load i32, i32* %i03, align 4, !tbaa !5
  %1093 = sext i32 %1092 to i64
  %1094 = load double*, double** %8, align 8, !tbaa !1
  %1095 = getelementptr inbounds double, double* %1094, i64 %1093
  %1096 = load double, double* %1095, align 8, !tbaa !7
  %1097 = load double, double* %h03, align 8, !tbaa !7
  %1098 = fmul double %1096, %1097
  %1099 = fadd double %1091, %1098
  %1100 = fmul double %1068, %1099
  %1101 = load double*, double** %14, align 8, !tbaa !1
  %1102 = getelementptr inbounds double, double* %1101, i64 4
  store double %1100, double* %1102, align 8, !tbaa !7
  %1103 = load double, double* %12, align 8, !tbaa !7
  %1104 = load i32, i32* %i00, align 4, !tbaa !5
  %1105 = sext i32 %1104 to i64
  %1106 = load double*, double** %9, align 8, !tbaa !1
  %1107 = getelementptr inbounds double, double* %1106, i64 %1105
  %1108 = load double, double* %1107, align 8, !tbaa !7
  %1109 = load double, double* %h00, align 8, !tbaa !7
  %1110 = fmul double %1108, %1109
  %1111 = load i32, i32* %i01, align 4, !tbaa !5
  %1112 = sext i32 %1111 to i64
  %1113 = load double*, double** %9, align 8, !tbaa !1
  %1114 = getelementptr inbounds double, double* %1113, i64 %1112
  %1115 = load double, double* %1114, align 8, !tbaa !7
  %1116 = load double, double* %h01, align 8, !tbaa !7
  %1117 = fmul double %1115, %1116
  %1118 = fadd double %1110, %1117
  %1119 = load i32, i32* %i02, align 4, !tbaa !5
  %1120 = sext i32 %1119 to i64
  %1121 = load double*, double** %9, align 8, !tbaa !1
  %1122 = getelementptr inbounds double, double* %1121, i64 %1120
  %1123 = load double, double* %1122, align 8, !tbaa !7
  %1124 = load double, double* %h02, align 8, !tbaa !7
  %1125 = fmul double %1123, %1124
  %1126 = fadd double %1118, %1125
  %1127 = load i32, i32* %i03, align 4, !tbaa !5
  %1128 = sext i32 %1127 to i64
  %1129 = load double*, double** %9, align 8, !tbaa !1
  %1130 = getelementptr inbounds double, double* %1129, i64 %1128
  %1131 = load double, double* %1130, align 8, !tbaa !7
  %1132 = load double, double* %h03, align 8, !tbaa !7
  %1133 = fmul double %1131, %1132
  %1134 = fadd double %1126, %1133
  %1135 = fmul double %1103, %1134
  %1136 = load double*, double** %14, align 8, !tbaa !1
  %1137 = getelementptr inbounds double, double* %1136, i64 5
  store double %1135, double* %1137, align 8, !tbaa !7
  %1138 = load double, double* %12, align 8, !tbaa !7
  %1139 = load i32, i32* %i00, align 4, !tbaa !5
  %1140 = sext i32 %1139 to i64
  %1141 = load double*, double** %10, align 8, !tbaa !1
  %1142 = getelementptr inbounds double, double* %1141, i64 %1140
  %1143 = load double, double* %1142, align 8, !tbaa !7
  %1144 = load double, double* %h00, align 8, !tbaa !7
  %1145 = fmul double %1143, %1144
  %1146 = load i32, i32* %i01, align 4, !tbaa !5
  %1147 = sext i32 %1146 to i64
  %1148 = load double*, double** %10, align 8, !tbaa !1
  %1149 = getelementptr inbounds double, double* %1148, i64 %1147
  %1150 = load double, double* %1149, align 8, !tbaa !7
  %1151 = load double, double* %h01, align 8, !tbaa !7
  %1152 = fmul double %1150, %1151
  %1153 = fadd double %1145, %1152
  %1154 = load i32, i32* %i02, align 4, !tbaa !5
  %1155 = sext i32 %1154 to i64
  %1156 = load double*, double** %10, align 8, !tbaa !1
  %1157 = getelementptr inbounds double, double* %1156, i64 %1155
  %1158 = load double, double* %1157, align 8, !tbaa !7
  %1159 = load double, double* %h02, align 8, !tbaa !7
  %1160 = fmul double %1158, %1159
  %1161 = fadd double %1153, %1160
  %1162 = load i32, i32* %i03, align 4, !tbaa !5
  %1163 = sext i32 %1162 to i64
  %1164 = load double*, double** %10, align 8, !tbaa !1
  %1165 = getelementptr inbounds double, double* %1164, i64 %1163
  %1166 = load double, double* %1165, align 8, !tbaa !7
  %1167 = load double, double* %h03, align 8, !tbaa !7
  %1168 = fmul double %1166, %1167
  %1169 = fadd double %1161, %1168
  %1170 = fmul double %1138, %1169
  %1171 = load double*, double** %14, align 8, !tbaa !1
  %1172 = getelementptr inbounds double, double* %1171, i64 6
  store double %1170, double* %1172, align 8, !tbaa !7
  %1173 = load double, double* %12, align 8, !tbaa !7
  %1174 = load i32, i32* %i00, align 4, !tbaa !5
  %1175 = sext i32 %1174 to i64
  %1176 = load double*, double** %11, align 8, !tbaa !1
  %1177 = getelementptr inbounds double, double* %1176, i64 %1175
  %1178 = load double, double* %1177, align 8, !tbaa !7
  %1179 = load double, double* %h00, align 8, !tbaa !7
  %1180 = fmul double %1178, %1179
  %1181 = load i32, i32* %i01, align 4, !tbaa !5
  %1182 = sext i32 %1181 to i64
  %1183 = load double*, double** %11, align 8, !tbaa !1
  %1184 = getelementptr inbounds double, double* %1183, i64 %1182
  %1185 = load double, double* %1184, align 8, !tbaa !7
  %1186 = load double, double* %h01, align 8, !tbaa !7
  %1187 = fmul double %1185, %1186
  %1188 = fadd double %1180, %1187
  %1189 = load i32, i32* %i02, align 4, !tbaa !5
  %1190 = sext i32 %1189 to i64
  %1191 = load double*, double** %11, align 8, !tbaa !1
  %1192 = getelementptr inbounds double, double* %1191, i64 %1190
  %1193 = load double, double* %1192, align 8, !tbaa !7
  %1194 = load double, double* %h02, align 8, !tbaa !7
  %1195 = fmul double %1193, %1194
  %1196 = fadd double %1188, %1195
  %1197 = load i32, i32* %i03, align 4, !tbaa !5
  %1198 = sext i32 %1197 to i64
  %1199 = load double*, double** %11, align 8, !tbaa !1
  %1200 = getelementptr inbounds double, double* %1199, i64 %1198
  %1201 = load double, double* %1200, align 8, !tbaa !7
  %1202 = load double, double* %h03, align 8, !tbaa !7
  %1203 = fmul double %1201, %1202
  %1204 = fadd double %1196, %1203
  %1205 = fmul double %1173, %1204
  %1206 = load double*, double** %14, align 8, !tbaa !1
  %1207 = getelementptr inbounds double, double* %1206, i64 7
  store double %1205, double* %1207, align 8, !tbaa !7
  %1208 = load i32, i32* %i00, align 4, !tbaa !5
  %1209 = sext i32 %1208 to i64
  %1210 = load double*, double** %4, align 8, !tbaa !1
  %1211 = getelementptr inbounds double, double* %1210, i64 %1209
  %1212 = load double, double* %1211, align 8, !tbaa !7
  %1213 = load double*, double** %3, align 8, !tbaa !1
  %1214 = getelementptr inbounds double, double* %1213, i64 0
  %1215 = load double, double* %1214, align 8, !tbaa !7
  %1216 = fmul double %1212, %1215
  %1217 = load i32, i32* %i00, align 4, !tbaa !5
  %1218 = sext i32 %1217 to i64
  %1219 = load double*, double** %5, align 8, !tbaa !1
  %1220 = getelementptr inbounds double, double* %1219, i64 %1218
  %1221 = load double, double* %1220, align 8, !tbaa !7
  %1222 = load double*, double** %3, align 8, !tbaa !1
  %1223 = getelementptr inbounds double, double* %1222, i64 1
  %1224 = load double, double* %1223, align 8, !tbaa !7
  %1225 = fmul double %1221, %1224
  %1226 = fadd double %1216, %1225
  %1227 = load i32, i32* %i00, align 4, !tbaa !5
  %1228 = sext i32 %1227 to i64
  %1229 = load double*, double** %6, align 8, !tbaa !1
  %1230 = getelementptr inbounds double, double* %1229, i64 %1228
  %1231 = load double, double* %1230, align 8, !tbaa !7
  %1232 = load double*, double** %3, align 8, !tbaa !1
  %1233 = getelementptr inbounds double, double* %1232, i64 2
  %1234 = load double, double* %1233, align 8, !tbaa !7
  %1235 = fmul double %1231, %1234
  %1236 = fadd double %1226, %1235
  %1237 = load i32, i32* %i00, align 4, !tbaa !5
  %1238 = sext i32 %1237 to i64
  %1239 = load double*, double** %7, align 8, !tbaa !1
  %1240 = getelementptr inbounds double, double* %1239, i64 %1238
  %1241 = load double, double* %1240, align 8, !tbaa !7
  %1242 = load double*, double** %3, align 8, !tbaa !1
  %1243 = getelementptr inbounds double, double* %1242, i64 3
  %1244 = load double, double* %1243, align 8, !tbaa !7
  %1245 = fmul double %1241, %1244
  %1246 = fadd double %1236, %1245
  %1247 = load i32, i32* %i00, align 4, !tbaa !5
  %1248 = sext i32 %1247 to i64
  %1249 = load double*, double** %8, align 8, !tbaa !1
  %1250 = getelementptr inbounds double, double* %1249, i64 %1248
  %1251 = load double, double* %1250, align 8, !tbaa !7
  %1252 = load double*, double** %3, align 8, !tbaa !1
  %1253 = getelementptr inbounds double, double* %1252, i64 4
  %1254 = load double, double* %1253, align 8, !tbaa !7
  %1255 = fmul double %1251, %1254
  %1256 = fadd double %1246, %1255
  %1257 = load i32, i32* %i00, align 4, !tbaa !5
  %1258 = sext i32 %1257 to i64
  %1259 = load double*, double** %9, align 8, !tbaa !1
  %1260 = getelementptr inbounds double, double* %1259, i64 %1258
  %1261 = load double, double* %1260, align 8, !tbaa !7
  %1262 = load double*, double** %3, align 8, !tbaa !1
  %1263 = getelementptr inbounds double, double* %1262, i64 5
  %1264 = load double, double* %1263, align 8, !tbaa !7
  %1265 = fmul double %1261, %1264
  %1266 = fadd double %1256, %1265
  %1267 = load i32, i32* %i00, align 4, !tbaa !5
  %1268 = sext i32 %1267 to i64
  %1269 = load double*, double** %10, align 8, !tbaa !1
  %1270 = getelementptr inbounds double, double* %1269, i64 %1268
  %1271 = load double, double* %1270, align 8, !tbaa !7
  %1272 = load double*, double** %3, align 8, !tbaa !1
  %1273 = getelementptr inbounds double, double* %1272, i64 6
  %1274 = load double, double* %1273, align 8, !tbaa !7
  %1275 = fmul double %1271, %1274
  %1276 = fadd double %1266, %1275
  %1277 = load i32, i32* %i00, align 4, !tbaa !5
  %1278 = sext i32 %1277 to i64
  %1279 = load double*, double** %11, align 8, !tbaa !1
  %1280 = getelementptr inbounds double, double* %1279, i64 %1278
  %1281 = load double, double* %1280, align 8, !tbaa !7
  %1282 = load double*, double** %3, align 8, !tbaa !1
  %1283 = getelementptr inbounds double, double* %1282, i64 7
  %1284 = load double, double* %1283, align 8, !tbaa !7
  %1285 = fmul double %1281, %1284
  %1286 = fadd double %1276, %1285
  store double %1286, double* %h00, align 8, !tbaa !7
  %1287 = load i32, i32* %i01, align 4, !tbaa !5
  %1288 = sext i32 %1287 to i64
  %1289 = load double*, double** %4, align 8, !tbaa !1
  %1290 = getelementptr inbounds double, double* %1289, i64 %1288
  %1291 = load double, double* %1290, align 8, !tbaa !7
  %1292 = load double*, double** %3, align 8, !tbaa !1
  %1293 = getelementptr inbounds double, double* %1292, i64 0
  %1294 = load double, double* %1293, align 8, !tbaa !7
  %1295 = fmul double %1291, %1294
  %1296 = load i32, i32* %i01, align 4, !tbaa !5
  %1297 = sext i32 %1296 to i64
  %1298 = load double*, double** %5, align 8, !tbaa !1
  %1299 = getelementptr inbounds double, double* %1298, i64 %1297
  %1300 = load double, double* %1299, align 8, !tbaa !7
  %1301 = load double*, double** %3, align 8, !tbaa !1
  %1302 = getelementptr inbounds double, double* %1301, i64 1
  %1303 = load double, double* %1302, align 8, !tbaa !7
  %1304 = fmul double %1300, %1303
  %1305 = fadd double %1295, %1304
  %1306 = load i32, i32* %i01, align 4, !tbaa !5
  %1307 = sext i32 %1306 to i64
  %1308 = load double*, double** %6, align 8, !tbaa !1
  %1309 = getelementptr inbounds double, double* %1308, i64 %1307
  %1310 = load double, double* %1309, align 8, !tbaa !7
  %1311 = load double*, double** %3, align 8, !tbaa !1
  %1312 = getelementptr inbounds double, double* %1311, i64 2
  %1313 = load double, double* %1312, align 8, !tbaa !7
  %1314 = fmul double %1310, %1313
  %1315 = fadd double %1305, %1314
  %1316 = load i32, i32* %i01, align 4, !tbaa !5
  %1317 = sext i32 %1316 to i64
  %1318 = load double*, double** %7, align 8, !tbaa !1
  %1319 = getelementptr inbounds double, double* %1318, i64 %1317
  %1320 = load double, double* %1319, align 8, !tbaa !7
  %1321 = load double*, double** %3, align 8, !tbaa !1
  %1322 = getelementptr inbounds double, double* %1321, i64 3
  %1323 = load double, double* %1322, align 8, !tbaa !7
  %1324 = fmul double %1320, %1323
  %1325 = fadd double %1315, %1324
  %1326 = load i32, i32* %i01, align 4, !tbaa !5
  %1327 = sext i32 %1326 to i64
  %1328 = load double*, double** %8, align 8, !tbaa !1
  %1329 = getelementptr inbounds double, double* %1328, i64 %1327
  %1330 = load double, double* %1329, align 8, !tbaa !7
  %1331 = load double*, double** %3, align 8, !tbaa !1
  %1332 = getelementptr inbounds double, double* %1331, i64 4
  %1333 = load double, double* %1332, align 8, !tbaa !7
  %1334 = fmul double %1330, %1333
  %1335 = fadd double %1325, %1334
  %1336 = load i32, i32* %i01, align 4, !tbaa !5
  %1337 = sext i32 %1336 to i64
  %1338 = load double*, double** %9, align 8, !tbaa !1
  %1339 = getelementptr inbounds double, double* %1338, i64 %1337
  %1340 = load double, double* %1339, align 8, !tbaa !7
  %1341 = load double*, double** %3, align 8, !tbaa !1
  %1342 = getelementptr inbounds double, double* %1341, i64 5
  %1343 = load double, double* %1342, align 8, !tbaa !7
  %1344 = fmul double %1340, %1343
  %1345 = fadd double %1335, %1344
  %1346 = load i32, i32* %i01, align 4, !tbaa !5
  %1347 = sext i32 %1346 to i64
  %1348 = load double*, double** %10, align 8, !tbaa !1
  %1349 = getelementptr inbounds double, double* %1348, i64 %1347
  %1350 = load double, double* %1349, align 8, !tbaa !7
  %1351 = load double*, double** %3, align 8, !tbaa !1
  %1352 = getelementptr inbounds double, double* %1351, i64 6
  %1353 = load double, double* %1352, align 8, !tbaa !7
  %1354 = fmul double %1350, %1353
  %1355 = fadd double %1345, %1354
  %1356 = load i32, i32* %i01, align 4, !tbaa !5
  %1357 = sext i32 %1356 to i64
  %1358 = load double*, double** %11, align 8, !tbaa !1
  %1359 = getelementptr inbounds double, double* %1358, i64 %1357
  %1360 = load double, double* %1359, align 8, !tbaa !7
  %1361 = load double*, double** %3, align 8, !tbaa !1
  %1362 = getelementptr inbounds double, double* %1361, i64 7
  %1363 = load double, double* %1362, align 8, !tbaa !7
  %1364 = fmul double %1360, %1363
  %1365 = fadd double %1355, %1364
  store double %1365, double* %h01, align 8, !tbaa !7
  %1366 = load i32, i32* %i02, align 4, !tbaa !5
  %1367 = sext i32 %1366 to i64
  %1368 = load double*, double** %4, align 8, !tbaa !1
  %1369 = getelementptr inbounds double, double* %1368, i64 %1367
  %1370 = load double, double* %1369, align 8, !tbaa !7
  %1371 = load double*, double** %3, align 8, !tbaa !1
  %1372 = getelementptr inbounds double, double* %1371, i64 0
  %1373 = load double, double* %1372, align 8, !tbaa !7
  %1374 = fmul double %1370, %1373
  %1375 = load i32, i32* %i02, align 4, !tbaa !5
  %1376 = sext i32 %1375 to i64
  %1377 = load double*, double** %5, align 8, !tbaa !1
  %1378 = getelementptr inbounds double, double* %1377, i64 %1376
  %1379 = load double, double* %1378, align 8, !tbaa !7
  %1380 = load double*, double** %3, align 8, !tbaa !1
  %1381 = getelementptr inbounds double, double* %1380, i64 1
  %1382 = load double, double* %1381, align 8, !tbaa !7
  %1383 = fmul double %1379, %1382
  %1384 = fadd double %1374, %1383
  %1385 = load i32, i32* %i02, align 4, !tbaa !5
  %1386 = sext i32 %1385 to i64
  %1387 = load double*, double** %6, align 8, !tbaa !1
  %1388 = getelementptr inbounds double, double* %1387, i64 %1386
  %1389 = load double, double* %1388, align 8, !tbaa !7
  %1390 = load double*, double** %3, align 8, !tbaa !1
  %1391 = getelementptr inbounds double, double* %1390, i64 2
  %1392 = load double, double* %1391, align 8, !tbaa !7
  %1393 = fmul double %1389, %1392
  %1394 = fadd double %1384, %1393
  %1395 = load i32, i32* %i02, align 4, !tbaa !5
  %1396 = sext i32 %1395 to i64
  %1397 = load double*, double** %7, align 8, !tbaa !1
  %1398 = getelementptr inbounds double, double* %1397, i64 %1396
  %1399 = load double, double* %1398, align 8, !tbaa !7
  %1400 = load double*, double** %3, align 8, !tbaa !1
  %1401 = getelementptr inbounds double, double* %1400, i64 3
  %1402 = load double, double* %1401, align 8, !tbaa !7
  %1403 = fmul double %1399, %1402
  %1404 = fadd double %1394, %1403
  %1405 = load i32, i32* %i02, align 4, !tbaa !5
  %1406 = sext i32 %1405 to i64
  %1407 = load double*, double** %8, align 8, !tbaa !1
  %1408 = getelementptr inbounds double, double* %1407, i64 %1406
  %1409 = load double, double* %1408, align 8, !tbaa !7
  %1410 = load double*, double** %3, align 8, !tbaa !1
  %1411 = getelementptr inbounds double, double* %1410, i64 4
  %1412 = load double, double* %1411, align 8, !tbaa !7
  %1413 = fmul double %1409, %1412
  %1414 = fadd double %1404, %1413
  %1415 = load i32, i32* %i02, align 4, !tbaa !5
  %1416 = sext i32 %1415 to i64
  %1417 = load double*, double** %9, align 8, !tbaa !1
  %1418 = getelementptr inbounds double, double* %1417, i64 %1416
  %1419 = load double, double* %1418, align 8, !tbaa !7
  %1420 = load double*, double** %3, align 8, !tbaa !1
  %1421 = getelementptr inbounds double, double* %1420, i64 5
  %1422 = load double, double* %1421, align 8, !tbaa !7
  %1423 = fmul double %1419, %1422
  %1424 = fadd double %1414, %1423
  %1425 = load i32, i32* %i02, align 4, !tbaa !5
  %1426 = sext i32 %1425 to i64
  %1427 = load double*, double** %10, align 8, !tbaa !1
  %1428 = getelementptr inbounds double, double* %1427, i64 %1426
  %1429 = load double, double* %1428, align 8, !tbaa !7
  %1430 = load double*, double** %3, align 8, !tbaa !1
  %1431 = getelementptr inbounds double, double* %1430, i64 6
  %1432 = load double, double* %1431, align 8, !tbaa !7
  %1433 = fmul double %1429, %1432
  %1434 = fadd double %1424, %1433
  %1435 = load i32, i32* %i02, align 4, !tbaa !5
  %1436 = sext i32 %1435 to i64
  %1437 = load double*, double** %11, align 8, !tbaa !1
  %1438 = getelementptr inbounds double, double* %1437, i64 %1436
  %1439 = load double, double* %1438, align 8, !tbaa !7
  %1440 = load double*, double** %3, align 8, !tbaa !1
  %1441 = getelementptr inbounds double, double* %1440, i64 7
  %1442 = load double, double* %1441, align 8, !tbaa !7
  %1443 = fmul double %1439, %1442
  %1444 = fadd double %1434, %1443
  store double %1444, double* %h02, align 8, !tbaa !7
  %1445 = load i32, i32* %i03, align 4, !tbaa !5
  %1446 = sext i32 %1445 to i64
  %1447 = load double*, double** %4, align 8, !tbaa !1
  %1448 = getelementptr inbounds double, double* %1447, i64 %1446
  %1449 = load double, double* %1448, align 8, !tbaa !7
  %1450 = load double*, double** %3, align 8, !tbaa !1
  %1451 = getelementptr inbounds double, double* %1450, i64 0
  %1452 = load double, double* %1451, align 8, !tbaa !7
  %1453 = fmul double %1449, %1452
  %1454 = load i32, i32* %i03, align 4, !tbaa !5
  %1455 = sext i32 %1454 to i64
  %1456 = load double*, double** %5, align 8, !tbaa !1
  %1457 = getelementptr inbounds double, double* %1456, i64 %1455
  %1458 = load double, double* %1457, align 8, !tbaa !7
  %1459 = load double*, double** %3, align 8, !tbaa !1
  %1460 = getelementptr inbounds double, double* %1459, i64 1
  %1461 = load double, double* %1460, align 8, !tbaa !7
  %1462 = fmul double %1458, %1461
  %1463 = fadd double %1453, %1462
  %1464 = load i32, i32* %i03, align 4, !tbaa !5
  %1465 = sext i32 %1464 to i64
  %1466 = load double*, double** %6, align 8, !tbaa !1
  %1467 = getelementptr inbounds double, double* %1466, i64 %1465
  %1468 = load double, double* %1467, align 8, !tbaa !7
  %1469 = load double*, double** %3, align 8, !tbaa !1
  %1470 = getelementptr inbounds double, double* %1469, i64 2
  %1471 = load double, double* %1470, align 8, !tbaa !7
  %1472 = fmul double %1468, %1471
  %1473 = fadd double %1463, %1472
  %1474 = load i32, i32* %i03, align 4, !tbaa !5
  %1475 = sext i32 %1474 to i64
  %1476 = load double*, double** %7, align 8, !tbaa !1
  %1477 = getelementptr inbounds double, double* %1476, i64 %1475
  %1478 = load double, double* %1477, align 8, !tbaa !7
  %1479 = load double*, double** %3, align 8, !tbaa !1
  %1480 = getelementptr inbounds double, double* %1479, i64 3
  %1481 = load double, double* %1480, align 8, !tbaa !7
  %1482 = fmul double %1478, %1481
  %1483 = fadd double %1473, %1482
  %1484 = load i32, i32* %i03, align 4, !tbaa !5
  %1485 = sext i32 %1484 to i64
  %1486 = load double*, double** %8, align 8, !tbaa !1
  %1487 = getelementptr inbounds double, double* %1486, i64 %1485
  %1488 = load double, double* %1487, align 8, !tbaa !7
  %1489 = load double*, double** %3, align 8, !tbaa !1
  %1490 = getelementptr inbounds double, double* %1489, i64 4
  %1491 = load double, double* %1490, align 8, !tbaa !7
  %1492 = fmul double %1488, %1491
  %1493 = fadd double %1483, %1492
  %1494 = load i32, i32* %i03, align 4, !tbaa !5
  %1495 = sext i32 %1494 to i64
  %1496 = load double*, double** %9, align 8, !tbaa !1
  %1497 = getelementptr inbounds double, double* %1496, i64 %1495
  %1498 = load double, double* %1497, align 8, !tbaa !7
  %1499 = load double*, double** %3, align 8, !tbaa !1
  %1500 = getelementptr inbounds double, double* %1499, i64 5
  %1501 = load double, double* %1500, align 8, !tbaa !7
  %1502 = fmul double %1498, %1501
  %1503 = fadd double %1493, %1502
  %1504 = load i32, i32* %i03, align 4, !tbaa !5
  %1505 = sext i32 %1504 to i64
  %1506 = load double*, double** %10, align 8, !tbaa !1
  %1507 = getelementptr inbounds double, double* %1506, i64 %1505
  %1508 = load double, double* %1507, align 8, !tbaa !7
  %1509 = load double*, double** %3, align 8, !tbaa !1
  %1510 = getelementptr inbounds double, double* %1509, i64 6
  %1511 = load double, double* %1510, align 8, !tbaa !7
  %1512 = fmul double %1508, %1511
  %1513 = fadd double %1503, %1512
  %1514 = load i32, i32* %i03, align 4, !tbaa !5
  %1515 = sext i32 %1514 to i64
  %1516 = load double*, double** %11, align 8, !tbaa !1
  %1517 = getelementptr inbounds double, double* %1516, i64 %1515
  %1518 = load double, double* %1517, align 8, !tbaa !7
  %1519 = load double*, double** %3, align 8, !tbaa !1
  %1520 = getelementptr inbounds double, double* %1519, i64 7
  %1521 = load double, double* %1520, align 8, !tbaa !7
  %1522 = fmul double %1518, %1521
  %1523 = fadd double %1513, %1522
  store double %1523, double* %h03, align 8, !tbaa !7
  %1524 = load double, double* %12, align 8, !tbaa !7
  %1525 = load i32, i32* %i00, align 4, !tbaa !5
  %1526 = sext i32 %1525 to i64
  %1527 = load double*, double** %4, align 8, !tbaa !1
  %1528 = getelementptr inbounds double, double* %1527, i64 %1526
  %1529 = load double, double* %1528, align 8, !tbaa !7
  %1530 = load double, double* %h00, align 8, !tbaa !7
  %1531 = fmul double %1529, %1530
  %1532 = load i32, i32* %i01, align 4, !tbaa !5
  %1533 = sext i32 %1532 to i64
  %1534 = load double*, double** %4, align 8, !tbaa !1
  %1535 = getelementptr inbounds double, double* %1534, i64 %1533
  %1536 = load double, double* %1535, align 8, !tbaa !7
  %1537 = load double, double* %h01, align 8, !tbaa !7
  %1538 = fmul double %1536, %1537
  %1539 = fadd double %1531, %1538
  %1540 = load i32, i32* %i02, align 4, !tbaa !5
  %1541 = sext i32 %1540 to i64
  %1542 = load double*, double** %4, align 8, !tbaa !1
  %1543 = getelementptr inbounds double, double* %1542, i64 %1541
  %1544 = load double, double* %1543, align 8, !tbaa !7
  %1545 = load double, double* %h02, align 8, !tbaa !7
  %1546 = fmul double %1544, %1545
  %1547 = fadd double %1539, %1546
  %1548 = load i32, i32* %i03, align 4, !tbaa !5
  %1549 = sext i32 %1548 to i64
  %1550 = load double*, double** %4, align 8, !tbaa !1
  %1551 = getelementptr inbounds double, double* %1550, i64 %1549
  %1552 = load double, double* %1551, align 8, !tbaa !7
  %1553 = load double, double* %h03, align 8, !tbaa !7
  %1554 = fmul double %1552, %1553
  %1555 = fadd double %1547, %1554
  %1556 = fmul double %1524, %1555
  %1557 = load double*, double** %15, align 8, !tbaa !1
  %1558 = getelementptr inbounds double, double* %1557, i64 0
  store double %1556, double* %1558, align 8, !tbaa !7
  %1559 = load double, double* %12, align 8, !tbaa !7
  %1560 = load i32, i32* %i00, align 4, !tbaa !5
  %1561 = sext i32 %1560 to i64
  %1562 = load double*, double** %5, align 8, !tbaa !1
  %1563 = getelementptr inbounds double, double* %1562, i64 %1561
  %1564 = load double, double* %1563, align 8, !tbaa !7
  %1565 = load double, double* %h00, align 8, !tbaa !7
  %1566 = fmul double %1564, %1565
  %1567 = load i32, i32* %i01, align 4, !tbaa !5
  %1568 = sext i32 %1567 to i64
  %1569 = load double*, double** %5, align 8, !tbaa !1
  %1570 = getelementptr inbounds double, double* %1569, i64 %1568
  %1571 = load double, double* %1570, align 8, !tbaa !7
  %1572 = load double, double* %h01, align 8, !tbaa !7
  %1573 = fmul double %1571, %1572
  %1574 = fadd double %1566, %1573
  %1575 = load i32, i32* %i02, align 4, !tbaa !5
  %1576 = sext i32 %1575 to i64
  %1577 = load double*, double** %5, align 8, !tbaa !1
  %1578 = getelementptr inbounds double, double* %1577, i64 %1576
  %1579 = load double, double* %1578, align 8, !tbaa !7
  %1580 = load double, double* %h02, align 8, !tbaa !7
  %1581 = fmul double %1579, %1580
  %1582 = fadd double %1574, %1581
  %1583 = load i32, i32* %i03, align 4, !tbaa !5
  %1584 = sext i32 %1583 to i64
  %1585 = load double*, double** %5, align 8, !tbaa !1
  %1586 = getelementptr inbounds double, double* %1585, i64 %1584
  %1587 = load double, double* %1586, align 8, !tbaa !7
  %1588 = load double, double* %h03, align 8, !tbaa !7
  %1589 = fmul double %1587, %1588
  %1590 = fadd double %1582, %1589
  %1591 = fmul double %1559, %1590
  %1592 = load double*, double** %15, align 8, !tbaa !1
  %1593 = getelementptr inbounds double, double* %1592, i64 1
  store double %1591, double* %1593, align 8, !tbaa !7
  %1594 = load double, double* %12, align 8, !tbaa !7
  %1595 = load i32, i32* %i00, align 4, !tbaa !5
  %1596 = sext i32 %1595 to i64
  %1597 = load double*, double** %6, align 8, !tbaa !1
  %1598 = getelementptr inbounds double, double* %1597, i64 %1596
  %1599 = load double, double* %1598, align 8, !tbaa !7
  %1600 = load double, double* %h00, align 8, !tbaa !7
  %1601 = fmul double %1599, %1600
  %1602 = load i32, i32* %i01, align 4, !tbaa !5
  %1603 = sext i32 %1602 to i64
  %1604 = load double*, double** %6, align 8, !tbaa !1
  %1605 = getelementptr inbounds double, double* %1604, i64 %1603
  %1606 = load double, double* %1605, align 8, !tbaa !7
  %1607 = load double, double* %h01, align 8, !tbaa !7
  %1608 = fmul double %1606, %1607
  %1609 = fadd double %1601, %1608
  %1610 = load i32, i32* %i02, align 4, !tbaa !5
  %1611 = sext i32 %1610 to i64
  %1612 = load double*, double** %6, align 8, !tbaa !1
  %1613 = getelementptr inbounds double, double* %1612, i64 %1611
  %1614 = load double, double* %1613, align 8, !tbaa !7
  %1615 = load double, double* %h02, align 8, !tbaa !7
  %1616 = fmul double %1614, %1615
  %1617 = fadd double %1609, %1616
  %1618 = load i32, i32* %i03, align 4, !tbaa !5
  %1619 = sext i32 %1618 to i64
  %1620 = load double*, double** %6, align 8, !tbaa !1
  %1621 = getelementptr inbounds double, double* %1620, i64 %1619
  %1622 = load double, double* %1621, align 8, !tbaa !7
  %1623 = load double, double* %h03, align 8, !tbaa !7
  %1624 = fmul double %1622, %1623
  %1625 = fadd double %1617, %1624
  %1626 = fmul double %1594, %1625
  %1627 = load double*, double** %15, align 8, !tbaa !1
  %1628 = getelementptr inbounds double, double* %1627, i64 2
  store double %1626, double* %1628, align 8, !tbaa !7
  %1629 = load double, double* %12, align 8, !tbaa !7
  %1630 = load i32, i32* %i00, align 4, !tbaa !5
  %1631 = sext i32 %1630 to i64
  %1632 = load double*, double** %7, align 8, !tbaa !1
  %1633 = getelementptr inbounds double, double* %1632, i64 %1631
  %1634 = load double, double* %1633, align 8, !tbaa !7
  %1635 = load double, double* %h00, align 8, !tbaa !7
  %1636 = fmul double %1634, %1635
  %1637 = load i32, i32* %i01, align 4, !tbaa !5
  %1638 = sext i32 %1637 to i64
  %1639 = load double*, double** %7, align 8, !tbaa !1
  %1640 = getelementptr inbounds double, double* %1639, i64 %1638
  %1641 = load double, double* %1640, align 8, !tbaa !7
  %1642 = load double, double* %h01, align 8, !tbaa !7
  %1643 = fmul double %1641, %1642
  %1644 = fadd double %1636, %1643
  %1645 = load i32, i32* %i02, align 4, !tbaa !5
  %1646 = sext i32 %1645 to i64
  %1647 = load double*, double** %7, align 8, !tbaa !1
  %1648 = getelementptr inbounds double, double* %1647, i64 %1646
  %1649 = load double, double* %1648, align 8, !tbaa !7
  %1650 = load double, double* %h02, align 8, !tbaa !7
  %1651 = fmul double %1649, %1650
  %1652 = fadd double %1644, %1651
  %1653 = load i32, i32* %i03, align 4, !tbaa !5
  %1654 = sext i32 %1653 to i64
  %1655 = load double*, double** %7, align 8, !tbaa !1
  %1656 = getelementptr inbounds double, double* %1655, i64 %1654
  %1657 = load double, double* %1656, align 8, !tbaa !7
  %1658 = load double, double* %h03, align 8, !tbaa !7
  %1659 = fmul double %1657, %1658
  %1660 = fadd double %1652, %1659
  %1661 = fmul double %1629, %1660
  %1662 = load double*, double** %15, align 8, !tbaa !1
  %1663 = getelementptr inbounds double, double* %1662, i64 3
  store double %1661, double* %1663, align 8, !tbaa !7
  %1664 = load double, double* %12, align 8, !tbaa !7
  %1665 = load i32, i32* %i00, align 4, !tbaa !5
  %1666 = sext i32 %1665 to i64
  %1667 = load double*, double** %8, align 8, !tbaa !1
  %1668 = getelementptr inbounds double, double* %1667, i64 %1666
  %1669 = load double, double* %1668, align 8, !tbaa !7
  %1670 = load double, double* %h00, align 8, !tbaa !7
  %1671 = fmul double %1669, %1670
  %1672 = load i32, i32* %i01, align 4, !tbaa !5
  %1673 = sext i32 %1672 to i64
  %1674 = load double*, double** %8, align 8, !tbaa !1
  %1675 = getelementptr inbounds double, double* %1674, i64 %1673
  %1676 = load double, double* %1675, align 8, !tbaa !7
  %1677 = load double, double* %h01, align 8, !tbaa !7
  %1678 = fmul double %1676, %1677
  %1679 = fadd double %1671, %1678
  %1680 = load i32, i32* %i02, align 4, !tbaa !5
  %1681 = sext i32 %1680 to i64
  %1682 = load double*, double** %8, align 8, !tbaa !1
  %1683 = getelementptr inbounds double, double* %1682, i64 %1681
  %1684 = load double, double* %1683, align 8, !tbaa !7
  %1685 = load double, double* %h02, align 8, !tbaa !7
  %1686 = fmul double %1684, %1685
  %1687 = fadd double %1679, %1686
  %1688 = load i32, i32* %i03, align 4, !tbaa !5
  %1689 = sext i32 %1688 to i64
  %1690 = load double*, double** %8, align 8, !tbaa !1
  %1691 = getelementptr inbounds double, double* %1690, i64 %1689
  %1692 = load double, double* %1691, align 8, !tbaa !7
  %1693 = load double, double* %h03, align 8, !tbaa !7
  %1694 = fmul double %1692, %1693
  %1695 = fadd double %1687, %1694
  %1696 = fmul double %1664, %1695
  %1697 = load double*, double** %15, align 8, !tbaa !1
  %1698 = getelementptr inbounds double, double* %1697, i64 4
  store double %1696, double* %1698, align 8, !tbaa !7
  %1699 = load double, double* %12, align 8, !tbaa !7
  %1700 = load i32, i32* %i00, align 4, !tbaa !5
  %1701 = sext i32 %1700 to i64
  %1702 = load double*, double** %9, align 8, !tbaa !1
  %1703 = getelementptr inbounds double, double* %1702, i64 %1701
  %1704 = load double, double* %1703, align 8, !tbaa !7
  %1705 = load double, double* %h00, align 8, !tbaa !7
  %1706 = fmul double %1704, %1705
  %1707 = load i32, i32* %i01, align 4, !tbaa !5
  %1708 = sext i32 %1707 to i64
  %1709 = load double*, double** %9, align 8, !tbaa !1
  %1710 = getelementptr inbounds double, double* %1709, i64 %1708
  %1711 = load double, double* %1710, align 8, !tbaa !7
  %1712 = load double, double* %h01, align 8, !tbaa !7
  %1713 = fmul double %1711, %1712
  %1714 = fadd double %1706, %1713
  %1715 = load i32, i32* %i02, align 4, !tbaa !5
  %1716 = sext i32 %1715 to i64
  %1717 = load double*, double** %9, align 8, !tbaa !1
  %1718 = getelementptr inbounds double, double* %1717, i64 %1716
  %1719 = load double, double* %1718, align 8, !tbaa !7
  %1720 = load double, double* %h02, align 8, !tbaa !7
  %1721 = fmul double %1719, %1720
  %1722 = fadd double %1714, %1721
  %1723 = load i32, i32* %i03, align 4, !tbaa !5
  %1724 = sext i32 %1723 to i64
  %1725 = load double*, double** %9, align 8, !tbaa !1
  %1726 = getelementptr inbounds double, double* %1725, i64 %1724
  %1727 = load double, double* %1726, align 8, !tbaa !7
  %1728 = load double, double* %h03, align 8, !tbaa !7
  %1729 = fmul double %1727, %1728
  %1730 = fadd double %1722, %1729
  %1731 = fmul double %1699, %1730
  %1732 = load double*, double** %15, align 8, !tbaa !1
  %1733 = getelementptr inbounds double, double* %1732, i64 5
  store double %1731, double* %1733, align 8, !tbaa !7
  %1734 = load double, double* %12, align 8, !tbaa !7
  %1735 = load i32, i32* %i00, align 4, !tbaa !5
  %1736 = sext i32 %1735 to i64
  %1737 = load double*, double** %10, align 8, !tbaa !1
  %1738 = getelementptr inbounds double, double* %1737, i64 %1736
  %1739 = load double, double* %1738, align 8, !tbaa !7
  %1740 = load double, double* %h00, align 8, !tbaa !7
  %1741 = fmul double %1739, %1740
  %1742 = load i32, i32* %i01, align 4, !tbaa !5
  %1743 = sext i32 %1742 to i64
  %1744 = load double*, double** %10, align 8, !tbaa !1
  %1745 = getelementptr inbounds double, double* %1744, i64 %1743
  %1746 = load double, double* %1745, align 8, !tbaa !7
  %1747 = load double, double* %h01, align 8, !tbaa !7
  %1748 = fmul double %1746, %1747
  %1749 = fadd double %1741, %1748
  %1750 = load i32, i32* %i02, align 4, !tbaa !5
  %1751 = sext i32 %1750 to i64
  %1752 = load double*, double** %10, align 8, !tbaa !1
  %1753 = getelementptr inbounds double, double* %1752, i64 %1751
  %1754 = load double, double* %1753, align 8, !tbaa !7
  %1755 = load double, double* %h02, align 8, !tbaa !7
  %1756 = fmul double %1754, %1755
  %1757 = fadd double %1749, %1756
  %1758 = load i32, i32* %i03, align 4, !tbaa !5
  %1759 = sext i32 %1758 to i64
  %1760 = load double*, double** %10, align 8, !tbaa !1
  %1761 = getelementptr inbounds double, double* %1760, i64 %1759
  %1762 = load double, double* %1761, align 8, !tbaa !7
  %1763 = load double, double* %h03, align 8, !tbaa !7
  %1764 = fmul double %1762, %1763
  %1765 = fadd double %1757, %1764
  %1766 = fmul double %1734, %1765
  %1767 = load double*, double** %15, align 8, !tbaa !1
  %1768 = getelementptr inbounds double, double* %1767, i64 6
  store double %1766, double* %1768, align 8, !tbaa !7
  %1769 = load double, double* %12, align 8, !tbaa !7
  %1770 = load i32, i32* %i00, align 4, !tbaa !5
  %1771 = sext i32 %1770 to i64
  %1772 = load double*, double** %11, align 8, !tbaa !1
  %1773 = getelementptr inbounds double, double* %1772, i64 %1771
  %1774 = load double, double* %1773, align 8, !tbaa !7
  %1775 = load double, double* %h00, align 8, !tbaa !7
  %1776 = fmul double %1774, %1775
  %1777 = load i32, i32* %i01, align 4, !tbaa !5
  %1778 = sext i32 %1777 to i64
  %1779 = load double*, double** %11, align 8, !tbaa !1
  %1780 = getelementptr inbounds double, double* %1779, i64 %1778
  %1781 = load double, double* %1780, align 8, !tbaa !7
  %1782 = load double, double* %h01, align 8, !tbaa !7
  %1783 = fmul double %1781, %1782
  %1784 = fadd double %1776, %1783
  %1785 = load i32, i32* %i02, align 4, !tbaa !5
  %1786 = sext i32 %1785 to i64
  %1787 = load double*, double** %11, align 8, !tbaa !1
  %1788 = getelementptr inbounds double, double* %1787, i64 %1786
  %1789 = load double, double* %1788, align 8, !tbaa !7
  %1790 = load double, double* %h02, align 8, !tbaa !7
  %1791 = fmul double %1789, %1790
  %1792 = fadd double %1784, %1791
  %1793 = load i32, i32* %i03, align 4, !tbaa !5
  %1794 = sext i32 %1793 to i64
  %1795 = load double*, double** %11, align 8, !tbaa !1
  %1796 = getelementptr inbounds double, double* %1795, i64 %1794
  %1797 = load double, double* %1796, align 8, !tbaa !7
  %1798 = load double, double* %h03, align 8, !tbaa !7
  %1799 = fmul double %1797, %1798
  %1800 = fadd double %1792, %1799
  %1801 = fmul double %1769, %1800
  %1802 = load double*, double** %15, align 8, !tbaa !1
  %1803 = getelementptr inbounds double, double* %1802, i64 7
  store double %1801, double* %1803, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind
declare double @cbrt(double) #5

; Function Attrs: nounwind
declare void @free(i8*) #5

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3xddEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 6
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3yddEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 7
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3zddEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 8
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL20CalcLagrangeElementsd(double %deltatime) #0 {
  %1 = alloca double, align 8
  %numElem = alloca i32, align 4
  %k = alloca i32, align 4
  %vdov = alloca double, align 8
  %vdovthird = alloca double, align 8
  store double %deltatime, double* %1, align 8, !tbaa !7
  %2 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %3 = load i32, i32* %2, !tbaa !5
  store i32 %3, i32* %numElem, align 4, !tbaa !5
  %4 = load i32, i32* %numElem, align 4, !tbaa !5
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %55

; <label>:6                                       ; preds = %0
  %7 = load i32, i32* %numElem, align 4, !tbaa !5
  %8 = load double, double* %1, align 8, !tbaa !7
  call void @_ZL22CalcKinematicsForElemsid(i32 %7, double %8)
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %9

; <label>:9                                       ; preds = %51, %6
  %10 = load i32, i32* %k, align 4, !tbaa !5
  %11 = load i32, i32* %numElem, align 4, !tbaa !5
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %54

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %k, align 4, !tbaa !5
  %15 = call dereferenceable(8) double* @_ZN6Domain3dxxEi(%struct.Domain* @domain, i32 %14)
  %16 = load double, double* %15, !tbaa !7
  %17 = load i32, i32* %k, align 4, !tbaa !5
  %18 = call dereferenceable(8) double* @_ZN6Domain3dyyEi(%struct.Domain* @domain, i32 %17)
  %19 = load double, double* %18, !tbaa !7
  %20 = fadd double %16, %19
  %21 = load i32, i32* %k, align 4, !tbaa !5
  %22 = call dereferenceable(8) double* @_ZN6Domain3dzzEi(%struct.Domain* @domain, i32 %21)
  %23 = load double, double* %22, !tbaa !7
  %24 = fadd double %20, %23
  store double %24, double* %vdov, align 8, !tbaa !7
  %25 = load double, double* %vdov, align 8, !tbaa !7
  %26 = fdiv double %25, 3.000000e+00
  store double %26, double* %vdovthird, align 8, !tbaa !7
  %27 = load double, double* %vdov, align 8, !tbaa !7
  %28 = load i32, i32* %k, align 4, !tbaa !5
  %29 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %28)
  store double %27, double* %29, !tbaa !7
  %30 = load double, double* %vdovthird, align 8, !tbaa !7
  %31 = load i32, i32* %k, align 4, !tbaa !5
  %32 = call dereferenceable(8) double* @_ZN6Domain3dxxEi(%struct.Domain* @domain, i32 %31)
  %33 = load double, double* %32, !tbaa !7
  %34 = fsub double %33, %30
  store double %34, double* %32, !tbaa !7
  %35 = load double, double* %vdovthird, align 8, !tbaa !7
  %36 = load i32, i32* %k, align 4, !tbaa !5
  %37 = call dereferenceable(8) double* @_ZN6Domain3dyyEi(%struct.Domain* @domain, i32 %36)
  %38 = load double, double* %37, !tbaa !7
  %39 = fsub double %38, %35
  store double %39, double* %37, !tbaa !7
  %40 = load double, double* %vdovthird, align 8, !tbaa !7
  %41 = load i32, i32* %k, align 4, !tbaa !5
  %42 = call dereferenceable(8) double* @_ZN6Domain3dzzEi(%struct.Domain* @domain, i32 %41)
  %43 = load double, double* %42, !tbaa !7
  %44 = fsub double %43, %40
  store double %44, double* %42, !tbaa !7
  %45 = load i32, i32* %k, align 4, !tbaa !5
  %46 = call dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* @domain, i32 %45)
  %47 = load double, double* %46, !tbaa !7
  %48 = fcmp ole double %47, 0.000000e+00
  br i1 %48, label %49, label %50

; <label>:49                                      ; preds = %13
  call void @exit(i32 -1) #14
  unreachable

; <label>:50                                      ; preds = %13
  br label %51

; <label>:51                                      ; preds = %50
  %52 = load i32, i32* %k, align 4, !tbaa !5
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %k, align 4, !tbaa !5
  br label %9

; <label>:54                                      ; preds = %9
  br label %55

; <label>:55                                      ; preds = %54, %0
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL13CalcQForElemsv() #0 {
  %qstop = alloca double, align 8
  %numElem = alloca i32, align 4
  %idx = alloca i32, align 4
  %i = alloca i32, align 4
  %1 = call dereferenceable(8) double* @_ZN6Domain5qstopEv(%struct.Domain* @domain)
  %2 = load double, double* %1, !tbaa !7
  store double %2, double* %qstop, align 8, !tbaa !7
  %3 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %4 = load i32, i32* %3, !tbaa !5
  store i32 %4, i32* %numElem, align 4, !tbaa !5
  call void @_ZL31CalcMonotonicQGradientsForElemsv()
  call void @_ZL22CalcMonotonicQForElemsv()
  %5 = load i32, i32* %numElem, align 4, !tbaa !5
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %29

; <label>:7                                       ; preds = %0
  store i32 -1, i32* %idx, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %8

; <label>:8                                       ; preds = %21, %7
  %9 = load i32, i32* %i, align 4, !tbaa !5
  %10 = load i32, i32* %numElem, align 4, !tbaa !5
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %24

; <label>:12                                      ; preds = %8
  %13 = load i32, i32* %i, align 4, !tbaa !5
  %14 = call dereferenceable(8) double* @_ZN6Domain1qEi(%struct.Domain* @domain, i32 %13)
  %15 = load double, double* %14, !tbaa !7
  %16 = load double, double* %qstop, align 8, !tbaa !7
  %17 = fcmp ogt double %15, %16
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %12
  %19 = load i32, i32* %i, align 4, !tbaa !5
  store i32 %19, i32* %idx, align 4, !tbaa !5
  br label %24

; <label>:20                                      ; preds = %12
  br label %21

; <label>:21                                      ; preds = %20
  %22 = load i32, i32* %i, align 4, !tbaa !5
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %i, align 4, !tbaa !5
  br label %8

; <label>:24                                      ; preds = %18, %8
  %25 = load i32, i32* %idx, align 4, !tbaa !5
  %26 = icmp sge i32 %25, 0
  br i1 %26, label %27, label %28

; <label>:27                                      ; preds = %24
  call void @exit(i32 -2) #14
  unreachable

; <label>:28                                      ; preds = %24
  br label %29

; <label>:29                                      ; preds = %28, %0
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL31ApplyMaterialPropertiesForElemsv() #0 {
  %length = alloca i32, align 4
  %eosvmin = alloca double, align 8
  %eosvmax = alloca double, align 8
  %vnewc = alloca double*, align 8
  %i = alloca i32, align 4
  %zn = alloca i32, align 4
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %zn4 = alloca i32, align 4
  %vc = alloca double, align 8
  %1 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  store i32 %2, i32* %length, align 4, !tbaa !5
  %3 = load i32, i32* %length, align 4, !tbaa !5
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %127

; <label>:5                                       ; preds = %0
  %6 = call dereferenceable(8) double* @_ZN6Domain7eosvminEv(%struct.Domain* @domain)
  %7 = load double, double* %6, !tbaa !7
  store double %7, double* %eosvmin, align 8, !tbaa !7
  %8 = call dereferenceable(8) double* @_ZN6Domain7eosvmaxEv(%struct.Domain* @domain)
  %9 = load double, double* %8, !tbaa !7
  store double %9, double* %eosvmax, align 8, !tbaa !7
  %10 = load i32, i32* %length, align 4, !tbaa !5
  %11 = sext i32 %10 to i64
  %12 = call double* @_Z8AllocateIdEPT_m(i64 %11)
  store double* %12, double** %vnewc, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %13

; <label>:13                                      ; preds = %28, %5
  %14 = load i32, i32* %i, align 4, !tbaa !5
  %15 = load i32, i32* %length, align 4, !tbaa !5
  %16 = icmp slt i32 %14, %15
  br i1 %16, label %17, label %31

; <label>:17                                      ; preds = %13
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %19 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %18)
  %20 = load i32, i32* %19, !tbaa !5
  store i32 %20, i32* %zn, align 4, !tbaa !5
  %21 = load i32, i32* %zn, align 4, !tbaa !5
  %22 = call dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* @domain, i32 %21)
  %23 = load double, double* %22, !tbaa !7
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = sext i32 %24 to i64
  %26 = load double*, double** %vnewc, align 8, !tbaa !1
  %27 = getelementptr inbounds double, double* %26, i64 %25
  store double %23, double* %27, align 8, !tbaa !7
  br label %28

; <label>:28                                      ; preds = %17
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %i, align 4, !tbaa !5
  br label %13

; <label>:31                                      ; preds = %13
  %32 = load double, double* %eosvmin, align 8, !tbaa !7
  %33 = fcmp une double %32, 0.000000e+00
  br i1 %33, label %34, label %58

; <label>:34                                      ; preds = %31
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %35

; <label>:35                                      ; preds = %54, %34
  %36 = load i32, i32* %i1, align 4, !tbaa !5
  %37 = load i32, i32* %length, align 4, !tbaa !5
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %57

; <label>:39                                      ; preds = %35
  %40 = load i32, i32* %i1, align 4, !tbaa !5
  %41 = sext i32 %40 to i64
  %42 = load double*, double** %vnewc, align 8, !tbaa !1
  %43 = getelementptr inbounds double, double* %42, i64 %41
  %44 = load double, double* %43, align 8, !tbaa !7
  %45 = load double, double* %eosvmin, align 8, !tbaa !7
  %46 = fcmp olt double %44, %45
  br i1 %46, label %47, label %53

; <label>:47                                      ; preds = %39
  %48 = load double, double* %eosvmin, align 8, !tbaa !7
  %49 = load i32, i32* %i1, align 4, !tbaa !5
  %50 = sext i32 %49 to i64
  %51 = load double*, double** %vnewc, align 8, !tbaa !1
  %52 = getelementptr inbounds double, double* %51, i64 %50
  store double %48, double* %52, align 8, !tbaa !7
  br label %53

; <label>:53                                      ; preds = %47, %39
  br label %54

; <label>:54                                      ; preds = %53
  %55 = load i32, i32* %i1, align 4, !tbaa !5
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %i1, align 4, !tbaa !5
  br label %35

; <label>:57                                      ; preds = %35
  br label %58

; <label>:58                                      ; preds = %57, %31
  %59 = load double, double* %eosvmax, align 8, !tbaa !7
  %60 = fcmp une double %59, 0.000000e+00
  br i1 %60, label %61, label %85

; <label>:61                                      ; preds = %58
  store i32 0, i32* %i2, align 4, !tbaa !5
  br label %62

; <label>:62                                      ; preds = %81, %61
  %63 = load i32, i32* %i2, align 4, !tbaa !5
  %64 = load i32, i32* %length, align 4, !tbaa !5
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %84

; <label>:66                                      ; preds = %62
  %67 = load i32, i32* %i2, align 4, !tbaa !5
  %68 = sext i32 %67 to i64
  %69 = load double*, double** %vnewc, align 8, !tbaa !1
  %70 = getelementptr inbounds double, double* %69, i64 %68
  %71 = load double, double* %70, align 8, !tbaa !7
  %72 = load double, double* %eosvmax, align 8, !tbaa !7
  %73 = fcmp ogt double %71, %72
  br i1 %73, label %74, label %80

; <label>:74                                      ; preds = %66
  %75 = load double, double* %eosvmax, align 8, !tbaa !7
  %76 = load i32, i32* %i2, align 4, !tbaa !5
  %77 = sext i32 %76 to i64
  %78 = load double*, double** %vnewc, align 8, !tbaa !1
  %79 = getelementptr inbounds double, double* %78, i64 %77
  store double %75, double* %79, align 8, !tbaa !7
  br label %80

; <label>:80                                      ; preds = %74, %66
  br label %81

; <label>:81                                      ; preds = %80
  %82 = load i32, i32* %i2, align 4, !tbaa !5
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %i2, align 4, !tbaa !5
  br label %62

; <label>:84                                      ; preds = %62
  br label %85

; <label>:85                                      ; preds = %84, %58
  store i32 0, i32* %i3, align 4, !tbaa !5
  br label %86

; <label>:86                                      ; preds = %121, %85
  %87 = load i32, i32* %i3, align 4, !tbaa !5
  %88 = load i32, i32* %length, align 4, !tbaa !5
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %90, label %124

; <label>:90                                      ; preds = %86
  %91 = load i32, i32* %i3, align 4, !tbaa !5
  %92 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %91)
  %93 = load i32, i32* %92, !tbaa !5
  store i32 %93, i32* %zn4, align 4, !tbaa !5
  %94 = load i32, i32* %zn4, align 4, !tbaa !5
  %95 = call dereferenceable(8) double* @_ZN6Domain1vEi(%struct.Domain* @domain, i32 %94)
  %96 = load double, double* %95, !tbaa !7
  store double %96, double* %vc, align 8, !tbaa !7
  %97 = load double, double* %eosvmin, align 8, !tbaa !7
  %98 = fcmp une double %97, 0.000000e+00
  br i1 %98, label %99, label %106

; <label>:99                                      ; preds = %90
  %100 = load double, double* %vc, align 8, !tbaa !7
  %101 = load double, double* %eosvmin, align 8, !tbaa !7
  %102 = fcmp olt double %100, %101
  br i1 %102, label %103, label %105

; <label>:103                                     ; preds = %99
  %104 = load double, double* %eosvmin, align 8, !tbaa !7
  store double %104, double* %vc, align 8, !tbaa !7
  br label %105

; <label>:105                                     ; preds = %103, %99
  br label %106

; <label>:106                                     ; preds = %105, %90
  %107 = load double, double* %eosvmax, align 8, !tbaa !7
  %108 = fcmp une double %107, 0.000000e+00
  br i1 %108, label %109, label %116

; <label>:109                                     ; preds = %106
  %110 = load double, double* %vc, align 8, !tbaa !7
  %111 = load double, double* %eosvmax, align 8, !tbaa !7
  %112 = fcmp ogt double %110, %111
  br i1 %112, label %113, label %115

; <label>:113                                     ; preds = %109
  %114 = load double, double* %eosvmax, align 8, !tbaa !7
  store double %114, double* %vc, align 8, !tbaa !7
  br label %115

; <label>:115                                     ; preds = %113, %109
  br label %116

; <label>:116                                     ; preds = %115, %106
  %117 = load double, double* %vc, align 8, !tbaa !7
  %118 = fcmp ole double %117, 0.000000e+00
  br i1 %118, label %119, label %120

; <label>:119                                     ; preds = %116
  call void @exit(i32 -1) #14
  unreachable

; <label>:120                                     ; preds = %116
  br label %121

; <label>:121                                     ; preds = %120
  %122 = load i32, i32* %i3, align 4, !tbaa !5
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %i3, align 4, !tbaa !5
  br label %86

; <label>:124                                     ; preds = %86
  %125 = load double*, double** %vnewc, align 8, !tbaa !1
  %126 = load i32, i32* %length, align 4, !tbaa !5
  call void @_ZL15EvalEOSForElemsPdi(double* %125, i32 %126)
  call void @_Z7ReleaseIdEvPPT_(double** %vnewc)
  br label %127

; <label>:127                                     ; preds = %124, %0
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL21UpdateVolumesForElemsv() #0 {
  %numElem = alloca i32, align 4
  %v_cut = alloca double, align 8
  %i = alloca i32, align 4
  %tmpV = alloca double, align 8
  %1 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  store i32 %2, i32* %numElem, align 4, !tbaa !5
  %3 = load i32, i32* %numElem, align 4, !tbaa !5
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %30

; <label>:5                                       ; preds = %0
  %6 = call dereferenceable(8) double* @_ZN6Domain5v_cutEv(%struct.Domain* @domain)
  %7 = load double, double* %6, !tbaa !7
  store double %7, double* %v_cut, align 8, !tbaa !7
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %8

; <label>:8                                       ; preds = %26, %5
  %9 = load i32, i32* %i, align 4, !tbaa !5
  %10 = load i32, i32* %numElem, align 4, !tbaa !5
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %29

; <label>:12                                      ; preds = %8
  %13 = load i32, i32* %i, align 4, !tbaa !5
  %14 = call dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* @domain, i32 %13)
  %15 = load double, double* %14, !tbaa !7
  store double %15, double* %tmpV, align 8, !tbaa !7
  %16 = load double, double* %tmpV, align 8, !tbaa !7
  %17 = fsub double %16, 1.000000e+00
  %18 = call double @_Z4FABSd(double %17)
  %19 = load double, double* %v_cut, align 8, !tbaa !7
  %20 = fcmp olt double %18, %19
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %12
  store double 1.000000e+00, double* %tmpV, align 8, !tbaa !7
  br label %22

; <label>:22                                      ; preds = %21, %12
  %23 = load double, double* %tmpV, align 8, !tbaa !7
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = call dereferenceable(8) double* @_ZN6Domain1vEi(%struct.Domain* @domain, i32 %24)
  store double %23, double* %25, !tbaa !7
  br label %26

; <label>:26                                      ; preds = %22
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %i, align 4, !tbaa !5
  br label %8

; <label>:29                                      ; preds = %8
  br label %30

; <label>:30                                      ; preds = %29, %0
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL22CalcKinematicsForElemsid(i32 %numElem, double %dt) #0 {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  %k = alloca i32, align 4
  %B = alloca [3 x [8 x double]], align 16
  %D = alloca [6 x double], align 16
  %x_local = alloca [8 x double], align 16
  %y_local = alloca [8 x double], align 16
  %z_local = alloca [8 x double], align 16
  %xd_local = alloca [8 x double], align 16
  %yd_local = alloca [8 x double], align 16
  %zd_local = alloca [8 x double], align 16
  %detJ = alloca double, align 8
  %volume = alloca double, align 8
  %relativeVolume = alloca double, align 8
  %elemToNode = alloca i32*, align 8
  %lnode = alloca i32, align 4
  %gnode = alloca i32, align 4
  %lnode1 = alloca i32, align 4
  %gnode2 = alloca i32, align 4
  %dt2 = alloca double, align 8
  %j = alloca i32, align 4
  store i32 %numElem, i32* %1, align 4, !tbaa !5
  store double %dt, double* %2, align 8, !tbaa !7
  store i32 0, i32* %k, align 4, !tbaa !5
  br label %3

; <label>:3                                       ; preds = %179, %0
  %4 = load i32, i32* %k, align 4, !tbaa !5
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %4, %5
  br i1 %6, label %7, label %182

; <label>:7                                       ; preds = %3
  %8 = bitcast [3 x [8 x double]]* %B to i8*
  call void @llvm.lifetime.start(i64 192, i8* %8) #1
  %9 = bitcast [6 x double]* %D to i8*
  call void @llvm.lifetime.start(i64 48, i8* %9) #1
  %10 = bitcast [8 x double]* %x_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %10) #1
  %11 = bitcast [8 x double]* %y_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %11) #1
  %12 = bitcast [8 x double]* %z_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %12) #1
  %13 = bitcast [8 x double]* %xd_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %13) #1
  %14 = bitcast [8 x double]* %yd_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %14) #1
  %15 = bitcast [8 x double]* %zd_local to i8*
  call void @llvm.lifetime.start(i64 64, i8* %15) #1
  store double 0.000000e+00, double* %detJ, align 8, !tbaa !7
  %16 = load i32, i32* %k, align 4, !tbaa !5
  %17 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %16)
  store i32* %17, i32** %elemToNode, align 8, !tbaa !1
  store i32 0, i32* %lnode, align 4, !tbaa !5
  br label %18

; <label>:18                                      ; preds = %45, %7
  %19 = load i32, i32* %lnode, align 4, !tbaa !5
  %20 = icmp slt i32 %19, 8
  br i1 %20, label %21, label %48

; <label>:21                                      ; preds = %18
  %22 = load i32, i32* %lnode, align 4, !tbaa !5
  %23 = sext i32 %22 to i64
  %24 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %25 = getelementptr inbounds i32, i32* %24, i64 %23
  %26 = load i32, i32* %25, align 4, !tbaa !5
  store i32 %26, i32* %gnode, align 4, !tbaa !5
  %27 = load i32, i32* %gnode, align 4, !tbaa !5
  %28 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %27)
  %29 = load double, double* %28, !tbaa !7
  %30 = load i32, i32* %lnode, align 4, !tbaa !5
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i64 %31
  store double %29, double* %32, align 8, !tbaa !7
  %33 = load i32, i32* %gnode, align 4, !tbaa !5
  %34 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %33)
  %35 = load double, double* %34, !tbaa !7
  %36 = load i32, i32* %lnode, align 4, !tbaa !5
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i64 %37
  store double %35, double* %38, align 8, !tbaa !7
  %39 = load i32, i32* %gnode, align 4, !tbaa !5
  %40 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %39)
  %41 = load double, double* %40, !tbaa !7
  %42 = load i32, i32* %lnode, align 4, !tbaa !5
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i64 %43
  store double %41, double* %44, align 8, !tbaa !7
  br label %45

; <label>:45                                      ; preds = %21
  %46 = load i32, i32* %lnode, align 4, !tbaa !5
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %lnode, align 4, !tbaa !5
  br label %18

; <label>:48                                      ; preds = %18
  %49 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i32 0
  %50 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i32 0
  %51 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i32 0
  %52 = call double @_ZL14CalcElemVolumePKdS0_S0_(double* %49, double* %50, double* %51)
  store double %52, double* %volume, align 8, !tbaa !7
  %53 = load double, double* %volume, align 8, !tbaa !7
  %54 = load i32, i32* %k, align 4, !tbaa !5
  %55 = call dereferenceable(8) double* @_ZN6Domain4voloEi(%struct.Domain* @domain, i32 %54)
  %56 = load double, double* %55, !tbaa !7
  %57 = fdiv double %53, %56
  store double %57, double* %relativeVolume, align 8, !tbaa !7
  %58 = load double, double* %relativeVolume, align 8, !tbaa !7
  %59 = load i32, i32* %k, align 4, !tbaa !5
  %60 = call dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* @domain, i32 %59)
  store double %58, double* %60, !tbaa !7
  %61 = load double, double* %relativeVolume, align 8, !tbaa !7
  %62 = load i32, i32* %k, align 4, !tbaa !5
  %63 = call dereferenceable(8) double* @_ZN6Domain1vEi(%struct.Domain* @domain, i32 %62)
  %64 = load double, double* %63, !tbaa !7
  %65 = fsub double %61, %64
  %66 = load i32, i32* %k, align 4, !tbaa !5
  %67 = call dereferenceable(8) double* @_ZN6Domain4delvEi(%struct.Domain* @domain, i32 %66)
  store double %65, double* %67, !tbaa !7
  %68 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i32 0
  %69 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i32 0
  %70 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i32 0
  %71 = load double, double* %volume, align 8, !tbaa !7
  %72 = call double @_ZL28CalcElemCharacteristicLengthPKdS0_S0_d(double* %68, double* %69, double* %70, double %71)
  %73 = load i32, i32* %k, align 4, !tbaa !5
  %74 = call dereferenceable(8) double* @_ZN6Domain6arealgEi(%struct.Domain* @domain, i32 %73)
  store double %72, double* %74, !tbaa !7
  store i32 0, i32* %lnode1, align 4, !tbaa !5
  br label %75

; <label>:75                                      ; preds = %102, %48
  %76 = load i32, i32* %lnode1, align 4, !tbaa !5
  %77 = icmp slt i32 %76, 8
  br i1 %77, label %78, label %105

; <label>:78                                      ; preds = %75
  %79 = load i32, i32* %lnode1, align 4, !tbaa !5
  %80 = sext i32 %79 to i64
  %81 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %82 = getelementptr inbounds i32, i32* %81, i64 %80
  %83 = load i32, i32* %82, align 4, !tbaa !5
  store i32 %83, i32* %gnode2, align 4, !tbaa !5
  %84 = load i32, i32* %gnode2, align 4, !tbaa !5
  %85 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %84)
  %86 = load double, double* %85, !tbaa !7
  %87 = load i32, i32* %lnode1, align 4, !tbaa !5
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i32 0, i64 %88
  store double %86, double* %89, align 8, !tbaa !7
  %90 = load i32, i32* %gnode2, align 4, !tbaa !5
  %91 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %90)
  %92 = load double, double* %91, !tbaa !7
  %93 = load i32, i32* %lnode1, align 4, !tbaa !5
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i32 0, i64 %94
  store double %92, double* %95, align 8, !tbaa !7
  %96 = load i32, i32* %gnode2, align 4, !tbaa !5
  %97 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %96)
  %98 = load double, double* %97, !tbaa !7
  %99 = load i32, i32* %lnode1, align 4, !tbaa !5
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i32 0, i64 %100
  store double %98, double* %101, align 8, !tbaa !7
  br label %102

; <label>:102                                     ; preds = %78
  %103 = load i32, i32* %lnode1, align 4, !tbaa !5
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %lnode1, align 4, !tbaa !5
  br label %75

; <label>:105                                     ; preds = %75
  %106 = load double, double* %2, align 8, !tbaa !7
  %107 = fmul double 5.000000e-01, %106
  store double %107, double* %dt2, align 8, !tbaa !7
  store i32 0, i32* %j, align 4, !tbaa !5
  br label %108

; <label>:108                                     ; preds = %145, %105
  %109 = load i32, i32* %j, align 4, !tbaa !5
  %110 = icmp slt i32 %109, 8
  br i1 %110, label %111, label %148

; <label>:111                                     ; preds = %108
  %112 = load double, double* %dt2, align 8, !tbaa !7
  %113 = load i32, i32* %j, align 4, !tbaa !5
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i32 0, i64 %114
  %116 = load double, double* %115, align 8, !tbaa !7
  %117 = fmul double %112, %116
  %118 = load i32, i32* %j, align 4, !tbaa !5
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i64 %119
  %121 = load double, double* %120, align 8, !tbaa !7
  %122 = fsub double %121, %117
  store double %122, double* %120, align 8, !tbaa !7
  %123 = load double, double* %dt2, align 8, !tbaa !7
  %124 = load i32, i32* %j, align 4, !tbaa !5
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i32 0, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !7
  %128 = fmul double %123, %127
  %129 = load i32, i32* %j, align 4, !tbaa !5
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !7
  %133 = fsub double %132, %128
  store double %133, double* %131, align 8, !tbaa !7
  %134 = load double, double* %dt2, align 8, !tbaa !7
  %135 = load i32, i32* %j, align 4, !tbaa !5
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i32 0, i64 %136
  %138 = load double, double* %137, align 8, !tbaa !7
  %139 = fmul double %134, %138
  %140 = load i32, i32* %j, align 4, !tbaa !5
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i64 %141
  %143 = load double, double* %142, align 8, !tbaa !7
  %144 = fsub double %143, %139
  store double %144, double* %142, align 8, !tbaa !7
  br label %145

; <label>:145                                     ; preds = %111
  %146 = load i32, i32* %j, align 4, !tbaa !5
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %j, align 4, !tbaa !5
  br label %108

; <label>:148                                     ; preds = %108
  %149 = getelementptr inbounds [8 x double], [8 x double]* %x_local, i32 0, i32 0
  %150 = getelementptr inbounds [8 x double], [8 x double]* %y_local, i32 0, i32 0
  %151 = getelementptr inbounds [8 x double], [8 x double]* %z_local, i32 0, i32 0
  %152 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i32 0
  call void @_ZL32CalcElemShapeFunctionDerivativesPKdS0_S0_PA8_dPd(double* %149, double* %150, double* %151, [8 x double]* %152, double* %detJ)
  %153 = getelementptr inbounds [8 x double], [8 x double]* %xd_local, i32 0, i32 0
  %154 = getelementptr inbounds [8 x double], [8 x double]* %yd_local, i32 0, i32 0
  %155 = getelementptr inbounds [8 x double], [8 x double]* %zd_local, i32 0, i32 0
  %156 = getelementptr inbounds [3 x [8 x double]], [3 x [8 x double]]* %B, i32 0, i32 0
  %157 = load double, double* %detJ, align 8, !tbaa !7
  %158 = getelementptr inbounds [6 x double], [6 x double]* %D, i32 0, i32 0
  call void @_ZL25CalcElemVelocityGrandientPKdS0_S0_PA8_S_dPd(double* %153, double* %154, double* %155, [8 x double]* %156, double %157, double* %158)
  %159 = getelementptr inbounds [6 x double], [6 x double]* %D, i32 0, i64 0
  %160 = load double, double* %159, align 8, !tbaa !7
  %161 = load i32, i32* %k, align 4, !tbaa !5
  %162 = call dereferenceable(8) double* @_ZN6Domain3dxxEi(%struct.Domain* @domain, i32 %161)
  store double %160, double* %162, !tbaa !7
  %163 = getelementptr inbounds [6 x double], [6 x double]* %D, i32 0, i64 1
  %164 = load double, double* %163, align 8, !tbaa !7
  %165 = load i32, i32* %k, align 4, !tbaa !5
  %166 = call dereferenceable(8) double* @_ZN6Domain3dyyEi(%struct.Domain* @domain, i32 %165)
  store double %164, double* %166, !tbaa !7
  %167 = getelementptr inbounds [6 x double], [6 x double]* %D, i32 0, i64 2
  %168 = load double, double* %167, align 8, !tbaa !7
  %169 = load i32, i32* %k, align 4, !tbaa !5
  %170 = call dereferenceable(8) double* @_ZN6Domain3dzzEi(%struct.Domain* @domain, i32 %169)
  store double %168, double* %170, !tbaa !7
  %171 = bitcast [8 x double]* %zd_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %171) #1
  %172 = bitcast [8 x double]* %yd_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %172) #1
  %173 = bitcast [8 x double]* %xd_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %173) #1
  %174 = bitcast [8 x double]* %z_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %174) #1
  %175 = bitcast [8 x double]* %y_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %175) #1
  %176 = bitcast [8 x double]* %x_local to i8*
  call void @llvm.lifetime.end(i64 64, i8* %176) #1
  %177 = bitcast [6 x double]* %D to i8*
  call void @llvm.lifetime.end(i64 48, i8* %177) #1
  %178 = bitcast [3 x [8 x double]]* %B to i8*
  call void @llvm.lifetime.end(i64 192, i8* %178) #1
  br label %179

; <label>:179                                     ; preds = %148
  %180 = load i32, i32* %k, align 4, !tbaa !5
  %181 = add nsw i32 %180, 1
  store i32 %181, i32* %k, align 4, !tbaa !5
  br label %3

; <label>:182                                     ; preds = %3
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3dxxEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 28
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3dyyEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 29
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain3dzzEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 30
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 46
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 44
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain4delvEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 45
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define internal double @_ZL28CalcElemCharacteristicLengthPKdS0_S0_d(double* %x, double* %y, double* %z, double %volume) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double, align 8
  %a = alloca double, align 8
  %charLength = alloca double, align 8
  store double* %x, double** %1, align 8, !tbaa !1
  store double* %y, double** %2, align 8, !tbaa !1
  store double* %z, double** %3, align 8, !tbaa !1
  store double %volume, double* %4, align 8, !tbaa !7
  store double 0.000000e+00, double* %charLength, align 8, !tbaa !7
  %5 = load double*, double** %1, align 8, !tbaa !1
  %6 = getelementptr inbounds double, double* %5, i64 0
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = load double*, double** %1, align 8, !tbaa !1
  %9 = getelementptr inbounds double, double* %8, i64 1
  %10 = load double, double* %9, align 8, !tbaa !7
  %11 = load double*, double** %1, align 8, !tbaa !1
  %12 = getelementptr inbounds double, double* %11, i64 2
  %13 = load double, double* %12, align 8, !tbaa !7
  %14 = load double*, double** %1, align 8, !tbaa !1
  %15 = getelementptr inbounds double, double* %14, i64 3
  %16 = load double, double* %15, align 8, !tbaa !7
  %17 = load double*, double** %2, align 8, !tbaa !1
  %18 = getelementptr inbounds double, double* %17, i64 0
  %19 = load double, double* %18, align 8, !tbaa !7
  %20 = load double*, double** %2, align 8, !tbaa !1
  %21 = getelementptr inbounds double, double* %20, i64 1
  %22 = load double, double* %21, align 8, !tbaa !7
  %23 = load double*, double** %2, align 8, !tbaa !1
  %24 = getelementptr inbounds double, double* %23, i64 2
  %25 = load double, double* %24, align 8, !tbaa !7
  %26 = load double*, double** %2, align 8, !tbaa !1
  %27 = getelementptr inbounds double, double* %26, i64 3
  %28 = load double, double* %27, align 8, !tbaa !7
  %29 = load double*, double** %3, align 8, !tbaa !1
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8, !tbaa !7
  %32 = load double*, double** %3, align 8, !tbaa !1
  %33 = getelementptr inbounds double, double* %32, i64 1
  %34 = load double, double* %33, align 8, !tbaa !7
  %35 = load double*, double** %3, align 8, !tbaa !1
  %36 = getelementptr inbounds double, double* %35, i64 2
  %37 = load double, double* %36, align 8, !tbaa !7
  %38 = load double*, double** %3, align 8, !tbaa !1
  %39 = getelementptr inbounds double, double* %38, i64 3
  %40 = load double, double* %39, align 8, !tbaa !7
  %41 = call double @_ZL8AreaFacedddddddddddd(double %7, double %10, double %13, double %16, double %19, double %22, double %25, double %28, double %31, double %34, double %37, double %40)
  store double %41, double* %a, align 8, !tbaa !7
  %42 = call dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %a, double* dereferenceable(8) %charLength)
  %43 = load double, double* %42, !tbaa !7
  store double %43, double* %charLength, align 8, !tbaa !7
  %44 = load double*, double** %1, align 8, !tbaa !1
  %45 = getelementptr inbounds double, double* %44, i64 4
  %46 = load double, double* %45, align 8, !tbaa !7
  %47 = load double*, double** %1, align 8, !tbaa !1
  %48 = getelementptr inbounds double, double* %47, i64 5
  %49 = load double, double* %48, align 8, !tbaa !7
  %50 = load double*, double** %1, align 8, !tbaa !1
  %51 = getelementptr inbounds double, double* %50, i64 6
  %52 = load double, double* %51, align 8, !tbaa !7
  %53 = load double*, double** %1, align 8, !tbaa !1
  %54 = getelementptr inbounds double, double* %53, i64 7
  %55 = load double, double* %54, align 8, !tbaa !7
  %56 = load double*, double** %2, align 8, !tbaa !1
  %57 = getelementptr inbounds double, double* %56, i64 4
  %58 = load double, double* %57, align 8, !tbaa !7
  %59 = load double*, double** %2, align 8, !tbaa !1
  %60 = getelementptr inbounds double, double* %59, i64 5
  %61 = load double, double* %60, align 8, !tbaa !7
  %62 = load double*, double** %2, align 8, !tbaa !1
  %63 = getelementptr inbounds double, double* %62, i64 6
  %64 = load double, double* %63, align 8, !tbaa !7
  %65 = load double*, double** %2, align 8, !tbaa !1
  %66 = getelementptr inbounds double, double* %65, i64 7
  %67 = load double, double* %66, align 8, !tbaa !7
  %68 = load double*, double** %3, align 8, !tbaa !1
  %69 = getelementptr inbounds double, double* %68, i64 4
  %70 = load double, double* %69, align 8, !tbaa !7
  %71 = load double*, double** %3, align 8, !tbaa !1
  %72 = getelementptr inbounds double, double* %71, i64 5
  %73 = load double, double* %72, align 8, !tbaa !7
  %74 = load double*, double** %3, align 8, !tbaa !1
  %75 = getelementptr inbounds double, double* %74, i64 6
  %76 = load double, double* %75, align 8, !tbaa !7
  %77 = load double*, double** %3, align 8, !tbaa !1
  %78 = getelementptr inbounds double, double* %77, i64 7
  %79 = load double, double* %78, align 8, !tbaa !7
  %80 = call double @_ZL8AreaFacedddddddddddd(double %46, double %49, double %52, double %55, double %58, double %61, double %64, double %67, double %70, double %73, double %76, double %79)
  store double %80, double* %a, align 8, !tbaa !7
  %81 = call dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %a, double* dereferenceable(8) %charLength)
  %82 = load double, double* %81, !tbaa !7
  store double %82, double* %charLength, align 8, !tbaa !7
  %83 = load double*, double** %1, align 8, !tbaa !1
  %84 = getelementptr inbounds double, double* %83, i64 0
  %85 = load double, double* %84, align 8, !tbaa !7
  %86 = load double*, double** %1, align 8, !tbaa !1
  %87 = getelementptr inbounds double, double* %86, i64 1
  %88 = load double, double* %87, align 8, !tbaa !7
  %89 = load double*, double** %1, align 8, !tbaa !1
  %90 = getelementptr inbounds double, double* %89, i64 5
  %91 = load double, double* %90, align 8, !tbaa !7
  %92 = load double*, double** %1, align 8, !tbaa !1
  %93 = getelementptr inbounds double, double* %92, i64 4
  %94 = load double, double* %93, align 8, !tbaa !7
  %95 = load double*, double** %2, align 8, !tbaa !1
  %96 = getelementptr inbounds double, double* %95, i64 0
  %97 = load double, double* %96, align 8, !tbaa !7
  %98 = load double*, double** %2, align 8, !tbaa !1
  %99 = getelementptr inbounds double, double* %98, i64 1
  %100 = load double, double* %99, align 8, !tbaa !7
  %101 = load double*, double** %2, align 8, !tbaa !1
  %102 = getelementptr inbounds double, double* %101, i64 5
  %103 = load double, double* %102, align 8, !tbaa !7
  %104 = load double*, double** %2, align 8, !tbaa !1
  %105 = getelementptr inbounds double, double* %104, i64 4
  %106 = load double, double* %105, align 8, !tbaa !7
  %107 = load double*, double** %3, align 8, !tbaa !1
  %108 = getelementptr inbounds double, double* %107, i64 0
  %109 = load double, double* %108, align 8, !tbaa !7
  %110 = load double*, double** %3, align 8, !tbaa !1
  %111 = getelementptr inbounds double, double* %110, i64 1
  %112 = load double, double* %111, align 8, !tbaa !7
  %113 = load double*, double** %3, align 8, !tbaa !1
  %114 = getelementptr inbounds double, double* %113, i64 5
  %115 = load double, double* %114, align 8, !tbaa !7
  %116 = load double*, double** %3, align 8, !tbaa !1
  %117 = getelementptr inbounds double, double* %116, i64 4
  %118 = load double, double* %117, align 8, !tbaa !7
  %119 = call double @_ZL8AreaFacedddddddddddd(double %85, double %88, double %91, double %94, double %97, double %100, double %103, double %106, double %109, double %112, double %115, double %118)
  store double %119, double* %a, align 8, !tbaa !7
  %120 = call dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %a, double* dereferenceable(8) %charLength)
  %121 = load double, double* %120, !tbaa !7
  store double %121, double* %charLength, align 8, !tbaa !7
  %122 = load double*, double** %1, align 8, !tbaa !1
  %123 = getelementptr inbounds double, double* %122, i64 1
  %124 = load double, double* %123, align 8, !tbaa !7
  %125 = load double*, double** %1, align 8, !tbaa !1
  %126 = getelementptr inbounds double, double* %125, i64 2
  %127 = load double, double* %126, align 8, !tbaa !7
  %128 = load double*, double** %1, align 8, !tbaa !1
  %129 = getelementptr inbounds double, double* %128, i64 6
  %130 = load double, double* %129, align 8, !tbaa !7
  %131 = load double*, double** %1, align 8, !tbaa !1
  %132 = getelementptr inbounds double, double* %131, i64 5
  %133 = load double, double* %132, align 8, !tbaa !7
  %134 = load double*, double** %2, align 8, !tbaa !1
  %135 = getelementptr inbounds double, double* %134, i64 1
  %136 = load double, double* %135, align 8, !tbaa !7
  %137 = load double*, double** %2, align 8, !tbaa !1
  %138 = getelementptr inbounds double, double* %137, i64 2
  %139 = load double, double* %138, align 8, !tbaa !7
  %140 = load double*, double** %2, align 8, !tbaa !1
  %141 = getelementptr inbounds double, double* %140, i64 6
  %142 = load double, double* %141, align 8, !tbaa !7
  %143 = load double*, double** %2, align 8, !tbaa !1
  %144 = getelementptr inbounds double, double* %143, i64 5
  %145 = load double, double* %144, align 8, !tbaa !7
  %146 = load double*, double** %3, align 8, !tbaa !1
  %147 = getelementptr inbounds double, double* %146, i64 1
  %148 = load double, double* %147, align 8, !tbaa !7
  %149 = load double*, double** %3, align 8, !tbaa !1
  %150 = getelementptr inbounds double, double* %149, i64 2
  %151 = load double, double* %150, align 8, !tbaa !7
  %152 = load double*, double** %3, align 8, !tbaa !1
  %153 = getelementptr inbounds double, double* %152, i64 6
  %154 = load double, double* %153, align 8, !tbaa !7
  %155 = load double*, double** %3, align 8, !tbaa !1
  %156 = getelementptr inbounds double, double* %155, i64 5
  %157 = load double, double* %156, align 8, !tbaa !7
  %158 = call double @_ZL8AreaFacedddddddddddd(double %124, double %127, double %130, double %133, double %136, double %139, double %142, double %145, double %148, double %151, double %154, double %157)
  store double %158, double* %a, align 8, !tbaa !7
  %159 = call dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %a, double* dereferenceable(8) %charLength)
  %160 = load double, double* %159, !tbaa !7
  store double %160, double* %charLength, align 8, !tbaa !7
  %161 = load double*, double** %1, align 8, !tbaa !1
  %162 = getelementptr inbounds double, double* %161, i64 2
  %163 = load double, double* %162, align 8, !tbaa !7
  %164 = load double*, double** %1, align 8, !tbaa !1
  %165 = getelementptr inbounds double, double* %164, i64 3
  %166 = load double, double* %165, align 8, !tbaa !7
  %167 = load double*, double** %1, align 8, !tbaa !1
  %168 = getelementptr inbounds double, double* %167, i64 7
  %169 = load double, double* %168, align 8, !tbaa !7
  %170 = load double*, double** %1, align 8, !tbaa !1
  %171 = getelementptr inbounds double, double* %170, i64 6
  %172 = load double, double* %171, align 8, !tbaa !7
  %173 = load double*, double** %2, align 8, !tbaa !1
  %174 = getelementptr inbounds double, double* %173, i64 2
  %175 = load double, double* %174, align 8, !tbaa !7
  %176 = load double*, double** %2, align 8, !tbaa !1
  %177 = getelementptr inbounds double, double* %176, i64 3
  %178 = load double, double* %177, align 8, !tbaa !7
  %179 = load double*, double** %2, align 8, !tbaa !1
  %180 = getelementptr inbounds double, double* %179, i64 7
  %181 = load double, double* %180, align 8, !tbaa !7
  %182 = load double*, double** %2, align 8, !tbaa !1
  %183 = getelementptr inbounds double, double* %182, i64 6
  %184 = load double, double* %183, align 8, !tbaa !7
  %185 = load double*, double** %3, align 8, !tbaa !1
  %186 = getelementptr inbounds double, double* %185, i64 2
  %187 = load double, double* %186, align 8, !tbaa !7
  %188 = load double*, double** %3, align 8, !tbaa !1
  %189 = getelementptr inbounds double, double* %188, i64 3
  %190 = load double, double* %189, align 8, !tbaa !7
  %191 = load double*, double** %3, align 8, !tbaa !1
  %192 = getelementptr inbounds double, double* %191, i64 7
  %193 = load double, double* %192, align 8, !tbaa !7
  %194 = load double*, double** %3, align 8, !tbaa !1
  %195 = getelementptr inbounds double, double* %194, i64 6
  %196 = load double, double* %195, align 8, !tbaa !7
  %197 = call double @_ZL8AreaFacedddddddddddd(double %163, double %166, double %169, double %172, double %175, double %178, double %181, double %184, double %187, double %190, double %193, double %196)
  store double %197, double* %a, align 8, !tbaa !7
  %198 = call dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %a, double* dereferenceable(8) %charLength)
  %199 = load double, double* %198, !tbaa !7
  store double %199, double* %charLength, align 8, !tbaa !7
  %200 = load double*, double** %1, align 8, !tbaa !1
  %201 = getelementptr inbounds double, double* %200, i64 3
  %202 = load double, double* %201, align 8, !tbaa !7
  %203 = load double*, double** %1, align 8, !tbaa !1
  %204 = getelementptr inbounds double, double* %203, i64 0
  %205 = load double, double* %204, align 8, !tbaa !7
  %206 = load double*, double** %1, align 8, !tbaa !1
  %207 = getelementptr inbounds double, double* %206, i64 4
  %208 = load double, double* %207, align 8, !tbaa !7
  %209 = load double*, double** %1, align 8, !tbaa !1
  %210 = getelementptr inbounds double, double* %209, i64 7
  %211 = load double, double* %210, align 8, !tbaa !7
  %212 = load double*, double** %2, align 8, !tbaa !1
  %213 = getelementptr inbounds double, double* %212, i64 3
  %214 = load double, double* %213, align 8, !tbaa !7
  %215 = load double*, double** %2, align 8, !tbaa !1
  %216 = getelementptr inbounds double, double* %215, i64 0
  %217 = load double, double* %216, align 8, !tbaa !7
  %218 = load double*, double** %2, align 8, !tbaa !1
  %219 = getelementptr inbounds double, double* %218, i64 4
  %220 = load double, double* %219, align 8, !tbaa !7
  %221 = load double*, double** %2, align 8, !tbaa !1
  %222 = getelementptr inbounds double, double* %221, i64 7
  %223 = load double, double* %222, align 8, !tbaa !7
  %224 = load double*, double** %3, align 8, !tbaa !1
  %225 = getelementptr inbounds double, double* %224, i64 3
  %226 = load double, double* %225, align 8, !tbaa !7
  %227 = load double*, double** %3, align 8, !tbaa !1
  %228 = getelementptr inbounds double, double* %227, i64 0
  %229 = load double, double* %228, align 8, !tbaa !7
  %230 = load double*, double** %3, align 8, !tbaa !1
  %231 = getelementptr inbounds double, double* %230, i64 4
  %232 = load double, double* %231, align 8, !tbaa !7
  %233 = load double*, double** %3, align 8, !tbaa !1
  %234 = getelementptr inbounds double, double* %233, i64 7
  %235 = load double, double* %234, align 8, !tbaa !7
  %236 = call double @_ZL8AreaFacedddddddddddd(double %202, double %205, double %208, double %211, double %214, double %217, double %220, double %223, double %226, double %229, double %232, double %235)
  store double %236, double* %a, align 8, !tbaa !7
  %237 = call dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %a, double* dereferenceable(8) %charLength)
  %238 = load double, double* %237, !tbaa !7
  store double %238, double* %charLength, align 8, !tbaa !7
  %239 = load double, double* %4, align 8, !tbaa !7
  %240 = fmul double 4.000000e+00, %239
  %241 = load double, double* %charLength, align 8, !tbaa !7
  %242 = call double @_Z4SQRTd(double %241)
  %243 = fdiv double %240, %242
  store double %243, double* %charLength, align 8, !tbaa !7
  %244 = load double, double* %charLength, align 8, !tbaa !7
  ret double %244
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain6arealgEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 47
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL25CalcElemVelocityGrandientPKdS0_S0_PA8_S_dPd(double* %xvel, double* %yvel, double* %zvel, [8 x double]* %b, double %detJ, double* %d) #6 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca [8 x double]*, align 8
  %5 = alloca double, align 8
  %6 = alloca double*, align 8
  %inv_detJ = alloca double, align 8
  %dyddx = alloca double, align 8
  %dxddy = alloca double, align 8
  %dzddx = alloca double, align 8
  %dxddz = alloca double, align 8
  %dzddy = alloca double, align 8
  %dyddz = alloca double, align 8
  %pfx = alloca double*, align 8
  %pfy = alloca double*, align 8
  %pfz = alloca double*, align 8
  store double* %xvel, double** %1, align 8, !tbaa !1
  store double* %yvel, double** %2, align 8, !tbaa !1
  store double* %zvel, double** %3, align 8, !tbaa !1
  store [8 x double]* %b, [8 x double]** %4, align 8, !tbaa !1
  store double %detJ, double* %5, align 8, !tbaa !7
  store double* %d, double** %6, align 8, !tbaa !1
  %7 = load double, double* %5, align 8, !tbaa !7
  %8 = fdiv double 1.000000e+00, %7
  store double %8, double* %inv_detJ, align 8, !tbaa !7
  %9 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %10 = getelementptr inbounds [8 x double], [8 x double]* %9, i64 0
  %11 = getelementptr inbounds [8 x double], [8 x double]* %10, i32 0, i32 0
  store double* %11, double** %pfx, align 8, !tbaa !1
  %12 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %13 = getelementptr inbounds [8 x double], [8 x double]* %12, i64 1
  %14 = getelementptr inbounds [8 x double], [8 x double]* %13, i32 0, i32 0
  store double* %14, double** %pfy, align 8, !tbaa !1
  %15 = load [8 x double]*, [8 x double]** %4, align 8, !tbaa !1
  %16 = getelementptr inbounds [8 x double], [8 x double]* %15, i64 2
  %17 = getelementptr inbounds [8 x double], [8 x double]* %16, i32 0, i32 0
  store double* %17, double** %pfz, align 8, !tbaa !1
  %18 = load double, double* %inv_detJ, align 8, !tbaa !7
  %19 = load double*, double** %pfx, align 8, !tbaa !1
  %20 = getelementptr inbounds double, double* %19, i64 0
  %21 = load double, double* %20, align 8, !tbaa !7
  %22 = load double*, double** %1, align 8, !tbaa !1
  %23 = getelementptr inbounds double, double* %22, i64 0
  %24 = load double, double* %23, align 8, !tbaa !7
  %25 = load double*, double** %1, align 8, !tbaa !1
  %26 = getelementptr inbounds double, double* %25, i64 6
  %27 = load double, double* %26, align 8, !tbaa !7
  %28 = fsub double %24, %27
  %29 = fmul double %21, %28
  %30 = load double*, double** %pfx, align 8, !tbaa !1
  %31 = getelementptr inbounds double, double* %30, i64 1
  %32 = load double, double* %31, align 8, !tbaa !7
  %33 = load double*, double** %1, align 8, !tbaa !1
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8, !tbaa !7
  %36 = load double*, double** %1, align 8, !tbaa !1
  %37 = getelementptr inbounds double, double* %36, i64 7
  %38 = load double, double* %37, align 8, !tbaa !7
  %39 = fsub double %35, %38
  %40 = fmul double %32, %39
  %41 = fadd double %29, %40
  %42 = load double*, double** %pfx, align 8, !tbaa !1
  %43 = getelementptr inbounds double, double* %42, i64 2
  %44 = load double, double* %43, align 8, !tbaa !7
  %45 = load double*, double** %1, align 8, !tbaa !1
  %46 = getelementptr inbounds double, double* %45, i64 2
  %47 = load double, double* %46, align 8, !tbaa !7
  %48 = load double*, double** %1, align 8, !tbaa !1
  %49 = getelementptr inbounds double, double* %48, i64 4
  %50 = load double, double* %49, align 8, !tbaa !7
  %51 = fsub double %47, %50
  %52 = fmul double %44, %51
  %53 = fadd double %41, %52
  %54 = load double*, double** %pfx, align 8, !tbaa !1
  %55 = getelementptr inbounds double, double* %54, i64 3
  %56 = load double, double* %55, align 8, !tbaa !7
  %57 = load double*, double** %1, align 8, !tbaa !1
  %58 = getelementptr inbounds double, double* %57, i64 3
  %59 = load double, double* %58, align 8, !tbaa !7
  %60 = load double*, double** %1, align 8, !tbaa !1
  %61 = getelementptr inbounds double, double* %60, i64 5
  %62 = load double, double* %61, align 8, !tbaa !7
  %63 = fsub double %59, %62
  %64 = fmul double %56, %63
  %65 = fadd double %53, %64
  %66 = fmul double %18, %65
  %67 = load double*, double** %6, align 8, !tbaa !1
  %68 = getelementptr inbounds double, double* %67, i64 0
  store double %66, double* %68, align 8, !tbaa !7
  %69 = load double, double* %inv_detJ, align 8, !tbaa !7
  %70 = load double*, double** %pfy, align 8, !tbaa !1
  %71 = getelementptr inbounds double, double* %70, i64 0
  %72 = load double, double* %71, align 8, !tbaa !7
  %73 = load double*, double** %2, align 8, !tbaa !1
  %74 = getelementptr inbounds double, double* %73, i64 0
  %75 = load double, double* %74, align 8, !tbaa !7
  %76 = load double*, double** %2, align 8, !tbaa !1
  %77 = getelementptr inbounds double, double* %76, i64 6
  %78 = load double, double* %77, align 8, !tbaa !7
  %79 = fsub double %75, %78
  %80 = fmul double %72, %79
  %81 = load double*, double** %pfy, align 8, !tbaa !1
  %82 = getelementptr inbounds double, double* %81, i64 1
  %83 = load double, double* %82, align 8, !tbaa !7
  %84 = load double*, double** %2, align 8, !tbaa !1
  %85 = getelementptr inbounds double, double* %84, i64 1
  %86 = load double, double* %85, align 8, !tbaa !7
  %87 = load double*, double** %2, align 8, !tbaa !1
  %88 = getelementptr inbounds double, double* %87, i64 7
  %89 = load double, double* %88, align 8, !tbaa !7
  %90 = fsub double %86, %89
  %91 = fmul double %83, %90
  %92 = fadd double %80, %91
  %93 = load double*, double** %pfy, align 8, !tbaa !1
  %94 = getelementptr inbounds double, double* %93, i64 2
  %95 = load double, double* %94, align 8, !tbaa !7
  %96 = load double*, double** %2, align 8, !tbaa !1
  %97 = getelementptr inbounds double, double* %96, i64 2
  %98 = load double, double* %97, align 8, !tbaa !7
  %99 = load double*, double** %2, align 8, !tbaa !1
  %100 = getelementptr inbounds double, double* %99, i64 4
  %101 = load double, double* %100, align 8, !tbaa !7
  %102 = fsub double %98, %101
  %103 = fmul double %95, %102
  %104 = fadd double %92, %103
  %105 = load double*, double** %pfy, align 8, !tbaa !1
  %106 = getelementptr inbounds double, double* %105, i64 3
  %107 = load double, double* %106, align 8, !tbaa !7
  %108 = load double*, double** %2, align 8, !tbaa !1
  %109 = getelementptr inbounds double, double* %108, i64 3
  %110 = load double, double* %109, align 8, !tbaa !7
  %111 = load double*, double** %2, align 8, !tbaa !1
  %112 = getelementptr inbounds double, double* %111, i64 5
  %113 = load double, double* %112, align 8, !tbaa !7
  %114 = fsub double %110, %113
  %115 = fmul double %107, %114
  %116 = fadd double %104, %115
  %117 = fmul double %69, %116
  %118 = load double*, double** %6, align 8, !tbaa !1
  %119 = getelementptr inbounds double, double* %118, i64 1
  store double %117, double* %119, align 8, !tbaa !7
  %120 = load double, double* %inv_detJ, align 8, !tbaa !7
  %121 = load double*, double** %pfz, align 8, !tbaa !1
  %122 = getelementptr inbounds double, double* %121, i64 0
  %123 = load double, double* %122, align 8, !tbaa !7
  %124 = load double*, double** %3, align 8, !tbaa !1
  %125 = getelementptr inbounds double, double* %124, i64 0
  %126 = load double, double* %125, align 8, !tbaa !7
  %127 = load double*, double** %3, align 8, !tbaa !1
  %128 = getelementptr inbounds double, double* %127, i64 6
  %129 = load double, double* %128, align 8, !tbaa !7
  %130 = fsub double %126, %129
  %131 = fmul double %123, %130
  %132 = load double*, double** %pfz, align 8, !tbaa !1
  %133 = getelementptr inbounds double, double* %132, i64 1
  %134 = load double, double* %133, align 8, !tbaa !7
  %135 = load double*, double** %3, align 8, !tbaa !1
  %136 = getelementptr inbounds double, double* %135, i64 1
  %137 = load double, double* %136, align 8, !tbaa !7
  %138 = load double*, double** %3, align 8, !tbaa !1
  %139 = getelementptr inbounds double, double* %138, i64 7
  %140 = load double, double* %139, align 8, !tbaa !7
  %141 = fsub double %137, %140
  %142 = fmul double %134, %141
  %143 = fadd double %131, %142
  %144 = load double*, double** %pfz, align 8, !tbaa !1
  %145 = getelementptr inbounds double, double* %144, i64 2
  %146 = load double, double* %145, align 8, !tbaa !7
  %147 = load double*, double** %3, align 8, !tbaa !1
  %148 = getelementptr inbounds double, double* %147, i64 2
  %149 = load double, double* %148, align 8, !tbaa !7
  %150 = load double*, double** %3, align 8, !tbaa !1
  %151 = getelementptr inbounds double, double* %150, i64 4
  %152 = load double, double* %151, align 8, !tbaa !7
  %153 = fsub double %149, %152
  %154 = fmul double %146, %153
  %155 = fadd double %143, %154
  %156 = load double*, double** %pfz, align 8, !tbaa !1
  %157 = getelementptr inbounds double, double* %156, i64 3
  %158 = load double, double* %157, align 8, !tbaa !7
  %159 = load double*, double** %3, align 8, !tbaa !1
  %160 = getelementptr inbounds double, double* %159, i64 3
  %161 = load double, double* %160, align 8, !tbaa !7
  %162 = load double*, double** %3, align 8, !tbaa !1
  %163 = getelementptr inbounds double, double* %162, i64 5
  %164 = load double, double* %163, align 8, !tbaa !7
  %165 = fsub double %161, %164
  %166 = fmul double %158, %165
  %167 = fadd double %155, %166
  %168 = fmul double %120, %167
  %169 = load double*, double** %6, align 8, !tbaa !1
  %170 = getelementptr inbounds double, double* %169, i64 2
  store double %168, double* %170, align 8, !tbaa !7
  %171 = load double, double* %inv_detJ, align 8, !tbaa !7
  %172 = load double*, double** %pfx, align 8, !tbaa !1
  %173 = getelementptr inbounds double, double* %172, i64 0
  %174 = load double, double* %173, align 8, !tbaa !7
  %175 = load double*, double** %2, align 8, !tbaa !1
  %176 = getelementptr inbounds double, double* %175, i64 0
  %177 = load double, double* %176, align 8, !tbaa !7
  %178 = load double*, double** %2, align 8, !tbaa !1
  %179 = getelementptr inbounds double, double* %178, i64 6
  %180 = load double, double* %179, align 8, !tbaa !7
  %181 = fsub double %177, %180
  %182 = fmul double %174, %181
  %183 = load double*, double** %pfx, align 8, !tbaa !1
  %184 = getelementptr inbounds double, double* %183, i64 1
  %185 = load double, double* %184, align 8, !tbaa !7
  %186 = load double*, double** %2, align 8, !tbaa !1
  %187 = getelementptr inbounds double, double* %186, i64 1
  %188 = load double, double* %187, align 8, !tbaa !7
  %189 = load double*, double** %2, align 8, !tbaa !1
  %190 = getelementptr inbounds double, double* %189, i64 7
  %191 = load double, double* %190, align 8, !tbaa !7
  %192 = fsub double %188, %191
  %193 = fmul double %185, %192
  %194 = fadd double %182, %193
  %195 = load double*, double** %pfx, align 8, !tbaa !1
  %196 = getelementptr inbounds double, double* %195, i64 2
  %197 = load double, double* %196, align 8, !tbaa !7
  %198 = load double*, double** %2, align 8, !tbaa !1
  %199 = getelementptr inbounds double, double* %198, i64 2
  %200 = load double, double* %199, align 8, !tbaa !7
  %201 = load double*, double** %2, align 8, !tbaa !1
  %202 = getelementptr inbounds double, double* %201, i64 4
  %203 = load double, double* %202, align 8, !tbaa !7
  %204 = fsub double %200, %203
  %205 = fmul double %197, %204
  %206 = fadd double %194, %205
  %207 = load double*, double** %pfx, align 8, !tbaa !1
  %208 = getelementptr inbounds double, double* %207, i64 3
  %209 = load double, double* %208, align 8, !tbaa !7
  %210 = load double*, double** %2, align 8, !tbaa !1
  %211 = getelementptr inbounds double, double* %210, i64 3
  %212 = load double, double* %211, align 8, !tbaa !7
  %213 = load double*, double** %2, align 8, !tbaa !1
  %214 = getelementptr inbounds double, double* %213, i64 5
  %215 = load double, double* %214, align 8, !tbaa !7
  %216 = fsub double %212, %215
  %217 = fmul double %209, %216
  %218 = fadd double %206, %217
  %219 = fmul double %171, %218
  store double %219, double* %dyddx, align 8, !tbaa !7
  %220 = load double, double* %inv_detJ, align 8, !tbaa !7
  %221 = load double*, double** %pfy, align 8, !tbaa !1
  %222 = getelementptr inbounds double, double* %221, i64 0
  %223 = load double, double* %222, align 8, !tbaa !7
  %224 = load double*, double** %1, align 8, !tbaa !1
  %225 = getelementptr inbounds double, double* %224, i64 0
  %226 = load double, double* %225, align 8, !tbaa !7
  %227 = load double*, double** %1, align 8, !tbaa !1
  %228 = getelementptr inbounds double, double* %227, i64 6
  %229 = load double, double* %228, align 8, !tbaa !7
  %230 = fsub double %226, %229
  %231 = fmul double %223, %230
  %232 = load double*, double** %pfy, align 8, !tbaa !1
  %233 = getelementptr inbounds double, double* %232, i64 1
  %234 = load double, double* %233, align 8, !tbaa !7
  %235 = load double*, double** %1, align 8, !tbaa !1
  %236 = getelementptr inbounds double, double* %235, i64 1
  %237 = load double, double* %236, align 8, !tbaa !7
  %238 = load double*, double** %1, align 8, !tbaa !1
  %239 = getelementptr inbounds double, double* %238, i64 7
  %240 = load double, double* %239, align 8, !tbaa !7
  %241 = fsub double %237, %240
  %242 = fmul double %234, %241
  %243 = fadd double %231, %242
  %244 = load double*, double** %pfy, align 8, !tbaa !1
  %245 = getelementptr inbounds double, double* %244, i64 2
  %246 = load double, double* %245, align 8, !tbaa !7
  %247 = load double*, double** %1, align 8, !tbaa !1
  %248 = getelementptr inbounds double, double* %247, i64 2
  %249 = load double, double* %248, align 8, !tbaa !7
  %250 = load double*, double** %1, align 8, !tbaa !1
  %251 = getelementptr inbounds double, double* %250, i64 4
  %252 = load double, double* %251, align 8, !tbaa !7
  %253 = fsub double %249, %252
  %254 = fmul double %246, %253
  %255 = fadd double %243, %254
  %256 = load double*, double** %pfy, align 8, !tbaa !1
  %257 = getelementptr inbounds double, double* %256, i64 3
  %258 = load double, double* %257, align 8, !tbaa !7
  %259 = load double*, double** %1, align 8, !tbaa !1
  %260 = getelementptr inbounds double, double* %259, i64 3
  %261 = load double, double* %260, align 8, !tbaa !7
  %262 = load double*, double** %1, align 8, !tbaa !1
  %263 = getelementptr inbounds double, double* %262, i64 5
  %264 = load double, double* %263, align 8, !tbaa !7
  %265 = fsub double %261, %264
  %266 = fmul double %258, %265
  %267 = fadd double %255, %266
  %268 = fmul double %220, %267
  store double %268, double* %dxddy, align 8, !tbaa !7
  %269 = load double, double* %inv_detJ, align 8, !tbaa !7
  %270 = load double*, double** %pfx, align 8, !tbaa !1
  %271 = getelementptr inbounds double, double* %270, i64 0
  %272 = load double, double* %271, align 8, !tbaa !7
  %273 = load double*, double** %3, align 8, !tbaa !1
  %274 = getelementptr inbounds double, double* %273, i64 0
  %275 = load double, double* %274, align 8, !tbaa !7
  %276 = load double*, double** %3, align 8, !tbaa !1
  %277 = getelementptr inbounds double, double* %276, i64 6
  %278 = load double, double* %277, align 8, !tbaa !7
  %279 = fsub double %275, %278
  %280 = fmul double %272, %279
  %281 = load double*, double** %pfx, align 8, !tbaa !1
  %282 = getelementptr inbounds double, double* %281, i64 1
  %283 = load double, double* %282, align 8, !tbaa !7
  %284 = load double*, double** %3, align 8, !tbaa !1
  %285 = getelementptr inbounds double, double* %284, i64 1
  %286 = load double, double* %285, align 8, !tbaa !7
  %287 = load double*, double** %3, align 8, !tbaa !1
  %288 = getelementptr inbounds double, double* %287, i64 7
  %289 = load double, double* %288, align 8, !tbaa !7
  %290 = fsub double %286, %289
  %291 = fmul double %283, %290
  %292 = fadd double %280, %291
  %293 = load double*, double** %pfx, align 8, !tbaa !1
  %294 = getelementptr inbounds double, double* %293, i64 2
  %295 = load double, double* %294, align 8, !tbaa !7
  %296 = load double*, double** %3, align 8, !tbaa !1
  %297 = getelementptr inbounds double, double* %296, i64 2
  %298 = load double, double* %297, align 8, !tbaa !7
  %299 = load double*, double** %3, align 8, !tbaa !1
  %300 = getelementptr inbounds double, double* %299, i64 4
  %301 = load double, double* %300, align 8, !tbaa !7
  %302 = fsub double %298, %301
  %303 = fmul double %295, %302
  %304 = fadd double %292, %303
  %305 = load double*, double** %pfx, align 8, !tbaa !1
  %306 = getelementptr inbounds double, double* %305, i64 3
  %307 = load double, double* %306, align 8, !tbaa !7
  %308 = load double*, double** %3, align 8, !tbaa !1
  %309 = getelementptr inbounds double, double* %308, i64 3
  %310 = load double, double* %309, align 8, !tbaa !7
  %311 = load double*, double** %3, align 8, !tbaa !1
  %312 = getelementptr inbounds double, double* %311, i64 5
  %313 = load double, double* %312, align 8, !tbaa !7
  %314 = fsub double %310, %313
  %315 = fmul double %307, %314
  %316 = fadd double %304, %315
  %317 = fmul double %269, %316
  store double %317, double* %dzddx, align 8, !tbaa !7
  %318 = load double, double* %inv_detJ, align 8, !tbaa !7
  %319 = load double*, double** %pfz, align 8, !tbaa !1
  %320 = getelementptr inbounds double, double* %319, i64 0
  %321 = load double, double* %320, align 8, !tbaa !7
  %322 = load double*, double** %1, align 8, !tbaa !1
  %323 = getelementptr inbounds double, double* %322, i64 0
  %324 = load double, double* %323, align 8, !tbaa !7
  %325 = load double*, double** %1, align 8, !tbaa !1
  %326 = getelementptr inbounds double, double* %325, i64 6
  %327 = load double, double* %326, align 8, !tbaa !7
  %328 = fsub double %324, %327
  %329 = fmul double %321, %328
  %330 = load double*, double** %pfz, align 8, !tbaa !1
  %331 = getelementptr inbounds double, double* %330, i64 1
  %332 = load double, double* %331, align 8, !tbaa !7
  %333 = load double*, double** %1, align 8, !tbaa !1
  %334 = getelementptr inbounds double, double* %333, i64 1
  %335 = load double, double* %334, align 8, !tbaa !7
  %336 = load double*, double** %1, align 8, !tbaa !1
  %337 = getelementptr inbounds double, double* %336, i64 7
  %338 = load double, double* %337, align 8, !tbaa !7
  %339 = fsub double %335, %338
  %340 = fmul double %332, %339
  %341 = fadd double %329, %340
  %342 = load double*, double** %pfz, align 8, !tbaa !1
  %343 = getelementptr inbounds double, double* %342, i64 2
  %344 = load double, double* %343, align 8, !tbaa !7
  %345 = load double*, double** %1, align 8, !tbaa !1
  %346 = getelementptr inbounds double, double* %345, i64 2
  %347 = load double, double* %346, align 8, !tbaa !7
  %348 = load double*, double** %1, align 8, !tbaa !1
  %349 = getelementptr inbounds double, double* %348, i64 4
  %350 = load double, double* %349, align 8, !tbaa !7
  %351 = fsub double %347, %350
  %352 = fmul double %344, %351
  %353 = fadd double %341, %352
  %354 = load double*, double** %pfz, align 8, !tbaa !1
  %355 = getelementptr inbounds double, double* %354, i64 3
  %356 = load double, double* %355, align 8, !tbaa !7
  %357 = load double*, double** %1, align 8, !tbaa !1
  %358 = getelementptr inbounds double, double* %357, i64 3
  %359 = load double, double* %358, align 8, !tbaa !7
  %360 = load double*, double** %1, align 8, !tbaa !1
  %361 = getelementptr inbounds double, double* %360, i64 5
  %362 = load double, double* %361, align 8, !tbaa !7
  %363 = fsub double %359, %362
  %364 = fmul double %356, %363
  %365 = fadd double %353, %364
  %366 = fmul double %318, %365
  store double %366, double* %dxddz, align 8, !tbaa !7
  %367 = load double, double* %inv_detJ, align 8, !tbaa !7
  %368 = load double*, double** %pfy, align 8, !tbaa !1
  %369 = getelementptr inbounds double, double* %368, i64 0
  %370 = load double, double* %369, align 8, !tbaa !7
  %371 = load double*, double** %3, align 8, !tbaa !1
  %372 = getelementptr inbounds double, double* %371, i64 0
  %373 = load double, double* %372, align 8, !tbaa !7
  %374 = load double*, double** %3, align 8, !tbaa !1
  %375 = getelementptr inbounds double, double* %374, i64 6
  %376 = load double, double* %375, align 8, !tbaa !7
  %377 = fsub double %373, %376
  %378 = fmul double %370, %377
  %379 = load double*, double** %pfy, align 8, !tbaa !1
  %380 = getelementptr inbounds double, double* %379, i64 1
  %381 = load double, double* %380, align 8, !tbaa !7
  %382 = load double*, double** %3, align 8, !tbaa !1
  %383 = getelementptr inbounds double, double* %382, i64 1
  %384 = load double, double* %383, align 8, !tbaa !7
  %385 = load double*, double** %3, align 8, !tbaa !1
  %386 = getelementptr inbounds double, double* %385, i64 7
  %387 = load double, double* %386, align 8, !tbaa !7
  %388 = fsub double %384, %387
  %389 = fmul double %381, %388
  %390 = fadd double %378, %389
  %391 = load double*, double** %pfy, align 8, !tbaa !1
  %392 = getelementptr inbounds double, double* %391, i64 2
  %393 = load double, double* %392, align 8, !tbaa !7
  %394 = load double*, double** %3, align 8, !tbaa !1
  %395 = getelementptr inbounds double, double* %394, i64 2
  %396 = load double, double* %395, align 8, !tbaa !7
  %397 = load double*, double** %3, align 8, !tbaa !1
  %398 = getelementptr inbounds double, double* %397, i64 4
  %399 = load double, double* %398, align 8, !tbaa !7
  %400 = fsub double %396, %399
  %401 = fmul double %393, %400
  %402 = fadd double %390, %401
  %403 = load double*, double** %pfy, align 8, !tbaa !1
  %404 = getelementptr inbounds double, double* %403, i64 3
  %405 = load double, double* %404, align 8, !tbaa !7
  %406 = load double*, double** %3, align 8, !tbaa !1
  %407 = getelementptr inbounds double, double* %406, i64 3
  %408 = load double, double* %407, align 8, !tbaa !7
  %409 = load double*, double** %3, align 8, !tbaa !1
  %410 = getelementptr inbounds double, double* %409, i64 5
  %411 = load double, double* %410, align 8, !tbaa !7
  %412 = fsub double %408, %411
  %413 = fmul double %405, %412
  %414 = fadd double %402, %413
  %415 = fmul double %367, %414
  store double %415, double* %dzddy, align 8, !tbaa !7
  %416 = load double, double* %inv_detJ, align 8, !tbaa !7
  %417 = load double*, double** %pfz, align 8, !tbaa !1
  %418 = getelementptr inbounds double, double* %417, i64 0
  %419 = load double, double* %418, align 8, !tbaa !7
  %420 = load double*, double** %2, align 8, !tbaa !1
  %421 = getelementptr inbounds double, double* %420, i64 0
  %422 = load double, double* %421, align 8, !tbaa !7
  %423 = load double*, double** %2, align 8, !tbaa !1
  %424 = getelementptr inbounds double, double* %423, i64 6
  %425 = load double, double* %424, align 8, !tbaa !7
  %426 = fsub double %422, %425
  %427 = fmul double %419, %426
  %428 = load double*, double** %pfz, align 8, !tbaa !1
  %429 = getelementptr inbounds double, double* %428, i64 1
  %430 = load double, double* %429, align 8, !tbaa !7
  %431 = load double*, double** %2, align 8, !tbaa !1
  %432 = getelementptr inbounds double, double* %431, i64 1
  %433 = load double, double* %432, align 8, !tbaa !7
  %434 = load double*, double** %2, align 8, !tbaa !1
  %435 = getelementptr inbounds double, double* %434, i64 7
  %436 = load double, double* %435, align 8, !tbaa !7
  %437 = fsub double %433, %436
  %438 = fmul double %430, %437
  %439 = fadd double %427, %438
  %440 = load double*, double** %pfz, align 8, !tbaa !1
  %441 = getelementptr inbounds double, double* %440, i64 2
  %442 = load double, double* %441, align 8, !tbaa !7
  %443 = load double*, double** %2, align 8, !tbaa !1
  %444 = getelementptr inbounds double, double* %443, i64 2
  %445 = load double, double* %444, align 8, !tbaa !7
  %446 = load double*, double** %2, align 8, !tbaa !1
  %447 = getelementptr inbounds double, double* %446, i64 4
  %448 = load double, double* %447, align 8, !tbaa !7
  %449 = fsub double %445, %448
  %450 = fmul double %442, %449
  %451 = fadd double %439, %450
  %452 = load double*, double** %pfz, align 8, !tbaa !1
  %453 = getelementptr inbounds double, double* %452, i64 3
  %454 = load double, double* %453, align 8, !tbaa !7
  %455 = load double*, double** %2, align 8, !tbaa !1
  %456 = getelementptr inbounds double, double* %455, i64 3
  %457 = load double, double* %456, align 8, !tbaa !7
  %458 = load double*, double** %2, align 8, !tbaa !1
  %459 = getelementptr inbounds double, double* %458, i64 5
  %460 = load double, double* %459, align 8, !tbaa !7
  %461 = fsub double %457, %460
  %462 = fmul double %454, %461
  %463 = fadd double %451, %462
  %464 = fmul double %416, %463
  store double %464, double* %dyddz, align 8, !tbaa !7
  %465 = load double, double* %dxddy, align 8, !tbaa !7
  %466 = load double, double* %dyddx, align 8, !tbaa !7
  %467 = fadd double %465, %466
  %468 = fmul double 5.000000e-01, %467
  %469 = load double*, double** %6, align 8, !tbaa !1
  %470 = getelementptr inbounds double, double* %469, i64 5
  store double %468, double* %470, align 8, !tbaa !7
  %471 = load double, double* %dxddz, align 8, !tbaa !7
  %472 = load double, double* %dzddx, align 8, !tbaa !7
  %473 = fadd double %471, %472
  %474 = fmul double 5.000000e-01, %473
  %475 = load double*, double** %6, align 8, !tbaa !1
  %476 = getelementptr inbounds double, double* %475, i64 4
  store double %474, double* %476, align 8, !tbaa !7
  %477 = load double, double* %dzddy, align 8, !tbaa !7
  %478 = load double, double* %dyddz, align 8, !tbaa !7
  %479 = fadd double %477, %478
  %480 = fmul double 5.000000e-01, %479
  %481 = load double*, double** %6, align 8, !tbaa !1
  %482 = getelementptr inbounds double, double* %481, i64 3
  store double %480, double* %482, align 8, !tbaa !7
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal double @_ZL8AreaFacedddddddddddd(double %x0, double %x1, double %x2, double %x3, double %y0, double %y1, double %y2, double %y3, double %z0, double %z1, double %z2, double %z3) #6 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %fx = alloca double, align 8
  %fy = alloca double, align 8
  %fz = alloca double, align 8
  %gx = alloca double, align 8
  %gy = alloca double, align 8
  %gz = alloca double, align 8
  %area = alloca double, align 8
  store double %x0, double* %1, align 8, !tbaa !7
  store double %x1, double* %2, align 8, !tbaa !7
  store double %x2, double* %3, align 8, !tbaa !7
  store double %x3, double* %4, align 8, !tbaa !7
  store double %y0, double* %5, align 8, !tbaa !7
  store double %y1, double* %6, align 8, !tbaa !7
  store double %y2, double* %7, align 8, !tbaa !7
  store double %y3, double* %8, align 8, !tbaa !7
  store double %z0, double* %9, align 8, !tbaa !7
  store double %z1, double* %10, align 8, !tbaa !7
  store double %z2, double* %11, align 8, !tbaa !7
  store double %z3, double* %12, align 8, !tbaa !7
  %13 = load double, double* %3, align 8, !tbaa !7
  %14 = load double, double* %1, align 8, !tbaa !7
  %15 = fsub double %13, %14
  %16 = load double, double* %4, align 8, !tbaa !7
  %17 = load double, double* %2, align 8, !tbaa !7
  %18 = fsub double %16, %17
  %19 = fsub double %15, %18
  store double %19, double* %fx, align 8, !tbaa !7
  %20 = load double, double* %7, align 8, !tbaa !7
  %21 = load double, double* %5, align 8, !tbaa !7
  %22 = fsub double %20, %21
  %23 = load double, double* %8, align 8, !tbaa !7
  %24 = load double, double* %6, align 8, !tbaa !7
  %25 = fsub double %23, %24
  %26 = fsub double %22, %25
  store double %26, double* %fy, align 8, !tbaa !7
  %27 = load double, double* %11, align 8, !tbaa !7
  %28 = load double, double* %9, align 8, !tbaa !7
  %29 = fsub double %27, %28
  %30 = load double, double* %12, align 8, !tbaa !7
  %31 = load double, double* %10, align 8, !tbaa !7
  %32 = fsub double %30, %31
  %33 = fsub double %29, %32
  store double %33, double* %fz, align 8, !tbaa !7
  %34 = load double, double* %3, align 8, !tbaa !7
  %35 = load double, double* %1, align 8, !tbaa !7
  %36 = fsub double %34, %35
  %37 = load double, double* %4, align 8, !tbaa !7
  %38 = load double, double* %2, align 8, !tbaa !7
  %39 = fsub double %37, %38
  %40 = fadd double %36, %39
  store double %40, double* %gx, align 8, !tbaa !7
  %41 = load double, double* %7, align 8, !tbaa !7
  %42 = load double, double* %5, align 8, !tbaa !7
  %43 = fsub double %41, %42
  %44 = load double, double* %8, align 8, !tbaa !7
  %45 = load double, double* %6, align 8, !tbaa !7
  %46 = fsub double %44, %45
  %47 = fadd double %43, %46
  store double %47, double* %gy, align 8, !tbaa !7
  %48 = load double, double* %11, align 8, !tbaa !7
  %49 = load double, double* %9, align 8, !tbaa !7
  %50 = fsub double %48, %49
  %51 = load double, double* %12, align 8, !tbaa !7
  %52 = load double, double* %10, align 8, !tbaa !7
  %53 = fsub double %51, %52
  %54 = fadd double %50, %53
  store double %54, double* %gz, align 8, !tbaa !7
  %55 = load double, double* %fx, align 8, !tbaa !7
  %56 = load double, double* %fx, align 8, !tbaa !7
  %57 = fmul double %55, %56
  %58 = load double, double* %fy, align 8, !tbaa !7
  %59 = load double, double* %fy, align 8, !tbaa !7
  %60 = fmul double %58, %59
  %61 = fadd double %57, %60
  %62 = load double, double* %fz, align 8, !tbaa !7
  %63 = load double, double* %fz, align 8, !tbaa !7
  %64 = fmul double %62, %63
  %65 = fadd double %61, %64
  %66 = load double, double* %gx, align 8, !tbaa !7
  %67 = load double, double* %gx, align 8, !tbaa !7
  %68 = fmul double %66, %67
  %69 = load double, double* %gy, align 8, !tbaa !7
  %70 = load double, double* %gy, align 8, !tbaa !7
  %71 = fmul double %69, %70
  %72 = fadd double %68, %71
  %73 = load double, double* %gz, align 8, !tbaa !7
  %74 = load double, double* %gz, align 8, !tbaa !7
  %75 = fmul double %73, %74
  %76 = fadd double %72, %75
  %77 = fmul double %65, %76
  %78 = load double, double* %fx, align 8, !tbaa !7
  %79 = load double, double* %gx, align 8, !tbaa !7
  %80 = fmul double %78, %79
  %81 = load double, double* %fy, align 8, !tbaa !7
  %82 = load double, double* %gy, align 8, !tbaa !7
  %83 = fmul double %81, %82
  %84 = fadd double %80, %83
  %85 = load double, double* %fz, align 8, !tbaa !7
  %86 = load double, double* %gz, align 8, !tbaa !7
  %87 = fmul double %85, %86
  %88 = fadd double %84, %87
  %89 = load double, double* %fx, align 8, !tbaa !7
  %90 = load double, double* %gx, align 8, !tbaa !7
  %91 = fmul double %89, %90
  %92 = load double, double* %fy, align 8, !tbaa !7
  %93 = load double, double* %gy, align 8, !tbaa !7
  %94 = fmul double %92, %93
  %95 = fadd double %91, %94
  %96 = load double, double* %fz, align 8, !tbaa !7
  %97 = load double, double* %gz, align 8, !tbaa !7
  %98 = fmul double %96, %97
  %99 = fadd double %95, %98
  %100 = fmul double %88, %99
  %101 = fsub double %77, %100
  store double %101, double* %area, align 8, !tbaa !7
  %102 = load double, double* %area, align 8, !tbaa !7
  ret double %102
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZSt3maxIdERKT_S2_S2_(double* dereferenceable(8) %__a, double* dereferenceable(8) %__b) #6 comdat {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  store double* %__a, double** %2, align 8, !tbaa !28
  store double* %__b, double** %3, align 8, !tbaa !28
  %4 = load double*, double** %2, align 8
  %5 = load double, double* %4, align 8, !tbaa !7
  %6 = load double*, double** %3, align 8
  %7 = load double, double* %6, align 8, !tbaa !7
  %8 = fcmp olt double %5, %7
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = load double*, double** %3, align 8
  store double* %10, double** %1
  br label %13

; <label>:11                                      ; preds = %0
  %12 = load double*, double** %2, align 8
  store double* %12, double** %1
  br label %13

; <label>:13                                      ; preds = %11, %9
  %14 = load double*, double** %1
  ret double* %14
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr double @_Z4SQRTd(double %arg) #6 comdat {
  %1 = alloca double, align 8
  store double %arg, double* %1, align 8, !tbaa !7
  %2 = load double, double* %1, align 8, !tbaa !7
  %3 = call double @sqrt(double %2) #1
  ret double %3
}

; Function Attrs: nounwind
declare double @sqrt(double) #5

; Function Attrs: inlinehint uwtable
define internal void @_ZL31CalcMonotonicQGradientsForElemsv() #0 {
  %numElem = alloca i32, align 4
  %i = alloca i32, align 4
  %ptiny = alloca double, align 8
  %ax = alloca double, align 8
  %ay = alloca double, align 8
  %az = alloca double, align 8
  %dxv = alloca double, align 8
  %dyv = alloca double, align 8
  %dzv = alloca double, align 8
  %elemToNode = alloca i32*, align 8
  %n0 = alloca i32, align 4
  %n1 = alloca i32, align 4
  %n2 = alloca i32, align 4
  %n3 = alloca i32, align 4
  %n4 = alloca i32, align 4
  %n5 = alloca i32, align 4
  %n6 = alloca i32, align 4
  %n7 = alloca i32, align 4
  %x0 = alloca double, align 8
  %x1 = alloca double, align 8
  %x2 = alloca double, align 8
  %x3 = alloca double, align 8
  %x4 = alloca double, align 8
  %x5 = alloca double, align 8
  %x6 = alloca double, align 8
  %x7 = alloca double, align 8
  %y0 = alloca double, align 8
  %y1 = alloca double, align 8
  %y2 = alloca double, align 8
  %y3 = alloca double, align 8
  %y4 = alloca double, align 8
  %y5 = alloca double, align 8
  %y6 = alloca double, align 8
  %y7 = alloca double, align 8
  %z0 = alloca double, align 8
  %z1 = alloca double, align 8
  %z2 = alloca double, align 8
  %z3 = alloca double, align 8
  %z4 = alloca double, align 8
  %z5 = alloca double, align 8
  %z6 = alloca double, align 8
  %z7 = alloca double, align 8
  %xv0 = alloca double, align 8
  %xv1 = alloca double, align 8
  %xv2 = alloca double, align 8
  %xv3 = alloca double, align 8
  %xv4 = alloca double, align 8
  %xv5 = alloca double, align 8
  %xv6 = alloca double, align 8
  %xv7 = alloca double, align 8
  %yv0 = alloca double, align 8
  %yv1 = alloca double, align 8
  %yv2 = alloca double, align 8
  %yv3 = alloca double, align 8
  %yv4 = alloca double, align 8
  %yv5 = alloca double, align 8
  %yv6 = alloca double, align 8
  %yv7 = alloca double, align 8
  %zv0 = alloca double, align 8
  %zv1 = alloca double, align 8
  %zv2 = alloca double, align 8
  %zv3 = alloca double, align 8
  %zv4 = alloca double, align 8
  %zv5 = alloca double, align 8
  %zv6 = alloca double, align 8
  %zv7 = alloca double, align 8
  %vol = alloca double, align 8
  %norm = alloca double, align 8
  %dxj = alloca double, align 8
  %dyj = alloca double, align 8
  %dzj = alloca double, align 8
  %dxi = alloca double, align 8
  %dyi = alloca double, align 8
  %dzi = alloca double, align 8
  %dxk = alloca double, align 8
  %dyk = alloca double, align 8
  %dzk = alloca double, align 8
  %1 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %2 = load i32, i32* %1, !tbaa !5
  store i32 %2, i32* %numElem, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %3

; <label>:3                                       ; preds = %656, %0
  %4 = load i32, i32* %i, align 4, !tbaa !5
  %5 = load i32, i32* %numElem, align 4, !tbaa !5
  %6 = icmp slt i32 %4, %5
  br i1 %6, label %7, label %659

; <label>:7                                       ; preds = %3
  store double 1.000000e-36, double* %ptiny, align 8, !tbaa !7
  %8 = load i32, i32* %i, align 4, !tbaa !5
  %9 = call i32* @_ZN6Domain8nodelistEi(%struct.Domain* @domain, i32 %8)
  store i32* %9, i32** %elemToNode, align 8, !tbaa !1
  %10 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %11 = getelementptr inbounds i32, i32* %10, i64 0
  %12 = load i32, i32* %11, align 4, !tbaa !5
  store i32 %12, i32* %n0, align 4, !tbaa !5
  %13 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %14 = getelementptr inbounds i32, i32* %13, i64 1
  %15 = load i32, i32* %14, align 4, !tbaa !5
  store i32 %15, i32* %n1, align 4, !tbaa !5
  %16 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %17 = getelementptr inbounds i32, i32* %16, i64 2
  %18 = load i32, i32* %17, align 4, !tbaa !5
  store i32 %18, i32* %n2, align 4, !tbaa !5
  %19 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %20 = getelementptr inbounds i32, i32* %19, i64 3
  %21 = load i32, i32* %20, align 4, !tbaa !5
  store i32 %21, i32* %n3, align 4, !tbaa !5
  %22 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %23 = getelementptr inbounds i32, i32* %22, i64 4
  %24 = load i32, i32* %23, align 4, !tbaa !5
  store i32 %24, i32* %n4, align 4, !tbaa !5
  %25 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %26 = getelementptr inbounds i32, i32* %25, i64 5
  %27 = load i32, i32* %26, align 4, !tbaa !5
  store i32 %27, i32* %n5, align 4, !tbaa !5
  %28 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %29 = getelementptr inbounds i32, i32* %28, i64 6
  %30 = load i32, i32* %29, align 4, !tbaa !5
  store i32 %30, i32* %n6, align 4, !tbaa !5
  %31 = load i32*, i32** %elemToNode, align 8, !tbaa !1
  %32 = getelementptr inbounds i32, i32* %31, i64 7
  %33 = load i32, i32* %32, align 4, !tbaa !5
  store i32 %33, i32* %n7, align 4, !tbaa !5
  %34 = load i32, i32* %n0, align 4, !tbaa !5
  %35 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %34)
  %36 = load double, double* %35, !tbaa !7
  store double %36, double* %x0, align 8, !tbaa !7
  %37 = load i32, i32* %n1, align 4, !tbaa !5
  %38 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %37)
  %39 = load double, double* %38, !tbaa !7
  store double %39, double* %x1, align 8, !tbaa !7
  %40 = load i32, i32* %n2, align 4, !tbaa !5
  %41 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %40)
  %42 = load double, double* %41, !tbaa !7
  store double %42, double* %x2, align 8, !tbaa !7
  %43 = load i32, i32* %n3, align 4, !tbaa !5
  %44 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %43)
  %45 = load double, double* %44, !tbaa !7
  store double %45, double* %x3, align 8, !tbaa !7
  %46 = load i32, i32* %n4, align 4, !tbaa !5
  %47 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %46)
  %48 = load double, double* %47, !tbaa !7
  store double %48, double* %x4, align 8, !tbaa !7
  %49 = load i32, i32* %n5, align 4, !tbaa !5
  %50 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %49)
  %51 = load double, double* %50, !tbaa !7
  store double %51, double* %x5, align 8, !tbaa !7
  %52 = load i32, i32* %n6, align 4, !tbaa !5
  %53 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %52)
  %54 = load double, double* %53, !tbaa !7
  store double %54, double* %x6, align 8, !tbaa !7
  %55 = load i32, i32* %n7, align 4, !tbaa !5
  %56 = call dereferenceable(8) double* @_ZN6Domain1xEi(%struct.Domain* @domain, i32 %55)
  %57 = load double, double* %56, !tbaa !7
  store double %57, double* %x7, align 8, !tbaa !7
  %58 = load i32, i32* %n0, align 4, !tbaa !5
  %59 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %58)
  %60 = load double, double* %59, !tbaa !7
  store double %60, double* %y0, align 8, !tbaa !7
  %61 = load i32, i32* %n1, align 4, !tbaa !5
  %62 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %61)
  %63 = load double, double* %62, !tbaa !7
  store double %63, double* %y1, align 8, !tbaa !7
  %64 = load i32, i32* %n2, align 4, !tbaa !5
  %65 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %64)
  %66 = load double, double* %65, !tbaa !7
  store double %66, double* %y2, align 8, !tbaa !7
  %67 = load i32, i32* %n3, align 4, !tbaa !5
  %68 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %67)
  %69 = load double, double* %68, !tbaa !7
  store double %69, double* %y3, align 8, !tbaa !7
  %70 = load i32, i32* %n4, align 4, !tbaa !5
  %71 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %70)
  %72 = load double, double* %71, !tbaa !7
  store double %72, double* %y4, align 8, !tbaa !7
  %73 = load i32, i32* %n5, align 4, !tbaa !5
  %74 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %73)
  %75 = load double, double* %74, !tbaa !7
  store double %75, double* %y5, align 8, !tbaa !7
  %76 = load i32, i32* %n6, align 4, !tbaa !5
  %77 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %76)
  %78 = load double, double* %77, !tbaa !7
  store double %78, double* %y6, align 8, !tbaa !7
  %79 = load i32, i32* %n7, align 4, !tbaa !5
  %80 = call dereferenceable(8) double* @_ZN6Domain1yEi(%struct.Domain* @domain, i32 %79)
  %81 = load double, double* %80, !tbaa !7
  store double %81, double* %y7, align 8, !tbaa !7
  %82 = load i32, i32* %n0, align 4, !tbaa !5
  %83 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %82)
  %84 = load double, double* %83, !tbaa !7
  store double %84, double* %z0, align 8, !tbaa !7
  %85 = load i32, i32* %n1, align 4, !tbaa !5
  %86 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %85)
  %87 = load double, double* %86, !tbaa !7
  store double %87, double* %z1, align 8, !tbaa !7
  %88 = load i32, i32* %n2, align 4, !tbaa !5
  %89 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %88)
  %90 = load double, double* %89, !tbaa !7
  store double %90, double* %z2, align 8, !tbaa !7
  %91 = load i32, i32* %n3, align 4, !tbaa !5
  %92 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %91)
  %93 = load double, double* %92, !tbaa !7
  store double %93, double* %z3, align 8, !tbaa !7
  %94 = load i32, i32* %n4, align 4, !tbaa !5
  %95 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %94)
  %96 = load double, double* %95, !tbaa !7
  store double %96, double* %z4, align 8, !tbaa !7
  %97 = load i32, i32* %n5, align 4, !tbaa !5
  %98 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %97)
  %99 = load double, double* %98, !tbaa !7
  store double %99, double* %z5, align 8, !tbaa !7
  %100 = load i32, i32* %n6, align 4, !tbaa !5
  %101 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %100)
  %102 = load double, double* %101, !tbaa !7
  store double %102, double* %z6, align 8, !tbaa !7
  %103 = load i32, i32* %n7, align 4, !tbaa !5
  %104 = call dereferenceable(8) double* @_ZN6Domain1zEi(%struct.Domain* @domain, i32 %103)
  %105 = load double, double* %104, !tbaa !7
  store double %105, double* %z7, align 8, !tbaa !7
  %106 = load i32, i32* %n0, align 4, !tbaa !5
  %107 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %106)
  %108 = load double, double* %107, !tbaa !7
  store double %108, double* %xv0, align 8, !tbaa !7
  %109 = load i32, i32* %n1, align 4, !tbaa !5
  %110 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %109)
  %111 = load double, double* %110, !tbaa !7
  store double %111, double* %xv1, align 8, !tbaa !7
  %112 = load i32, i32* %n2, align 4, !tbaa !5
  %113 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %112)
  %114 = load double, double* %113, !tbaa !7
  store double %114, double* %xv2, align 8, !tbaa !7
  %115 = load i32, i32* %n3, align 4, !tbaa !5
  %116 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %115)
  %117 = load double, double* %116, !tbaa !7
  store double %117, double* %xv3, align 8, !tbaa !7
  %118 = load i32, i32* %n4, align 4, !tbaa !5
  %119 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %118)
  %120 = load double, double* %119, !tbaa !7
  store double %120, double* %xv4, align 8, !tbaa !7
  %121 = load i32, i32* %n5, align 4, !tbaa !5
  %122 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %121)
  %123 = load double, double* %122, !tbaa !7
  store double %123, double* %xv5, align 8, !tbaa !7
  %124 = load i32, i32* %n6, align 4, !tbaa !5
  %125 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %124)
  %126 = load double, double* %125, !tbaa !7
  store double %126, double* %xv6, align 8, !tbaa !7
  %127 = load i32, i32* %n7, align 4, !tbaa !5
  %128 = call dereferenceable(8) double* @_ZN6Domain2xdEi(%struct.Domain* @domain, i32 %127)
  %129 = load double, double* %128, !tbaa !7
  store double %129, double* %xv7, align 8, !tbaa !7
  %130 = load i32, i32* %n0, align 4, !tbaa !5
  %131 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %130)
  %132 = load double, double* %131, !tbaa !7
  store double %132, double* %yv0, align 8, !tbaa !7
  %133 = load i32, i32* %n1, align 4, !tbaa !5
  %134 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %133)
  %135 = load double, double* %134, !tbaa !7
  store double %135, double* %yv1, align 8, !tbaa !7
  %136 = load i32, i32* %n2, align 4, !tbaa !5
  %137 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %136)
  %138 = load double, double* %137, !tbaa !7
  store double %138, double* %yv2, align 8, !tbaa !7
  %139 = load i32, i32* %n3, align 4, !tbaa !5
  %140 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %139)
  %141 = load double, double* %140, !tbaa !7
  store double %141, double* %yv3, align 8, !tbaa !7
  %142 = load i32, i32* %n4, align 4, !tbaa !5
  %143 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %142)
  %144 = load double, double* %143, !tbaa !7
  store double %144, double* %yv4, align 8, !tbaa !7
  %145 = load i32, i32* %n5, align 4, !tbaa !5
  %146 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %145)
  %147 = load double, double* %146, !tbaa !7
  store double %147, double* %yv5, align 8, !tbaa !7
  %148 = load i32, i32* %n6, align 4, !tbaa !5
  %149 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %148)
  %150 = load double, double* %149, !tbaa !7
  store double %150, double* %yv6, align 8, !tbaa !7
  %151 = load i32, i32* %n7, align 4, !tbaa !5
  %152 = call dereferenceable(8) double* @_ZN6Domain2ydEi(%struct.Domain* @domain, i32 %151)
  %153 = load double, double* %152, !tbaa !7
  store double %153, double* %yv7, align 8, !tbaa !7
  %154 = load i32, i32* %n0, align 4, !tbaa !5
  %155 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %154)
  %156 = load double, double* %155, !tbaa !7
  store double %156, double* %zv0, align 8, !tbaa !7
  %157 = load i32, i32* %n1, align 4, !tbaa !5
  %158 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %157)
  %159 = load double, double* %158, !tbaa !7
  store double %159, double* %zv1, align 8, !tbaa !7
  %160 = load i32, i32* %n2, align 4, !tbaa !5
  %161 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %160)
  %162 = load double, double* %161, !tbaa !7
  store double %162, double* %zv2, align 8, !tbaa !7
  %163 = load i32, i32* %n3, align 4, !tbaa !5
  %164 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %163)
  %165 = load double, double* %164, !tbaa !7
  store double %165, double* %zv3, align 8, !tbaa !7
  %166 = load i32, i32* %n4, align 4, !tbaa !5
  %167 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %166)
  %168 = load double, double* %167, !tbaa !7
  store double %168, double* %zv4, align 8, !tbaa !7
  %169 = load i32, i32* %n5, align 4, !tbaa !5
  %170 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %169)
  %171 = load double, double* %170, !tbaa !7
  store double %171, double* %zv5, align 8, !tbaa !7
  %172 = load i32, i32* %n6, align 4, !tbaa !5
  %173 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %172)
  %174 = load double, double* %173, !tbaa !7
  store double %174, double* %zv6, align 8, !tbaa !7
  %175 = load i32, i32* %n7, align 4, !tbaa !5
  %176 = call dereferenceable(8) double* @_ZN6Domain2zdEi(%struct.Domain* @domain, i32 %175)
  %177 = load double, double* %176, !tbaa !7
  store double %177, double* %zv7, align 8, !tbaa !7
  %178 = load i32, i32* %i, align 4, !tbaa !5
  %179 = call dereferenceable(8) double* @_ZN6Domain4voloEi(%struct.Domain* @domain, i32 %178)
  %180 = load double, double* %179, !tbaa !7
  %181 = load i32, i32* %i, align 4, !tbaa !5
  %182 = call dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* @domain, i32 %181)
  %183 = load double, double* %182, !tbaa !7
  %184 = fmul double %180, %183
  store double %184, double* %vol, align 8, !tbaa !7
  %185 = load double, double* %vol, align 8, !tbaa !7
  %186 = fadd double %185, 1.000000e-36
  %187 = fdiv double 1.000000e+00, %186
  store double %187, double* %norm, align 8, !tbaa !7
  %188 = load double, double* %x0, align 8, !tbaa !7
  %189 = load double, double* %x1, align 8, !tbaa !7
  %190 = fadd double %188, %189
  %191 = load double, double* %x5, align 8, !tbaa !7
  %192 = fadd double %190, %191
  %193 = load double, double* %x4, align 8, !tbaa !7
  %194 = fadd double %192, %193
  %195 = load double, double* %x3, align 8, !tbaa !7
  %196 = load double, double* %x2, align 8, !tbaa !7
  %197 = fadd double %195, %196
  %198 = load double, double* %x6, align 8, !tbaa !7
  %199 = fadd double %197, %198
  %200 = load double, double* %x7, align 8, !tbaa !7
  %201 = fadd double %199, %200
  %202 = fsub double %194, %201
  %203 = fmul double -2.500000e-01, %202
  store double %203, double* %dxj, align 8, !tbaa !7
  %204 = load double, double* %y0, align 8, !tbaa !7
  %205 = load double, double* %y1, align 8, !tbaa !7
  %206 = fadd double %204, %205
  %207 = load double, double* %y5, align 8, !tbaa !7
  %208 = fadd double %206, %207
  %209 = load double, double* %y4, align 8, !tbaa !7
  %210 = fadd double %208, %209
  %211 = load double, double* %y3, align 8, !tbaa !7
  %212 = load double, double* %y2, align 8, !tbaa !7
  %213 = fadd double %211, %212
  %214 = load double, double* %y6, align 8, !tbaa !7
  %215 = fadd double %213, %214
  %216 = load double, double* %y7, align 8, !tbaa !7
  %217 = fadd double %215, %216
  %218 = fsub double %210, %217
  %219 = fmul double -2.500000e-01, %218
  store double %219, double* %dyj, align 8, !tbaa !7
  %220 = load double, double* %z0, align 8, !tbaa !7
  %221 = load double, double* %z1, align 8, !tbaa !7
  %222 = fadd double %220, %221
  %223 = load double, double* %z5, align 8, !tbaa !7
  %224 = fadd double %222, %223
  %225 = load double, double* %z4, align 8, !tbaa !7
  %226 = fadd double %224, %225
  %227 = load double, double* %z3, align 8, !tbaa !7
  %228 = load double, double* %z2, align 8, !tbaa !7
  %229 = fadd double %227, %228
  %230 = load double, double* %z6, align 8, !tbaa !7
  %231 = fadd double %229, %230
  %232 = load double, double* %z7, align 8, !tbaa !7
  %233 = fadd double %231, %232
  %234 = fsub double %226, %233
  %235 = fmul double -2.500000e-01, %234
  store double %235, double* %dzj, align 8, !tbaa !7
  %236 = load double, double* %x1, align 8, !tbaa !7
  %237 = load double, double* %x2, align 8, !tbaa !7
  %238 = fadd double %236, %237
  %239 = load double, double* %x6, align 8, !tbaa !7
  %240 = fadd double %238, %239
  %241 = load double, double* %x5, align 8, !tbaa !7
  %242 = fadd double %240, %241
  %243 = load double, double* %x0, align 8, !tbaa !7
  %244 = load double, double* %x3, align 8, !tbaa !7
  %245 = fadd double %243, %244
  %246 = load double, double* %x7, align 8, !tbaa !7
  %247 = fadd double %245, %246
  %248 = load double, double* %x4, align 8, !tbaa !7
  %249 = fadd double %247, %248
  %250 = fsub double %242, %249
  %251 = fmul double 2.500000e-01, %250
  store double %251, double* %dxi, align 8, !tbaa !7
  %252 = load double, double* %y1, align 8, !tbaa !7
  %253 = load double, double* %y2, align 8, !tbaa !7
  %254 = fadd double %252, %253
  %255 = load double, double* %y6, align 8, !tbaa !7
  %256 = fadd double %254, %255
  %257 = load double, double* %y5, align 8, !tbaa !7
  %258 = fadd double %256, %257
  %259 = load double, double* %y0, align 8, !tbaa !7
  %260 = load double, double* %y3, align 8, !tbaa !7
  %261 = fadd double %259, %260
  %262 = load double, double* %y7, align 8, !tbaa !7
  %263 = fadd double %261, %262
  %264 = load double, double* %y4, align 8, !tbaa !7
  %265 = fadd double %263, %264
  %266 = fsub double %258, %265
  %267 = fmul double 2.500000e-01, %266
  store double %267, double* %dyi, align 8, !tbaa !7
  %268 = load double, double* %z1, align 8, !tbaa !7
  %269 = load double, double* %z2, align 8, !tbaa !7
  %270 = fadd double %268, %269
  %271 = load double, double* %z6, align 8, !tbaa !7
  %272 = fadd double %270, %271
  %273 = load double, double* %z5, align 8, !tbaa !7
  %274 = fadd double %272, %273
  %275 = load double, double* %z0, align 8, !tbaa !7
  %276 = load double, double* %z3, align 8, !tbaa !7
  %277 = fadd double %275, %276
  %278 = load double, double* %z7, align 8, !tbaa !7
  %279 = fadd double %277, %278
  %280 = load double, double* %z4, align 8, !tbaa !7
  %281 = fadd double %279, %280
  %282 = fsub double %274, %281
  %283 = fmul double 2.500000e-01, %282
  store double %283, double* %dzi, align 8, !tbaa !7
  %284 = load double, double* %x4, align 8, !tbaa !7
  %285 = load double, double* %x5, align 8, !tbaa !7
  %286 = fadd double %284, %285
  %287 = load double, double* %x6, align 8, !tbaa !7
  %288 = fadd double %286, %287
  %289 = load double, double* %x7, align 8, !tbaa !7
  %290 = fadd double %288, %289
  %291 = load double, double* %x0, align 8, !tbaa !7
  %292 = load double, double* %x1, align 8, !tbaa !7
  %293 = fadd double %291, %292
  %294 = load double, double* %x2, align 8, !tbaa !7
  %295 = fadd double %293, %294
  %296 = load double, double* %x3, align 8, !tbaa !7
  %297 = fadd double %295, %296
  %298 = fsub double %290, %297
  %299 = fmul double 2.500000e-01, %298
  store double %299, double* %dxk, align 8, !tbaa !7
  %300 = load double, double* %y4, align 8, !tbaa !7
  %301 = load double, double* %y5, align 8, !tbaa !7
  %302 = fadd double %300, %301
  %303 = load double, double* %y6, align 8, !tbaa !7
  %304 = fadd double %302, %303
  %305 = load double, double* %y7, align 8, !tbaa !7
  %306 = fadd double %304, %305
  %307 = load double, double* %y0, align 8, !tbaa !7
  %308 = load double, double* %y1, align 8, !tbaa !7
  %309 = fadd double %307, %308
  %310 = load double, double* %y2, align 8, !tbaa !7
  %311 = fadd double %309, %310
  %312 = load double, double* %y3, align 8, !tbaa !7
  %313 = fadd double %311, %312
  %314 = fsub double %306, %313
  %315 = fmul double 2.500000e-01, %314
  store double %315, double* %dyk, align 8, !tbaa !7
  %316 = load double, double* %z4, align 8, !tbaa !7
  %317 = load double, double* %z5, align 8, !tbaa !7
  %318 = fadd double %316, %317
  %319 = load double, double* %z6, align 8, !tbaa !7
  %320 = fadd double %318, %319
  %321 = load double, double* %z7, align 8, !tbaa !7
  %322 = fadd double %320, %321
  %323 = load double, double* %z0, align 8, !tbaa !7
  %324 = load double, double* %z1, align 8, !tbaa !7
  %325 = fadd double %323, %324
  %326 = load double, double* %z2, align 8, !tbaa !7
  %327 = fadd double %325, %326
  %328 = load double, double* %z3, align 8, !tbaa !7
  %329 = fadd double %327, %328
  %330 = fsub double %322, %329
  %331 = fmul double 2.500000e-01, %330
  store double %331, double* %dzk, align 8, !tbaa !7
  %332 = load double, double* %dyi, align 8, !tbaa !7
  %333 = load double, double* %dzj, align 8, !tbaa !7
  %334 = fmul double %332, %333
  %335 = load double, double* %dzi, align 8, !tbaa !7
  %336 = load double, double* %dyj, align 8, !tbaa !7
  %337 = fmul double %335, %336
  %338 = fsub double %334, %337
  store double %338, double* %ax, align 8, !tbaa !7
  %339 = load double, double* %dzi, align 8, !tbaa !7
  %340 = load double, double* %dxj, align 8, !tbaa !7
  %341 = fmul double %339, %340
  %342 = load double, double* %dxi, align 8, !tbaa !7
  %343 = load double, double* %dzj, align 8, !tbaa !7
  %344 = fmul double %342, %343
  %345 = fsub double %341, %344
  store double %345, double* %ay, align 8, !tbaa !7
  %346 = load double, double* %dxi, align 8, !tbaa !7
  %347 = load double, double* %dyj, align 8, !tbaa !7
  %348 = fmul double %346, %347
  %349 = load double, double* %dyi, align 8, !tbaa !7
  %350 = load double, double* %dxj, align 8, !tbaa !7
  %351 = fmul double %349, %350
  %352 = fsub double %348, %351
  store double %352, double* %az, align 8, !tbaa !7
  %353 = load double, double* %vol, align 8, !tbaa !7
  %354 = load double, double* %ax, align 8, !tbaa !7
  %355 = load double, double* %ax, align 8, !tbaa !7
  %356 = fmul double %354, %355
  %357 = load double, double* %ay, align 8, !tbaa !7
  %358 = load double, double* %ay, align 8, !tbaa !7
  %359 = fmul double %357, %358
  %360 = fadd double %356, %359
  %361 = load double, double* %az, align 8, !tbaa !7
  %362 = load double, double* %az, align 8, !tbaa !7
  %363 = fmul double %361, %362
  %364 = fadd double %360, %363
  %365 = fadd double %364, 1.000000e-36
  %366 = call double @_Z4SQRTd(double %365)
  %367 = fdiv double %353, %366
  %368 = load i32, i32* %i, align 4, !tbaa !5
  %369 = call dereferenceable(8) double* @_ZN6Domain9delx_zetaEi(%struct.Domain* @domain, i32 %368)
  store double %367, double* %369, !tbaa !7
  %370 = load double, double* %norm, align 8, !tbaa !7
  %371 = load double, double* %ax, align 8, !tbaa !7
  %372 = fmul double %371, %370
  store double %372, double* %ax, align 8, !tbaa !7
  %373 = load double, double* %norm, align 8, !tbaa !7
  %374 = load double, double* %ay, align 8, !tbaa !7
  %375 = fmul double %374, %373
  store double %375, double* %ay, align 8, !tbaa !7
  %376 = load double, double* %norm, align 8, !tbaa !7
  %377 = load double, double* %az, align 8, !tbaa !7
  %378 = fmul double %377, %376
  store double %378, double* %az, align 8, !tbaa !7
  %379 = load double, double* %xv4, align 8, !tbaa !7
  %380 = load double, double* %xv5, align 8, !tbaa !7
  %381 = fadd double %379, %380
  %382 = load double, double* %xv6, align 8, !tbaa !7
  %383 = fadd double %381, %382
  %384 = load double, double* %xv7, align 8, !tbaa !7
  %385 = fadd double %383, %384
  %386 = load double, double* %xv0, align 8, !tbaa !7
  %387 = load double, double* %xv1, align 8, !tbaa !7
  %388 = fadd double %386, %387
  %389 = load double, double* %xv2, align 8, !tbaa !7
  %390 = fadd double %388, %389
  %391 = load double, double* %xv3, align 8, !tbaa !7
  %392 = fadd double %390, %391
  %393 = fsub double %385, %392
  %394 = fmul double 2.500000e-01, %393
  store double %394, double* %dxv, align 8, !tbaa !7
  %395 = load double, double* %yv4, align 8, !tbaa !7
  %396 = load double, double* %yv5, align 8, !tbaa !7
  %397 = fadd double %395, %396
  %398 = load double, double* %yv6, align 8, !tbaa !7
  %399 = fadd double %397, %398
  %400 = load double, double* %yv7, align 8, !tbaa !7
  %401 = fadd double %399, %400
  %402 = load double, double* %yv0, align 8, !tbaa !7
  %403 = load double, double* %yv1, align 8, !tbaa !7
  %404 = fadd double %402, %403
  %405 = load double, double* %yv2, align 8, !tbaa !7
  %406 = fadd double %404, %405
  %407 = load double, double* %yv3, align 8, !tbaa !7
  %408 = fadd double %406, %407
  %409 = fsub double %401, %408
  %410 = fmul double 2.500000e-01, %409
  store double %410, double* %dyv, align 8, !tbaa !7
  %411 = load double, double* %zv4, align 8, !tbaa !7
  %412 = load double, double* %zv5, align 8, !tbaa !7
  %413 = fadd double %411, %412
  %414 = load double, double* %zv6, align 8, !tbaa !7
  %415 = fadd double %413, %414
  %416 = load double, double* %zv7, align 8, !tbaa !7
  %417 = fadd double %415, %416
  %418 = load double, double* %zv0, align 8, !tbaa !7
  %419 = load double, double* %zv1, align 8, !tbaa !7
  %420 = fadd double %418, %419
  %421 = load double, double* %zv2, align 8, !tbaa !7
  %422 = fadd double %420, %421
  %423 = load double, double* %zv3, align 8, !tbaa !7
  %424 = fadd double %422, %423
  %425 = fsub double %417, %424
  %426 = fmul double 2.500000e-01, %425
  store double %426, double* %dzv, align 8, !tbaa !7
  %427 = load double, double* %ax, align 8, !tbaa !7
  %428 = load double, double* %dxv, align 8, !tbaa !7
  %429 = fmul double %427, %428
  %430 = load double, double* %ay, align 8, !tbaa !7
  %431 = load double, double* %dyv, align 8, !tbaa !7
  %432 = fmul double %430, %431
  %433 = fadd double %429, %432
  %434 = load double, double* %az, align 8, !tbaa !7
  %435 = load double, double* %dzv, align 8, !tbaa !7
  %436 = fmul double %434, %435
  %437 = fadd double %433, %436
  %438 = load i32, i32* %i, align 4, !tbaa !5
  %439 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %438)
  store double %437, double* %439, !tbaa !7
  %440 = load double, double* %dyj, align 8, !tbaa !7
  %441 = load double, double* %dzk, align 8, !tbaa !7
  %442 = fmul double %440, %441
  %443 = load double, double* %dzj, align 8, !tbaa !7
  %444 = load double, double* %dyk, align 8, !tbaa !7
  %445 = fmul double %443, %444
  %446 = fsub double %442, %445
  store double %446, double* %ax, align 8, !tbaa !7
  %447 = load double, double* %dzj, align 8, !tbaa !7
  %448 = load double, double* %dxk, align 8, !tbaa !7
  %449 = fmul double %447, %448
  %450 = load double, double* %dxj, align 8, !tbaa !7
  %451 = load double, double* %dzk, align 8, !tbaa !7
  %452 = fmul double %450, %451
  %453 = fsub double %449, %452
  store double %453, double* %ay, align 8, !tbaa !7
  %454 = load double, double* %dxj, align 8, !tbaa !7
  %455 = load double, double* %dyk, align 8, !tbaa !7
  %456 = fmul double %454, %455
  %457 = load double, double* %dyj, align 8, !tbaa !7
  %458 = load double, double* %dxk, align 8, !tbaa !7
  %459 = fmul double %457, %458
  %460 = fsub double %456, %459
  store double %460, double* %az, align 8, !tbaa !7
  %461 = load double, double* %vol, align 8, !tbaa !7
  %462 = load double, double* %ax, align 8, !tbaa !7
  %463 = load double, double* %ax, align 8, !tbaa !7
  %464 = fmul double %462, %463
  %465 = load double, double* %ay, align 8, !tbaa !7
  %466 = load double, double* %ay, align 8, !tbaa !7
  %467 = fmul double %465, %466
  %468 = fadd double %464, %467
  %469 = load double, double* %az, align 8, !tbaa !7
  %470 = load double, double* %az, align 8, !tbaa !7
  %471 = fmul double %469, %470
  %472 = fadd double %468, %471
  %473 = fadd double %472, 1.000000e-36
  %474 = call double @_Z4SQRTd(double %473)
  %475 = fdiv double %461, %474
  %476 = load i32, i32* %i, align 4, !tbaa !5
  %477 = call dereferenceable(8) double* @_ZN6Domain7delx_xiEi(%struct.Domain* @domain, i32 %476)
  store double %475, double* %477, !tbaa !7
  %478 = load double, double* %norm, align 8, !tbaa !7
  %479 = load double, double* %ax, align 8, !tbaa !7
  %480 = fmul double %479, %478
  store double %480, double* %ax, align 8, !tbaa !7
  %481 = load double, double* %norm, align 8, !tbaa !7
  %482 = load double, double* %ay, align 8, !tbaa !7
  %483 = fmul double %482, %481
  store double %483, double* %ay, align 8, !tbaa !7
  %484 = load double, double* %norm, align 8, !tbaa !7
  %485 = load double, double* %az, align 8, !tbaa !7
  %486 = fmul double %485, %484
  store double %486, double* %az, align 8, !tbaa !7
  %487 = load double, double* %xv1, align 8, !tbaa !7
  %488 = load double, double* %xv2, align 8, !tbaa !7
  %489 = fadd double %487, %488
  %490 = load double, double* %xv6, align 8, !tbaa !7
  %491 = fadd double %489, %490
  %492 = load double, double* %xv5, align 8, !tbaa !7
  %493 = fadd double %491, %492
  %494 = load double, double* %xv0, align 8, !tbaa !7
  %495 = load double, double* %xv3, align 8, !tbaa !7
  %496 = fadd double %494, %495
  %497 = load double, double* %xv7, align 8, !tbaa !7
  %498 = fadd double %496, %497
  %499 = load double, double* %xv4, align 8, !tbaa !7
  %500 = fadd double %498, %499
  %501 = fsub double %493, %500
  %502 = fmul double 2.500000e-01, %501
  store double %502, double* %dxv, align 8, !tbaa !7
  %503 = load double, double* %yv1, align 8, !tbaa !7
  %504 = load double, double* %yv2, align 8, !tbaa !7
  %505 = fadd double %503, %504
  %506 = load double, double* %yv6, align 8, !tbaa !7
  %507 = fadd double %505, %506
  %508 = load double, double* %yv5, align 8, !tbaa !7
  %509 = fadd double %507, %508
  %510 = load double, double* %yv0, align 8, !tbaa !7
  %511 = load double, double* %yv3, align 8, !tbaa !7
  %512 = fadd double %510, %511
  %513 = load double, double* %yv7, align 8, !tbaa !7
  %514 = fadd double %512, %513
  %515 = load double, double* %yv4, align 8, !tbaa !7
  %516 = fadd double %514, %515
  %517 = fsub double %509, %516
  %518 = fmul double 2.500000e-01, %517
  store double %518, double* %dyv, align 8, !tbaa !7
  %519 = load double, double* %zv1, align 8, !tbaa !7
  %520 = load double, double* %zv2, align 8, !tbaa !7
  %521 = fadd double %519, %520
  %522 = load double, double* %zv6, align 8, !tbaa !7
  %523 = fadd double %521, %522
  %524 = load double, double* %zv5, align 8, !tbaa !7
  %525 = fadd double %523, %524
  %526 = load double, double* %zv0, align 8, !tbaa !7
  %527 = load double, double* %zv3, align 8, !tbaa !7
  %528 = fadd double %526, %527
  %529 = load double, double* %zv7, align 8, !tbaa !7
  %530 = fadd double %528, %529
  %531 = load double, double* %zv4, align 8, !tbaa !7
  %532 = fadd double %530, %531
  %533 = fsub double %525, %532
  %534 = fmul double 2.500000e-01, %533
  store double %534, double* %dzv, align 8, !tbaa !7
  %535 = load double, double* %ax, align 8, !tbaa !7
  %536 = load double, double* %dxv, align 8, !tbaa !7
  %537 = fmul double %535, %536
  %538 = load double, double* %ay, align 8, !tbaa !7
  %539 = load double, double* %dyv, align 8, !tbaa !7
  %540 = fmul double %538, %539
  %541 = fadd double %537, %540
  %542 = load double, double* %az, align 8, !tbaa !7
  %543 = load double, double* %dzv, align 8, !tbaa !7
  %544 = fmul double %542, %543
  %545 = fadd double %541, %544
  %546 = load i32, i32* %i, align 4, !tbaa !5
  %547 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %546)
  store double %545, double* %547, !tbaa !7
  %548 = load double, double* %dyk, align 8, !tbaa !7
  %549 = load double, double* %dzi, align 8, !tbaa !7
  %550 = fmul double %548, %549
  %551 = load double, double* %dzk, align 8, !tbaa !7
  %552 = load double, double* %dyi, align 8, !tbaa !7
  %553 = fmul double %551, %552
  %554 = fsub double %550, %553
  store double %554, double* %ax, align 8, !tbaa !7
  %555 = load double, double* %dzk, align 8, !tbaa !7
  %556 = load double, double* %dxi, align 8, !tbaa !7
  %557 = fmul double %555, %556
  %558 = load double, double* %dxk, align 8, !tbaa !7
  %559 = load double, double* %dzi, align 8, !tbaa !7
  %560 = fmul double %558, %559
  %561 = fsub double %557, %560
  store double %561, double* %ay, align 8, !tbaa !7
  %562 = load double, double* %dxk, align 8, !tbaa !7
  %563 = load double, double* %dyi, align 8, !tbaa !7
  %564 = fmul double %562, %563
  %565 = load double, double* %dyk, align 8, !tbaa !7
  %566 = load double, double* %dxi, align 8, !tbaa !7
  %567 = fmul double %565, %566
  %568 = fsub double %564, %567
  store double %568, double* %az, align 8, !tbaa !7
  %569 = load double, double* %vol, align 8, !tbaa !7
  %570 = load double, double* %ax, align 8, !tbaa !7
  %571 = load double, double* %ax, align 8, !tbaa !7
  %572 = fmul double %570, %571
  %573 = load double, double* %ay, align 8, !tbaa !7
  %574 = load double, double* %ay, align 8, !tbaa !7
  %575 = fmul double %573, %574
  %576 = fadd double %572, %575
  %577 = load double, double* %az, align 8, !tbaa !7
  %578 = load double, double* %az, align 8, !tbaa !7
  %579 = fmul double %577, %578
  %580 = fadd double %576, %579
  %581 = fadd double %580, 1.000000e-36
  %582 = call double @_Z4SQRTd(double %581)
  %583 = fdiv double %569, %582
  %584 = load i32, i32* %i, align 4, !tbaa !5
  %585 = call dereferenceable(8) double* @_ZN6Domain8delx_etaEi(%struct.Domain* @domain, i32 %584)
  store double %583, double* %585, !tbaa !7
  %586 = load double, double* %norm, align 8, !tbaa !7
  %587 = load double, double* %ax, align 8, !tbaa !7
  %588 = fmul double %587, %586
  store double %588, double* %ax, align 8, !tbaa !7
  %589 = load double, double* %norm, align 8, !tbaa !7
  %590 = load double, double* %ay, align 8, !tbaa !7
  %591 = fmul double %590, %589
  store double %591, double* %ay, align 8, !tbaa !7
  %592 = load double, double* %norm, align 8, !tbaa !7
  %593 = load double, double* %az, align 8, !tbaa !7
  %594 = fmul double %593, %592
  store double %594, double* %az, align 8, !tbaa !7
  %595 = load double, double* %xv0, align 8, !tbaa !7
  %596 = load double, double* %xv1, align 8, !tbaa !7
  %597 = fadd double %595, %596
  %598 = load double, double* %xv5, align 8, !tbaa !7
  %599 = fadd double %597, %598
  %600 = load double, double* %xv4, align 8, !tbaa !7
  %601 = fadd double %599, %600
  %602 = load double, double* %xv3, align 8, !tbaa !7
  %603 = load double, double* %xv2, align 8, !tbaa !7
  %604 = fadd double %602, %603
  %605 = load double, double* %xv6, align 8, !tbaa !7
  %606 = fadd double %604, %605
  %607 = load double, double* %xv7, align 8, !tbaa !7
  %608 = fadd double %606, %607
  %609 = fsub double %601, %608
  %610 = fmul double -2.500000e-01, %609
  store double %610, double* %dxv, align 8, !tbaa !7
  %611 = load double, double* %yv0, align 8, !tbaa !7
  %612 = load double, double* %yv1, align 8, !tbaa !7
  %613 = fadd double %611, %612
  %614 = load double, double* %yv5, align 8, !tbaa !7
  %615 = fadd double %613, %614
  %616 = load double, double* %yv4, align 8, !tbaa !7
  %617 = fadd double %615, %616
  %618 = load double, double* %yv3, align 8, !tbaa !7
  %619 = load double, double* %yv2, align 8, !tbaa !7
  %620 = fadd double %618, %619
  %621 = load double, double* %yv6, align 8, !tbaa !7
  %622 = fadd double %620, %621
  %623 = load double, double* %yv7, align 8, !tbaa !7
  %624 = fadd double %622, %623
  %625 = fsub double %617, %624
  %626 = fmul double -2.500000e-01, %625
  store double %626, double* %dyv, align 8, !tbaa !7
  %627 = load double, double* %zv0, align 8, !tbaa !7
  %628 = load double, double* %zv1, align 8, !tbaa !7
  %629 = fadd double %627, %628
  %630 = load double, double* %zv5, align 8, !tbaa !7
  %631 = fadd double %629, %630
  %632 = load double, double* %zv4, align 8, !tbaa !7
  %633 = fadd double %631, %632
  %634 = load double, double* %zv3, align 8, !tbaa !7
  %635 = load double, double* %zv2, align 8, !tbaa !7
  %636 = fadd double %634, %635
  %637 = load double, double* %zv6, align 8, !tbaa !7
  %638 = fadd double %636, %637
  %639 = load double, double* %zv7, align 8, !tbaa !7
  %640 = fadd double %638, %639
  %641 = fsub double %633, %640
  %642 = fmul double -2.500000e-01, %641
  store double %642, double* %dzv, align 8, !tbaa !7
  %643 = load double, double* %ax, align 8, !tbaa !7
  %644 = load double, double* %dxv, align 8, !tbaa !7
  %645 = fmul double %643, %644
  %646 = load double, double* %ay, align 8, !tbaa !7
  %647 = load double, double* %dyv, align 8, !tbaa !7
  %648 = fmul double %646, %647
  %649 = fadd double %645, %648
  %650 = load double, double* %az, align 8, !tbaa !7
  %651 = load double, double* %dzv, align 8, !tbaa !7
  %652 = fmul double %650, %651
  %653 = fadd double %649, %652
  %654 = load i32, i32* %i, align 4, !tbaa !5
  %655 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %654)
  store double %653, double* %655, !tbaa !7
  br label %656

; <label>:656                                     ; preds = %7
  %657 = load i32, i32* %i, align 4, !tbaa !5
  %658 = add nsw i32 %657, 1
  store i32 %658, i32* %i, align 4, !tbaa !5
  br label %3

; <label>:659                                     ; preds = %3
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL22CalcMonotonicQForElemsv() #0 {
  %ptiny = alloca double, align 8
  %monoq_max_slope = alloca double, align 8
  %monoq_limiter_mult = alloca double, align 8
  %elength = alloca i32, align 4
  %qlc_monoq = alloca double, align 8
  %qqc_monoq = alloca double, align 8
  store double 1.000000e-36, double* %ptiny, align 8, !tbaa !7
  %1 = call dereferenceable(8) double* @_ZN6Domain15monoq_max_slopeEv(%struct.Domain* @domain)
  %2 = load double, double* %1, !tbaa !7
  store double %2, double* %monoq_max_slope, align 8, !tbaa !7
  %3 = call dereferenceable(8) double* @_ZN6Domain18monoq_limiter_multEv(%struct.Domain* @domain)
  %4 = load double, double* %3, !tbaa !7
  store double %4, double* %monoq_limiter_mult, align 8, !tbaa !7
  %5 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %6 = load i32, i32* %5, !tbaa !5
  store i32 %6, i32* %elength, align 4, !tbaa !5
  %7 = load i32, i32* %elength, align 4, !tbaa !5
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %19

; <label>:9                                       ; preds = %0
  %10 = call dereferenceable(8) double* @_ZN6Domain9qlc_monoqEv(%struct.Domain* @domain)
  %11 = load double, double* %10, !tbaa !7
  store double %11, double* %qlc_monoq, align 8, !tbaa !7
  %12 = call dereferenceable(8) double* @_ZN6Domain9qqc_monoqEv(%struct.Domain* @domain)
  %13 = load double, double* %12, !tbaa !7
  store double %13, double* %qqc_monoq, align 8, !tbaa !7
  %14 = load double, double* %qlc_monoq, align 8, !tbaa !7
  %15 = load double, double* %qqc_monoq, align 8, !tbaa !7
  %16 = load double, double* %monoq_limiter_mult, align 8, !tbaa !7
  %17 = load double, double* %monoq_max_slope, align 8, !tbaa !7
  %18 = load i32, i32* %elength, align 4, !tbaa !5
  call void @_ZL28CalcMonotonicQRegionForElemsdddddi(double %14, double %15, double %16, double %17, double 1.000000e-36, i32 %18)
  br label %19

; <label>:19                                      ; preds = %9, %0
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9delx_zetaEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 36
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 33
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7delx_xiEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 34
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 31
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain8delx_etaEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 35
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 32
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL28CalcMonotonicQRegionForElemsdddddi(double %qlc_monoq, double %qqc_monoq, double %monoq_limiter_mult, double %monoq_max_slope, double %ptiny, i32 %elength) #0 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca i32, align 4
  %ielem = alloca i32, align 4
  %qlin = alloca double, align 8
  %qquad = alloca double, align 8
  %phixi = alloca double, align 8
  %phieta = alloca double, align 8
  %phizeta = alloca double, align 8
  %i = alloca i32, align 4
  %bcMask = alloca i32, align 4
  %delvm = alloca double, align 8
  %delvp = alloca double, align 8
  %norm = alloca double, align 8
  %delvxxi = alloca double, align 8
  %delvxeta = alloca double, align 8
  %delvxzeta = alloca double, align 8
  %rho = alloca double, align 8
  store double %qlc_monoq, double* %1, align 8, !tbaa !7
  store double %qqc_monoq, double* %2, align 8, !tbaa !7
  store double %monoq_limiter_mult, double* %3, align 8, !tbaa !7
  store double %monoq_max_slope, double* %4, align 8, !tbaa !7
  store double %ptiny, double* %5, align 8, !tbaa !7
  store i32 %elength, i32* %6, align 4, !tbaa !5
  store i32 0, i32* %ielem, align 4, !tbaa !5
  br label %7

; <label>:7                                       ; preds = %346, %0
  %8 = load i32, i32* %ielem, align 4, !tbaa !5
  %9 = load i32, i32* %6, align 4, !tbaa !5
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %349

; <label>:11                                      ; preds = %7
  %12 = load i32, i32* %ielem, align 4, !tbaa !5
  %13 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %12)
  %14 = load i32, i32* %13, !tbaa !5
  store i32 %14, i32* %i, align 4, !tbaa !5
  %15 = load i32, i32* %i, align 4, !tbaa !5
  %16 = call dereferenceable(4) i32* @_ZN6Domain6elemBCEi(%struct.Domain* @domain, i32 %15)
  %17 = load i32, i32* %16, !tbaa !5
  store i32 %17, i32* %bcMask, align 4, !tbaa !5
  %18 = load i32, i32* %i, align 4, !tbaa !5
  %19 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %18)
  %20 = load double, double* %19, !tbaa !7
  %21 = load double, double* %5, align 8, !tbaa !7
  %22 = fadd double %20, %21
  %23 = fdiv double 1.000000e+00, %22
  store double %23, double* %norm, align 8, !tbaa !7
  %24 = load i32, i32* %bcMask, align 4, !tbaa !5
  %25 = and i32 %24, 3
  switch i32 %25, label %37 [
    i32 0, label %26
    i32 1, label %32
    i32 2, label %36
  ]

; <label>:26                                      ; preds = %11
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %28 = call dereferenceable(4) i32* @_ZN6Domain4lximEi(%struct.Domain* @domain, i32 %27)
  %29 = load i32, i32* %28, !tbaa !5
  %30 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %29)
  %31 = load double, double* %30, !tbaa !7
  store double %31, double* %delvm, align 8, !tbaa !7
  br label %38

; <label>:32                                      ; preds = %11
  %33 = load i32, i32* %i, align 4, !tbaa !5
  %34 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %33)
  %35 = load double, double* %34, !tbaa !7
  store double %35, double* %delvm, align 8, !tbaa !7
  br label %38

; <label>:36                                      ; preds = %11
  store double 0.000000e+00, double* %delvm, align 8, !tbaa !7
  br label %38

; <label>:37                                      ; preds = %11
  br label %38

; <label>:38                                      ; preds = %37, %36, %32, %26
  %39 = load i32, i32* %bcMask, align 4, !tbaa !5
  %40 = and i32 %39, 12
  switch i32 %40, label %52 [
    i32 0, label %41
    i32 4, label %47
    i32 8, label %51
  ]

; <label>:41                                      ; preds = %38
  %42 = load i32, i32* %i, align 4, !tbaa !5
  %43 = call dereferenceable(4) i32* @_ZN6Domain4lxipEi(%struct.Domain* @domain, i32 %42)
  %44 = load i32, i32* %43, !tbaa !5
  %45 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %44)
  %46 = load double, double* %45, !tbaa !7
  store double %46, double* %delvp, align 8, !tbaa !7
  br label %53

; <label>:47                                      ; preds = %38
  %48 = load i32, i32* %i, align 4, !tbaa !5
  %49 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %48)
  %50 = load double, double* %49, !tbaa !7
  store double %50, double* %delvp, align 8, !tbaa !7
  br label %53

; <label>:51                                      ; preds = %38
  store double 0.000000e+00, double* %delvp, align 8, !tbaa !7
  br label %53

; <label>:52                                      ; preds = %38
  br label %53

; <label>:53                                      ; preds = %52, %51, %47, %41
  %54 = load double, double* %delvm, align 8, !tbaa !7
  %55 = load double, double* %norm, align 8, !tbaa !7
  %56 = fmul double %54, %55
  store double %56, double* %delvm, align 8, !tbaa !7
  %57 = load double, double* %delvp, align 8, !tbaa !7
  %58 = load double, double* %norm, align 8, !tbaa !7
  %59 = fmul double %57, %58
  store double %59, double* %delvp, align 8, !tbaa !7
  %60 = load double, double* %delvm, align 8, !tbaa !7
  %61 = load double, double* %delvp, align 8, !tbaa !7
  %62 = fadd double %60, %61
  %63 = fmul double 5.000000e-01, %62
  store double %63, double* %phixi, align 8, !tbaa !7
  %64 = load double, double* %3, align 8, !tbaa !7
  %65 = load double, double* %delvm, align 8, !tbaa !7
  %66 = fmul double %65, %64
  store double %66, double* %delvm, align 8, !tbaa !7
  %67 = load double, double* %3, align 8, !tbaa !7
  %68 = load double, double* %delvp, align 8, !tbaa !7
  %69 = fmul double %68, %67
  store double %69, double* %delvp, align 8, !tbaa !7
  %70 = load double, double* %delvm, align 8, !tbaa !7
  %71 = load double, double* %phixi, align 8, !tbaa !7
  %72 = fcmp olt double %70, %71
  br i1 %72, label %73, label %75

; <label>:73                                      ; preds = %53
  %74 = load double, double* %delvm, align 8, !tbaa !7
  store double %74, double* %phixi, align 8, !tbaa !7
  br label %75

; <label>:75                                      ; preds = %73, %53
  %76 = load double, double* %delvp, align 8, !tbaa !7
  %77 = load double, double* %phixi, align 8, !tbaa !7
  %78 = fcmp olt double %76, %77
  br i1 %78, label %79, label %81

; <label>:79                                      ; preds = %75
  %80 = load double, double* %delvp, align 8, !tbaa !7
  store double %80, double* %phixi, align 8, !tbaa !7
  br label %81

; <label>:81                                      ; preds = %79, %75
  %82 = load double, double* %phixi, align 8, !tbaa !7
  %83 = fcmp olt double %82, 0.000000e+00
  br i1 %83, label %84, label %85

; <label>:84                                      ; preds = %81
  store double 0.000000e+00, double* %phixi, align 8, !tbaa !7
  br label %85

; <label>:85                                      ; preds = %84, %81
  %86 = load double, double* %phixi, align 8, !tbaa !7
  %87 = load double, double* %4, align 8, !tbaa !7
  %88 = fcmp ogt double %86, %87
  br i1 %88, label %89, label %91

; <label>:89                                      ; preds = %85
  %90 = load double, double* %4, align 8, !tbaa !7
  store double %90, double* %phixi, align 8, !tbaa !7
  br label %91

; <label>:91                                      ; preds = %89, %85
  %92 = load i32, i32* %i, align 4, !tbaa !5
  %93 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %92)
  %94 = load double, double* %93, !tbaa !7
  %95 = load double, double* %5, align 8, !tbaa !7
  %96 = fadd double %94, %95
  %97 = fdiv double 1.000000e+00, %96
  store double %97, double* %norm, align 8, !tbaa !7
  %98 = load i32, i32* %bcMask, align 4, !tbaa !5
  %99 = and i32 %98, 48
  switch i32 %99, label %111 [
    i32 0, label %100
    i32 16, label %106
    i32 32, label %110
  ]

; <label>:100                                     ; preds = %91
  %101 = load i32, i32* %i, align 4, !tbaa !5
  %102 = call dereferenceable(4) i32* @_ZN6Domain5letamEi(%struct.Domain* @domain, i32 %101)
  %103 = load i32, i32* %102, !tbaa !5
  %104 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %103)
  %105 = load double, double* %104, !tbaa !7
  store double %105, double* %delvm, align 8, !tbaa !7
  br label %112

; <label>:106                                     ; preds = %91
  %107 = load i32, i32* %i, align 4, !tbaa !5
  %108 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %107)
  %109 = load double, double* %108, !tbaa !7
  store double %109, double* %delvm, align 8, !tbaa !7
  br label %112

; <label>:110                                     ; preds = %91
  store double 0.000000e+00, double* %delvm, align 8, !tbaa !7
  br label %112

; <label>:111                                     ; preds = %91
  br label %112

; <label>:112                                     ; preds = %111, %110, %106, %100
  %113 = load i32, i32* %bcMask, align 4, !tbaa !5
  %114 = and i32 %113, 192
  switch i32 %114, label %126 [
    i32 0, label %115
    i32 64, label %121
    i32 128, label %125
  ]

; <label>:115                                     ; preds = %112
  %116 = load i32, i32* %i, align 4, !tbaa !5
  %117 = call dereferenceable(4) i32* @_ZN6Domain5letapEi(%struct.Domain* @domain, i32 %116)
  %118 = load i32, i32* %117, !tbaa !5
  %119 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %118)
  %120 = load double, double* %119, !tbaa !7
  store double %120, double* %delvp, align 8, !tbaa !7
  br label %127

; <label>:121                                     ; preds = %112
  %122 = load i32, i32* %i, align 4, !tbaa !5
  %123 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %122)
  %124 = load double, double* %123, !tbaa !7
  store double %124, double* %delvp, align 8, !tbaa !7
  br label %127

; <label>:125                                     ; preds = %112
  store double 0.000000e+00, double* %delvp, align 8, !tbaa !7
  br label %127

; <label>:126                                     ; preds = %112
  br label %127

; <label>:127                                     ; preds = %126, %125, %121, %115
  %128 = load double, double* %delvm, align 8, !tbaa !7
  %129 = load double, double* %norm, align 8, !tbaa !7
  %130 = fmul double %128, %129
  store double %130, double* %delvm, align 8, !tbaa !7
  %131 = load double, double* %delvp, align 8, !tbaa !7
  %132 = load double, double* %norm, align 8, !tbaa !7
  %133 = fmul double %131, %132
  store double %133, double* %delvp, align 8, !tbaa !7
  %134 = load double, double* %delvm, align 8, !tbaa !7
  %135 = load double, double* %delvp, align 8, !tbaa !7
  %136 = fadd double %134, %135
  %137 = fmul double 5.000000e-01, %136
  store double %137, double* %phieta, align 8, !tbaa !7
  %138 = load double, double* %3, align 8, !tbaa !7
  %139 = load double, double* %delvm, align 8, !tbaa !7
  %140 = fmul double %139, %138
  store double %140, double* %delvm, align 8, !tbaa !7
  %141 = load double, double* %3, align 8, !tbaa !7
  %142 = load double, double* %delvp, align 8, !tbaa !7
  %143 = fmul double %142, %141
  store double %143, double* %delvp, align 8, !tbaa !7
  %144 = load double, double* %delvm, align 8, !tbaa !7
  %145 = load double, double* %phieta, align 8, !tbaa !7
  %146 = fcmp olt double %144, %145
  br i1 %146, label %147, label %149

; <label>:147                                     ; preds = %127
  %148 = load double, double* %delvm, align 8, !tbaa !7
  store double %148, double* %phieta, align 8, !tbaa !7
  br label %149

; <label>:149                                     ; preds = %147, %127
  %150 = load double, double* %delvp, align 8, !tbaa !7
  %151 = load double, double* %phieta, align 8, !tbaa !7
  %152 = fcmp olt double %150, %151
  br i1 %152, label %153, label %155

; <label>:153                                     ; preds = %149
  %154 = load double, double* %delvp, align 8, !tbaa !7
  store double %154, double* %phieta, align 8, !tbaa !7
  br label %155

; <label>:155                                     ; preds = %153, %149
  %156 = load double, double* %phieta, align 8, !tbaa !7
  %157 = fcmp olt double %156, 0.000000e+00
  br i1 %157, label %158, label %159

; <label>:158                                     ; preds = %155
  store double 0.000000e+00, double* %phieta, align 8, !tbaa !7
  br label %159

; <label>:159                                     ; preds = %158, %155
  %160 = load double, double* %phieta, align 8, !tbaa !7
  %161 = load double, double* %4, align 8, !tbaa !7
  %162 = fcmp ogt double %160, %161
  br i1 %162, label %163, label %165

; <label>:163                                     ; preds = %159
  %164 = load double, double* %4, align 8, !tbaa !7
  store double %164, double* %phieta, align 8, !tbaa !7
  br label %165

; <label>:165                                     ; preds = %163, %159
  %166 = load i32, i32* %i, align 4, !tbaa !5
  %167 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %166)
  %168 = load double, double* %167, !tbaa !7
  %169 = load double, double* %5, align 8, !tbaa !7
  %170 = fadd double %168, %169
  %171 = fdiv double 1.000000e+00, %170
  store double %171, double* %norm, align 8, !tbaa !7
  %172 = load i32, i32* %bcMask, align 4, !tbaa !5
  %173 = and i32 %172, 768
  switch i32 %173, label %185 [
    i32 0, label %174
    i32 256, label %180
    i32 512, label %184
  ]

; <label>:174                                     ; preds = %165
  %175 = load i32, i32* %i, align 4, !tbaa !5
  %176 = call dereferenceable(4) i32* @_ZN6Domain6lzetamEi(%struct.Domain* @domain, i32 %175)
  %177 = load i32, i32* %176, !tbaa !5
  %178 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %177)
  %179 = load double, double* %178, !tbaa !7
  store double %179, double* %delvm, align 8, !tbaa !7
  br label %186

; <label>:180                                     ; preds = %165
  %181 = load i32, i32* %i, align 4, !tbaa !5
  %182 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %181)
  %183 = load double, double* %182, !tbaa !7
  store double %183, double* %delvm, align 8, !tbaa !7
  br label %186

; <label>:184                                     ; preds = %165
  store double 0.000000e+00, double* %delvm, align 8, !tbaa !7
  br label %186

; <label>:185                                     ; preds = %165
  br label %186

; <label>:186                                     ; preds = %185, %184, %180, %174
  %187 = load i32, i32* %bcMask, align 4, !tbaa !5
  %188 = and i32 %187, 3072
  switch i32 %188, label %200 [
    i32 0, label %189
    i32 1024, label %195
    i32 2048, label %199
  ]

; <label>:189                                     ; preds = %186
  %190 = load i32, i32* %i, align 4, !tbaa !5
  %191 = call dereferenceable(4) i32* @_ZN6Domain6lzetapEi(%struct.Domain* @domain, i32 %190)
  %192 = load i32, i32* %191, !tbaa !5
  %193 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %192)
  %194 = load double, double* %193, !tbaa !7
  store double %194, double* %delvp, align 8, !tbaa !7
  br label %201

; <label>:195                                     ; preds = %186
  %196 = load i32, i32* %i, align 4, !tbaa !5
  %197 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %196)
  %198 = load double, double* %197, !tbaa !7
  store double %198, double* %delvp, align 8, !tbaa !7
  br label %201

; <label>:199                                     ; preds = %186
  store double 0.000000e+00, double* %delvp, align 8, !tbaa !7
  br label %201

; <label>:200                                     ; preds = %186
  br label %201

; <label>:201                                     ; preds = %200, %199, %195, %189
  %202 = load double, double* %delvm, align 8, !tbaa !7
  %203 = load double, double* %norm, align 8, !tbaa !7
  %204 = fmul double %202, %203
  store double %204, double* %delvm, align 8, !tbaa !7
  %205 = load double, double* %delvp, align 8, !tbaa !7
  %206 = load double, double* %norm, align 8, !tbaa !7
  %207 = fmul double %205, %206
  store double %207, double* %delvp, align 8, !tbaa !7
  %208 = load double, double* %delvm, align 8, !tbaa !7
  %209 = load double, double* %delvp, align 8, !tbaa !7
  %210 = fadd double %208, %209
  %211 = fmul double 5.000000e-01, %210
  store double %211, double* %phizeta, align 8, !tbaa !7
  %212 = load double, double* %3, align 8, !tbaa !7
  %213 = load double, double* %delvm, align 8, !tbaa !7
  %214 = fmul double %213, %212
  store double %214, double* %delvm, align 8, !tbaa !7
  %215 = load double, double* %3, align 8, !tbaa !7
  %216 = load double, double* %delvp, align 8, !tbaa !7
  %217 = fmul double %216, %215
  store double %217, double* %delvp, align 8, !tbaa !7
  %218 = load double, double* %delvm, align 8, !tbaa !7
  %219 = load double, double* %phizeta, align 8, !tbaa !7
  %220 = fcmp olt double %218, %219
  br i1 %220, label %221, label %223

; <label>:221                                     ; preds = %201
  %222 = load double, double* %delvm, align 8, !tbaa !7
  store double %222, double* %phizeta, align 8, !tbaa !7
  br label %223

; <label>:223                                     ; preds = %221, %201
  %224 = load double, double* %delvp, align 8, !tbaa !7
  %225 = load double, double* %phizeta, align 8, !tbaa !7
  %226 = fcmp olt double %224, %225
  br i1 %226, label %227, label %229

; <label>:227                                     ; preds = %223
  %228 = load double, double* %delvp, align 8, !tbaa !7
  store double %228, double* %phizeta, align 8, !tbaa !7
  br label %229

; <label>:229                                     ; preds = %227, %223
  %230 = load double, double* %phizeta, align 8, !tbaa !7
  %231 = fcmp olt double %230, 0.000000e+00
  br i1 %231, label %232, label %233

; <label>:232                                     ; preds = %229
  store double 0.000000e+00, double* %phizeta, align 8, !tbaa !7
  br label %233

; <label>:233                                     ; preds = %232, %229
  %234 = load double, double* %phizeta, align 8, !tbaa !7
  %235 = load double, double* %4, align 8, !tbaa !7
  %236 = fcmp ogt double %234, %235
  br i1 %236, label %237, label %239

; <label>:237                                     ; preds = %233
  %238 = load double, double* %4, align 8, !tbaa !7
  store double %238, double* %phizeta, align 8, !tbaa !7
  br label %239

; <label>:239                                     ; preds = %237, %233
  %240 = load i32, i32* %i, align 4, !tbaa !5
  %241 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %240)
  %242 = load double, double* %241, !tbaa !7
  %243 = fcmp ogt double %242, 0.000000e+00
  br i1 %243, label %244, label %245

; <label>:244                                     ; preds = %239
  store double 0.000000e+00, double* %qlin, align 8, !tbaa !7
  store double 0.000000e+00, double* %qquad, align 8, !tbaa !7
  br label %339

; <label>:245                                     ; preds = %239
  %246 = load i32, i32* %i, align 4, !tbaa !5
  %247 = call dereferenceable(8) double* @_ZN6Domain7delv_xiEi(%struct.Domain* @domain, i32 %246)
  %248 = load double, double* %247, !tbaa !7
  %249 = load i32, i32* %i, align 4, !tbaa !5
  %250 = call dereferenceable(8) double* @_ZN6Domain7delx_xiEi(%struct.Domain* @domain, i32 %249)
  %251 = load double, double* %250, !tbaa !7
  %252 = fmul double %248, %251
  store double %252, double* %delvxxi, align 8, !tbaa !7
  %253 = load i32, i32* %i, align 4, !tbaa !5
  %254 = call dereferenceable(8) double* @_ZN6Domain8delv_etaEi(%struct.Domain* @domain, i32 %253)
  %255 = load double, double* %254, !tbaa !7
  %256 = load i32, i32* %i, align 4, !tbaa !5
  %257 = call dereferenceable(8) double* @_ZN6Domain8delx_etaEi(%struct.Domain* @domain, i32 %256)
  %258 = load double, double* %257, !tbaa !7
  %259 = fmul double %255, %258
  store double %259, double* %delvxeta, align 8, !tbaa !7
  %260 = load i32, i32* %i, align 4, !tbaa !5
  %261 = call dereferenceable(8) double* @_ZN6Domain9delv_zetaEi(%struct.Domain* @domain, i32 %260)
  %262 = load double, double* %261, !tbaa !7
  %263 = load i32, i32* %i, align 4, !tbaa !5
  %264 = call dereferenceable(8) double* @_ZN6Domain9delx_zetaEi(%struct.Domain* @domain, i32 %263)
  %265 = load double, double* %264, !tbaa !7
  %266 = fmul double %262, %265
  store double %266, double* %delvxzeta, align 8, !tbaa !7
  %267 = load double, double* %delvxxi, align 8, !tbaa !7
  %268 = fcmp ogt double %267, 0.000000e+00
  br i1 %268, label %269, label %270

; <label>:269                                     ; preds = %245
  store double 0.000000e+00, double* %delvxxi, align 8, !tbaa !7
  br label %270

; <label>:270                                     ; preds = %269, %245
  %271 = load double, double* %delvxeta, align 8, !tbaa !7
  %272 = fcmp ogt double %271, 0.000000e+00
  br i1 %272, label %273, label %274

; <label>:273                                     ; preds = %270
  store double 0.000000e+00, double* %delvxeta, align 8, !tbaa !7
  br label %274

; <label>:274                                     ; preds = %273, %270
  %275 = load double, double* %delvxzeta, align 8, !tbaa !7
  %276 = fcmp ogt double %275, 0.000000e+00
  br i1 %276, label %277, label %278

; <label>:277                                     ; preds = %274
  store double 0.000000e+00, double* %delvxzeta, align 8, !tbaa !7
  br label %278

; <label>:278                                     ; preds = %277, %274
  %279 = load i32, i32* %i, align 4, !tbaa !5
  %280 = call dereferenceable(8) double* @_ZN6Domain8elemMassEi(%struct.Domain* @domain, i32 %279)
  %281 = load double, double* %280, !tbaa !7
  %282 = load i32, i32* %i, align 4, !tbaa !5
  %283 = call dereferenceable(8) double* @_ZN6Domain4voloEi(%struct.Domain* @domain, i32 %282)
  %284 = load double, double* %283, !tbaa !7
  %285 = load i32, i32* %i, align 4, !tbaa !5
  %286 = call dereferenceable(8) double* @_ZN6Domain4vnewEi(%struct.Domain* @domain, i32 %285)
  %287 = load double, double* %286, !tbaa !7
  %288 = fmul double %284, %287
  %289 = fdiv double %281, %288
  store double %289, double* %rho, align 8, !tbaa !7
  %290 = load double, double* %1, align 8, !tbaa !7
  %291 = fsub double -0.000000e+00, %290
  %292 = load double, double* %rho, align 8, !tbaa !7
  %293 = fmul double %291, %292
  %294 = load double, double* %delvxxi, align 8, !tbaa !7
  %295 = load double, double* %phixi, align 8, !tbaa !7
  %296 = fsub double 1.000000e+00, %295
  %297 = fmul double %294, %296
  %298 = load double, double* %delvxeta, align 8, !tbaa !7
  %299 = load double, double* %phieta, align 8, !tbaa !7
  %300 = fsub double 1.000000e+00, %299
  %301 = fmul double %298, %300
  %302 = fadd double %297, %301
  %303 = load double, double* %delvxzeta, align 8, !tbaa !7
  %304 = load double, double* %phizeta, align 8, !tbaa !7
  %305 = fsub double 1.000000e+00, %304
  %306 = fmul double %303, %305
  %307 = fadd double %302, %306
  %308 = fmul double %293, %307
  store double %308, double* %qlin, align 8, !tbaa !7
  %309 = load double, double* %2, align 8, !tbaa !7
  %310 = load double, double* %rho, align 8, !tbaa !7
  %311 = fmul double %309, %310
  %312 = load double, double* %delvxxi, align 8, !tbaa !7
  %313 = load double, double* %delvxxi, align 8, !tbaa !7
  %314 = fmul double %312, %313
  %315 = load double, double* %phixi, align 8, !tbaa !7
  %316 = load double, double* %phixi, align 8, !tbaa !7
  %317 = fmul double %315, %316
  %318 = fsub double 1.000000e+00, %317
  %319 = fmul double %314, %318
  %320 = load double, double* %delvxeta, align 8, !tbaa !7
  %321 = load double, double* %delvxeta, align 8, !tbaa !7
  %322 = fmul double %320, %321
  %323 = load double, double* %phieta, align 8, !tbaa !7
  %324 = load double, double* %phieta, align 8, !tbaa !7
  %325 = fmul double %323, %324
  %326 = fsub double 1.000000e+00, %325
  %327 = fmul double %322, %326
  %328 = fadd double %319, %327
  %329 = load double, double* %delvxzeta, align 8, !tbaa !7
  %330 = load double, double* %delvxzeta, align 8, !tbaa !7
  %331 = fmul double %329, %330
  %332 = load double, double* %phizeta, align 8, !tbaa !7
  %333 = load double, double* %phizeta, align 8, !tbaa !7
  %334 = fmul double %332, %333
  %335 = fsub double 1.000000e+00, %334
  %336 = fmul double %331, %335
  %337 = fadd double %328, %336
  %338 = fmul double %311, %337
  store double %338, double* %qquad, align 8, !tbaa !7
  br label %339

; <label>:339                                     ; preds = %278, %244
  %340 = load double, double* %qquad, align 8, !tbaa !7
  %341 = load i32, i32* %i, align 4, !tbaa !5
  %342 = call dereferenceable(8) double* @_ZN6Domain2qqEi(%struct.Domain* @domain, i32 %341)
  store double %340, double* %342, !tbaa !7
  %343 = load double, double* %qlin, align 8, !tbaa !7
  %344 = load i32, i32* %i, align 4, !tbaa !5
  %345 = call dereferenceable(8) double* @_ZN6Domain2qlEi(%struct.Domain* @domain, i32 %344)
  store double %343, double* %345, !tbaa !7
  br label %346

; <label>:346                                     ; preds = %339
  %347 = load i32, i32* %ielem, align 4, !tbaa !5
  %348 = add nsw i32 %347, 1
  store i32 %348, i32* %ielem, align 4, !tbaa !5
  br label %7

; <label>:349                                     ; preds = %7
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2qqEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 41
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: nounwind uwtable
define linkonce_odr dereferenceable(8) double* @_ZN6Domain2qlEi(%struct.Domain* %this, i32 %idx) #4 comdat align 2 {
  %1 = alloca %struct.Domain*, align 8
  %2 = alloca i32, align 4
  store %struct.Domain* %this, %struct.Domain** %1, align 8, !tbaa !1
  store i32 %idx, i32* %2, align 4, !tbaa !5
  %3 = load %struct.Domain*, %struct.Domain** %1
  %4 = getelementptr inbounds %struct.Domain, %struct.Domain* %3, i32 0, i32 40
  %5 = load i32, i32* %2, align 4, !tbaa !5
  %6 = sext i32 %5 to i64
  %7 = call dereferenceable(8) double* @_ZNSt6vectorIdSaIdEEixEm(%"class.std::vector"* %4, i64 %6)
  ret double* %7
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL15EvalEOSForElemsPdi(double* %vnewc, i32 %length) #0 {
  %1 = alloca double*, align 8
  %2 = alloca i32, align 4
  %e_cut = alloca double, align 8
  %p_cut = alloca double, align 8
  %ss4o3 = alloca double, align 8
  %q_cut = alloca double, align 8
  %eosvmax = alloca double, align 8
  %eosvmin = alloca double, align 8
  %pmin = alloca double, align 8
  %emin = alloca double, align 8
  %rho0 = alloca double, align 8
  %e_old = alloca double*, align 8
  %delvc = alloca double*, align 8
  %p_old = alloca double*, align 8
  %q_old = alloca double*, align 8
  %compression = alloca double*, align 8
  %compHalfStep = alloca double*, align 8
  %qq = alloca double*, align 8
  %ql = alloca double*, align 8
  %work = alloca double*, align 8
  %p_new = alloca double*, align 8
  %e_new = alloca double*, align 8
  %q_new = alloca double*, align 8
  %bvc = alloca double*, align 8
  %pbvc = alloca double*, align 8
  %i = alloca i32, align 4
  %zidx = alloca i32, align 4
  %i1 = alloca i32, align 4
  %zidx2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %zidx4 = alloca i32, align 4
  %i5 = alloca i32, align 4
  %zidx6 = alloca i32, align 4
  %i7 = alloca i32, align 4
  %vchalf = alloca double, align 8
  %i8 = alloca i32, align 4
  %i9 = alloca i32, align 4
  %i10 = alloca i32, align 4
  %zidx11 = alloca i32, align 4
  %i12 = alloca i32, align 4
  %zidx13 = alloca i32, align 4
  %i14 = alloca i32, align 4
  %zidx15 = alloca i32, align 4
  %i16 = alloca i32, align 4
  %zidx17 = alloca i32, align 4
  store double* %vnewc, double** %1, align 8, !tbaa !1
  store i32 %length, i32* %2, align 4, !tbaa !5
  %3 = call dereferenceable(8) double* @_ZN6Domain5e_cutEv(%struct.Domain* @domain)
  %4 = load double, double* %3, !tbaa !7
  store double %4, double* %e_cut, align 8, !tbaa !7
  %5 = call dereferenceable(8) double* @_ZN6Domain5p_cutEv(%struct.Domain* @domain)
  %6 = load double, double* %5, !tbaa !7
  store double %6, double* %p_cut, align 8, !tbaa !7
  %7 = call dereferenceable(8) double* @_ZN6Domain5ss4o3Ev(%struct.Domain* @domain)
  %8 = load double, double* %7, !tbaa !7
  store double %8, double* %ss4o3, align 8, !tbaa !7
  %9 = call dereferenceable(8) double* @_ZN6Domain5q_cutEv(%struct.Domain* @domain)
  %10 = load double, double* %9, !tbaa !7
  store double %10, double* %q_cut, align 8, !tbaa !7
  %11 = call dereferenceable(8) double* @_ZN6Domain7eosvmaxEv(%struct.Domain* @domain)
  %12 = load double, double* %11, !tbaa !7
  store double %12, double* %eosvmax, align 8, !tbaa !7
  %13 = call dereferenceable(8) double* @_ZN6Domain7eosvminEv(%struct.Domain* @domain)
  %14 = load double, double* %13, !tbaa !7
  store double %14, double* %eosvmin, align 8, !tbaa !7
  %15 = call dereferenceable(8) double* @_ZN6Domain4pminEv(%struct.Domain* @domain)
  %16 = load double, double* %15, !tbaa !7
  store double %16, double* %pmin, align 8, !tbaa !7
  %17 = call dereferenceable(8) double* @_ZN6Domain4eminEv(%struct.Domain* @domain)
  %18 = load double, double* %17, !tbaa !7
  store double %18, double* %emin, align 8, !tbaa !7
  %19 = call dereferenceable(8) double* @_ZN6Domain7refdensEv(%struct.Domain* @domain)
  %20 = load double, double* %19, !tbaa !7
  store double %20, double* %rho0, align 8, !tbaa !7
  %21 = load i32, i32* %2, align 4, !tbaa !5
  %22 = sext i32 %21 to i64
  %23 = call double* @_Z8AllocateIdEPT_m(i64 %22)
  store double* %23, double** %e_old, align 8, !tbaa !1
  %24 = load i32, i32* %2, align 4, !tbaa !5
  %25 = sext i32 %24 to i64
  %26 = call double* @_Z8AllocateIdEPT_m(i64 %25)
  store double* %26, double** %delvc, align 8, !tbaa !1
  %27 = load i32, i32* %2, align 4, !tbaa !5
  %28 = sext i32 %27 to i64
  %29 = call double* @_Z8AllocateIdEPT_m(i64 %28)
  store double* %29, double** %p_old, align 8, !tbaa !1
  %30 = load i32, i32* %2, align 4, !tbaa !5
  %31 = sext i32 %30 to i64
  %32 = call double* @_Z8AllocateIdEPT_m(i64 %31)
  store double* %32, double** %q_old, align 8, !tbaa !1
  %33 = load i32, i32* %2, align 4, !tbaa !5
  %34 = sext i32 %33 to i64
  %35 = call double* @_Z8AllocateIdEPT_m(i64 %34)
  store double* %35, double** %compression, align 8, !tbaa !1
  %36 = load i32, i32* %2, align 4, !tbaa !5
  %37 = sext i32 %36 to i64
  %38 = call double* @_Z8AllocateIdEPT_m(i64 %37)
  store double* %38, double** %compHalfStep, align 8, !tbaa !1
  %39 = load i32, i32* %2, align 4, !tbaa !5
  %40 = sext i32 %39 to i64
  %41 = call double* @_Z8AllocateIdEPT_m(i64 %40)
  store double* %41, double** %qq, align 8, !tbaa !1
  %42 = load i32, i32* %2, align 4, !tbaa !5
  %43 = sext i32 %42 to i64
  %44 = call double* @_Z8AllocateIdEPT_m(i64 %43)
  store double* %44, double** %ql, align 8, !tbaa !1
  %45 = load i32, i32* %2, align 4, !tbaa !5
  %46 = sext i32 %45 to i64
  %47 = call double* @_Z8AllocateIdEPT_m(i64 %46)
  store double* %47, double** %work, align 8, !tbaa !1
  %48 = load i32, i32* %2, align 4, !tbaa !5
  %49 = sext i32 %48 to i64
  %50 = call double* @_Z8AllocateIdEPT_m(i64 %49)
  store double* %50, double** %p_new, align 8, !tbaa !1
  %51 = load i32, i32* %2, align 4, !tbaa !5
  %52 = sext i32 %51 to i64
  %53 = call double* @_Z8AllocateIdEPT_m(i64 %52)
  store double* %53, double** %e_new, align 8, !tbaa !1
  %54 = load i32, i32* %2, align 4, !tbaa !5
  %55 = sext i32 %54 to i64
  %56 = call double* @_Z8AllocateIdEPT_m(i64 %55)
  store double* %56, double** %q_new, align 8, !tbaa !1
  %57 = load i32, i32* %2, align 4, !tbaa !5
  %58 = sext i32 %57 to i64
  %59 = call double* @_Z8AllocateIdEPT_m(i64 %58)
  store double* %59, double** %bvc, align 8, !tbaa !1
  %60 = load i32, i32* %2, align 4, !tbaa !5
  %61 = sext i32 %60 to i64
  %62 = call double* @_Z8AllocateIdEPT_m(i64 %61)
  store double* %62, double** %pbvc, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %63

; <label>:63                                      ; preds = %78, %0
  %64 = load i32, i32* %i, align 4, !tbaa !5
  %65 = load i32, i32* %2, align 4, !tbaa !5
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %81

; <label>:67                                      ; preds = %63
  %68 = load i32, i32* %i, align 4, !tbaa !5
  %69 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %68)
  %70 = load i32, i32* %69, !tbaa !5
  store i32 %70, i32* %zidx, align 4, !tbaa !5
  %71 = load i32, i32* %zidx, align 4, !tbaa !5
  %72 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 %71)
  %73 = load double, double* %72, !tbaa !7
  %74 = load i32, i32* %i, align 4, !tbaa !5
  %75 = sext i32 %74 to i64
  %76 = load double*, double** %e_old, align 8, !tbaa !1
  %77 = getelementptr inbounds double, double* %76, i64 %75
  store double %73, double* %77, align 8, !tbaa !7
  br label %78

; <label>:78                                      ; preds = %67
  %79 = load i32, i32* %i, align 4, !tbaa !5
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %i, align 4, !tbaa !5
  br label %63

; <label>:81                                      ; preds = %63
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %82

; <label>:82                                      ; preds = %97, %81
  %83 = load i32, i32* %i1, align 4, !tbaa !5
  %84 = load i32, i32* %2, align 4, !tbaa !5
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %86, label %100

; <label>:86                                      ; preds = %82
  %87 = load i32, i32* %i1, align 4, !tbaa !5
  %88 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %87)
  %89 = load i32, i32* %88, !tbaa !5
  store i32 %89, i32* %zidx2, align 4, !tbaa !5
  %90 = load i32, i32* %zidx2, align 4, !tbaa !5
  %91 = call dereferenceable(8) double* @_ZN6Domain4delvEi(%struct.Domain* @domain, i32 %90)
  %92 = load double, double* %91, !tbaa !7
  %93 = load i32, i32* %i1, align 4, !tbaa !5
  %94 = sext i32 %93 to i64
  %95 = load double*, double** %delvc, align 8, !tbaa !1
  %96 = getelementptr inbounds double, double* %95, i64 %94
  store double %92, double* %96, align 8, !tbaa !7
  br label %97

; <label>:97                                      ; preds = %86
  %98 = load i32, i32* %i1, align 4, !tbaa !5
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %i1, align 4, !tbaa !5
  br label %82

; <label>:100                                     ; preds = %82
  store i32 0, i32* %i3, align 4, !tbaa !5
  br label %101

; <label>:101                                     ; preds = %116, %100
  %102 = load i32, i32* %i3, align 4, !tbaa !5
  %103 = load i32, i32* %2, align 4, !tbaa !5
  %104 = icmp slt i32 %102, %103
  br i1 %104, label %105, label %119

; <label>:105                                     ; preds = %101
  %106 = load i32, i32* %i3, align 4, !tbaa !5
  %107 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %106)
  %108 = load i32, i32* %107, !tbaa !5
  store i32 %108, i32* %zidx4, align 4, !tbaa !5
  %109 = load i32, i32* %zidx4, align 4, !tbaa !5
  %110 = call dereferenceable(8) double* @_ZN6Domain1pEi(%struct.Domain* @domain, i32 %109)
  %111 = load double, double* %110, !tbaa !7
  %112 = load i32, i32* %i3, align 4, !tbaa !5
  %113 = sext i32 %112 to i64
  %114 = load double*, double** %p_old, align 8, !tbaa !1
  %115 = getelementptr inbounds double, double* %114, i64 %113
  store double %111, double* %115, align 8, !tbaa !7
  br label %116

; <label>:116                                     ; preds = %105
  %117 = load i32, i32* %i3, align 4, !tbaa !5
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %i3, align 4, !tbaa !5
  br label %101

; <label>:119                                     ; preds = %101
  store i32 0, i32* %i5, align 4, !tbaa !5
  br label %120

; <label>:120                                     ; preds = %135, %119
  %121 = load i32, i32* %i5, align 4, !tbaa !5
  %122 = load i32, i32* %2, align 4, !tbaa !5
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %138

; <label>:124                                     ; preds = %120
  %125 = load i32, i32* %i5, align 4, !tbaa !5
  %126 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %125)
  %127 = load i32, i32* %126, !tbaa !5
  store i32 %127, i32* %zidx6, align 4, !tbaa !5
  %128 = load i32, i32* %zidx6, align 4, !tbaa !5
  %129 = call dereferenceable(8) double* @_ZN6Domain1qEi(%struct.Domain* @domain, i32 %128)
  %130 = load double, double* %129, !tbaa !7
  %131 = load i32, i32* %i5, align 4, !tbaa !5
  %132 = sext i32 %131 to i64
  %133 = load double*, double** %q_old, align 8, !tbaa !1
  %134 = getelementptr inbounds double, double* %133, i64 %132
  store double %130, double* %134, align 8, !tbaa !7
  br label %135

; <label>:135                                     ; preds = %124
  %136 = load i32, i32* %i5, align 4, !tbaa !5
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %i5, align 4, !tbaa !5
  br label %120

; <label>:138                                     ; preds = %120
  store i32 0, i32* %i7, align 4, !tbaa !5
  br label %139

; <label>:139                                     ; preds = %174, %138
  %140 = load i32, i32* %i7, align 4, !tbaa !5
  %141 = load i32, i32* %2, align 4, !tbaa !5
  %142 = icmp slt i32 %140, %141
  br i1 %142, label %143, label %177

; <label>:143                                     ; preds = %139
  %144 = load i32, i32* %i7, align 4, !tbaa !5
  %145 = sext i32 %144 to i64
  %146 = load double*, double** %1, align 8, !tbaa !1
  %147 = getelementptr inbounds double, double* %146, i64 %145
  %148 = load double, double* %147, align 8, !tbaa !7
  %149 = fdiv double 1.000000e+00, %148
  %150 = fsub double %149, 1.000000e+00
  %151 = load i32, i32* %i7, align 4, !tbaa !5
  %152 = sext i32 %151 to i64
  %153 = load double*, double** %compression, align 8, !tbaa !1
  %154 = getelementptr inbounds double, double* %153, i64 %152
  store double %150, double* %154, align 8, !tbaa !7
  %155 = load i32, i32* %i7, align 4, !tbaa !5
  %156 = sext i32 %155 to i64
  %157 = load double*, double** %1, align 8, !tbaa !1
  %158 = getelementptr inbounds double, double* %157, i64 %156
  %159 = load double, double* %158, align 8, !tbaa !7
  %160 = load i32, i32* %i7, align 4, !tbaa !5
  %161 = sext i32 %160 to i64
  %162 = load double*, double** %delvc, align 8, !tbaa !1
  %163 = getelementptr inbounds double, double* %162, i64 %161
  %164 = load double, double* %163, align 8, !tbaa !7
  %165 = fmul double %164, 5.000000e-01
  %166 = fsub double %159, %165
  store double %166, double* %vchalf, align 8, !tbaa !7
  %167 = load double, double* %vchalf, align 8, !tbaa !7
  %168 = fdiv double 1.000000e+00, %167
  %169 = fsub double %168, 1.000000e+00
  %170 = load i32, i32* %i7, align 4, !tbaa !5
  %171 = sext i32 %170 to i64
  %172 = load double*, double** %compHalfStep, align 8, !tbaa !1
  %173 = getelementptr inbounds double, double* %172, i64 %171
  store double %169, double* %173, align 8, !tbaa !7
  br label %174

; <label>:174                                     ; preds = %143
  %175 = load i32, i32* %i7, align 4, !tbaa !5
  %176 = add nsw i32 %175, 1
  store i32 %176, i32* %i7, align 4, !tbaa !5
  br label %139

; <label>:177                                     ; preds = %139
  %178 = load double, double* %eosvmin, align 8, !tbaa !7
  %179 = fcmp une double %178, 0.000000e+00
  br i1 %179, label %180, label %208

; <label>:180                                     ; preds = %177
  store i32 0, i32* %i8, align 4, !tbaa !5
  br label %181

; <label>:181                                     ; preds = %204, %180
  %182 = load i32, i32* %i8, align 4, !tbaa !5
  %183 = load i32, i32* %2, align 4, !tbaa !5
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %185, label %207

; <label>:185                                     ; preds = %181
  %186 = load i32, i32* %i8, align 4, !tbaa !5
  %187 = sext i32 %186 to i64
  %188 = load double*, double** %1, align 8, !tbaa !1
  %189 = getelementptr inbounds double, double* %188, i64 %187
  %190 = load double, double* %189, align 8, !tbaa !7
  %191 = load double, double* %eosvmin, align 8, !tbaa !7
  %192 = fcmp ole double %190, %191
  br i1 %192, label %193, label %203

; <label>:193                                     ; preds = %185
  %194 = load i32, i32* %i8, align 4, !tbaa !5
  %195 = sext i32 %194 to i64
  %196 = load double*, double** %compression, align 8, !tbaa !1
  %197 = getelementptr inbounds double, double* %196, i64 %195
  %198 = load double, double* %197, align 8, !tbaa !7
  %199 = load i32, i32* %i8, align 4, !tbaa !5
  %200 = sext i32 %199 to i64
  %201 = load double*, double** %compHalfStep, align 8, !tbaa !1
  %202 = getelementptr inbounds double, double* %201, i64 %200
  store double %198, double* %202, align 8, !tbaa !7
  br label %203

; <label>:203                                     ; preds = %193, %185
  br label %204

; <label>:204                                     ; preds = %203
  %205 = load i32, i32* %i8, align 4, !tbaa !5
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %i8, align 4, !tbaa !5
  br label %181

; <label>:207                                     ; preds = %181
  br label %208

; <label>:208                                     ; preds = %207, %177
  %209 = load double, double* %eosvmax, align 8, !tbaa !7
  %210 = fcmp une double %209, 0.000000e+00
  br i1 %210, label %211, label %242

; <label>:211                                     ; preds = %208
  store i32 0, i32* %i9, align 4, !tbaa !5
  br label %212

; <label>:212                                     ; preds = %238, %211
  %213 = load i32, i32* %i9, align 4, !tbaa !5
  %214 = load i32, i32* %2, align 4, !tbaa !5
  %215 = icmp slt i32 %213, %214
  br i1 %215, label %216, label %241

; <label>:216                                     ; preds = %212
  %217 = load i32, i32* %i9, align 4, !tbaa !5
  %218 = sext i32 %217 to i64
  %219 = load double*, double** %1, align 8, !tbaa !1
  %220 = getelementptr inbounds double, double* %219, i64 %218
  %221 = load double, double* %220, align 8, !tbaa !7
  %222 = load double, double* %eosvmax, align 8, !tbaa !7
  %223 = fcmp oge double %221, %222
  br i1 %223, label %224, label %237

; <label>:224                                     ; preds = %216
  %225 = load i32, i32* %i9, align 4, !tbaa !5
  %226 = sext i32 %225 to i64
  %227 = load double*, double** %p_old, align 8, !tbaa !1
  %228 = getelementptr inbounds double, double* %227, i64 %226
  store double 0.000000e+00, double* %228, align 8, !tbaa !7
  %229 = load i32, i32* %i9, align 4, !tbaa !5
  %230 = sext i32 %229 to i64
  %231 = load double*, double** %compression, align 8, !tbaa !1
  %232 = getelementptr inbounds double, double* %231, i64 %230
  store double 0.000000e+00, double* %232, align 8, !tbaa !7
  %233 = load i32, i32* %i9, align 4, !tbaa !5
  %234 = sext i32 %233 to i64
  %235 = load double*, double** %compHalfStep, align 8, !tbaa !1
  %236 = getelementptr inbounds double, double* %235, i64 %234
  store double 0.000000e+00, double* %236, align 8, !tbaa !7
  br label %237

; <label>:237                                     ; preds = %224, %216
  br label %238

; <label>:238                                     ; preds = %237
  %239 = load i32, i32* %i9, align 4, !tbaa !5
  %240 = add nsw i32 %239, 1
  store i32 %240, i32* %i9, align 4, !tbaa !5
  br label %212

; <label>:241                                     ; preds = %212
  br label %242

; <label>:242                                     ; preds = %241, %208
  store i32 0, i32* %i10, align 4, !tbaa !5
  br label %243

; <label>:243                                     ; preds = %269, %242
  %244 = load i32, i32* %i10, align 4, !tbaa !5
  %245 = load i32, i32* %2, align 4, !tbaa !5
  %246 = icmp slt i32 %244, %245
  br i1 %246, label %247, label %272

; <label>:247                                     ; preds = %243
  %248 = load i32, i32* %i10, align 4, !tbaa !5
  %249 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %248)
  %250 = load i32, i32* %249, !tbaa !5
  store i32 %250, i32* %zidx11, align 4, !tbaa !5
  %251 = load i32, i32* %zidx11, align 4, !tbaa !5
  %252 = call dereferenceable(8) double* @_ZN6Domain2qqEi(%struct.Domain* @domain, i32 %251)
  %253 = load double, double* %252, !tbaa !7
  %254 = load i32, i32* %i10, align 4, !tbaa !5
  %255 = sext i32 %254 to i64
  %256 = load double*, double** %qq, align 8, !tbaa !1
  %257 = getelementptr inbounds double, double* %256, i64 %255
  store double %253, double* %257, align 8, !tbaa !7
  %258 = load i32, i32* %zidx11, align 4, !tbaa !5
  %259 = call dereferenceable(8) double* @_ZN6Domain2qlEi(%struct.Domain* @domain, i32 %258)
  %260 = load double, double* %259, !tbaa !7
  %261 = load i32, i32* %i10, align 4, !tbaa !5
  %262 = sext i32 %261 to i64
  %263 = load double*, double** %ql, align 8, !tbaa !1
  %264 = getelementptr inbounds double, double* %263, i64 %262
  store double %260, double* %264, align 8, !tbaa !7
  %265 = load i32, i32* %i10, align 4, !tbaa !5
  %266 = sext i32 %265 to i64
  %267 = load double*, double** %work, align 8, !tbaa !1
  %268 = getelementptr inbounds double, double* %267, i64 %266
  store double 0.000000e+00, double* %268, align 8, !tbaa !7
  br label %269

; <label>:269                                     ; preds = %247
  %270 = load i32, i32* %i10, align 4, !tbaa !5
  %271 = add nsw i32 %270, 1
  store i32 %271, i32* %i10, align 4, !tbaa !5
  br label %243

; <label>:272                                     ; preds = %243
  %273 = load double*, double** %p_new, align 8, !tbaa !1
  %274 = load double*, double** %e_new, align 8, !tbaa !1
  %275 = load double*, double** %q_new, align 8, !tbaa !1
  %276 = load double*, double** %bvc, align 8, !tbaa !1
  %277 = load double*, double** %pbvc, align 8, !tbaa !1
  %278 = load double*, double** %p_old, align 8, !tbaa !1
  %279 = load double*, double** %e_old, align 8, !tbaa !1
  %280 = load double*, double** %q_old, align 8, !tbaa !1
  %281 = load double*, double** %compression, align 8, !tbaa !1
  %282 = load double*, double** %compHalfStep, align 8, !tbaa !1
  %283 = load double*, double** %1, align 8, !tbaa !1
  %284 = load double*, double** %work, align 8, !tbaa !1
  %285 = load double*, double** %delvc, align 8, !tbaa !1
  %286 = load double, double* %pmin, align 8, !tbaa !7
  %287 = load double, double* %p_cut, align 8, !tbaa !7
  %288 = load double, double* %e_cut, align 8, !tbaa !7
  %289 = load double, double* %q_cut, align 8, !tbaa !7
  %290 = load double, double* %emin, align 8, !tbaa !7
  %291 = load double*, double** %qq, align 8, !tbaa !1
  %292 = load double*, double** %ql, align 8, !tbaa !1
  %293 = load double, double* %rho0, align 8, !tbaa !7
  %294 = load double, double* %eosvmax, align 8, !tbaa !7
  %295 = load i32, i32* %2, align 4, !tbaa !5
  call void @_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddi(double* %273, double* %274, double* %275, double* %276, double* %277, double* %278, double* %279, double* %280, double* %281, double* %282, double* %283, double* %284, double* %285, double %286, double %287, double %288, double %289, double %290, double* %291, double* %292, double %293, double %294, i32 %295)
  store i32 0, i32* %i12, align 4, !tbaa !5
  br label %296

; <label>:296                                     ; preds = %311, %272
  %297 = load i32, i32* %i12, align 4, !tbaa !5
  %298 = load i32, i32* %2, align 4, !tbaa !5
  %299 = icmp slt i32 %297, %298
  br i1 %299, label %300, label %314

; <label>:300                                     ; preds = %296
  %301 = load i32, i32* %i12, align 4, !tbaa !5
  %302 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %301)
  %303 = load i32, i32* %302, !tbaa !5
  store i32 %303, i32* %zidx13, align 4, !tbaa !5
  %304 = load i32, i32* %i12, align 4, !tbaa !5
  %305 = sext i32 %304 to i64
  %306 = load double*, double** %p_new, align 8, !tbaa !1
  %307 = getelementptr inbounds double, double* %306, i64 %305
  %308 = load double, double* %307, align 8, !tbaa !7
  %309 = load i32, i32* %zidx13, align 4, !tbaa !5
  %310 = call dereferenceable(8) double* @_ZN6Domain1pEi(%struct.Domain* @domain, i32 %309)
  store double %308, double* %310, !tbaa !7
  br label %311

; <label>:311                                     ; preds = %300
  %312 = load i32, i32* %i12, align 4, !tbaa !5
  %313 = add nsw i32 %312, 1
  store i32 %313, i32* %i12, align 4, !tbaa !5
  br label %296

; <label>:314                                     ; preds = %296
  store i32 0, i32* %i14, align 4, !tbaa !5
  br label %315

; <label>:315                                     ; preds = %330, %314
  %316 = load i32, i32* %i14, align 4, !tbaa !5
  %317 = load i32, i32* %2, align 4, !tbaa !5
  %318 = icmp slt i32 %316, %317
  br i1 %318, label %319, label %333

; <label>:319                                     ; preds = %315
  %320 = load i32, i32* %i14, align 4, !tbaa !5
  %321 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %320)
  %322 = load i32, i32* %321, !tbaa !5
  store i32 %322, i32* %zidx15, align 4, !tbaa !5
  %323 = load i32, i32* %i14, align 4, !tbaa !5
  %324 = sext i32 %323 to i64
  %325 = load double*, double** %e_new, align 8, !tbaa !1
  %326 = getelementptr inbounds double, double* %325, i64 %324
  %327 = load double, double* %326, align 8, !tbaa !7
  %328 = load i32, i32* %zidx15, align 4, !tbaa !5
  %329 = call dereferenceable(8) double* @_ZN6Domain1eEi(%struct.Domain* @domain, i32 %328)
  store double %327, double* %329, !tbaa !7
  br label %330

; <label>:330                                     ; preds = %319
  %331 = load i32, i32* %i14, align 4, !tbaa !5
  %332 = add nsw i32 %331, 1
  store i32 %332, i32* %i14, align 4, !tbaa !5
  br label %315

; <label>:333                                     ; preds = %315
  store i32 0, i32* %i16, align 4, !tbaa !5
  br label %334

; <label>:334                                     ; preds = %349, %333
  %335 = load i32, i32* %i16, align 4, !tbaa !5
  %336 = load i32, i32* %2, align 4, !tbaa !5
  %337 = icmp slt i32 %335, %336
  br i1 %337, label %338, label %352

; <label>:338                                     ; preds = %334
  %339 = load i32, i32* %i16, align 4, !tbaa !5
  %340 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %339)
  %341 = load i32, i32* %340, !tbaa !5
  store i32 %341, i32* %zidx17, align 4, !tbaa !5
  %342 = load i32, i32* %i16, align 4, !tbaa !5
  %343 = sext i32 %342 to i64
  %344 = load double*, double** %q_new, align 8, !tbaa !1
  %345 = getelementptr inbounds double, double* %344, i64 %343
  %346 = load double, double* %345, align 8, !tbaa !7
  %347 = load i32, i32* %zidx17, align 4, !tbaa !5
  %348 = call dereferenceable(8) double* @_ZN6Domain1qEi(%struct.Domain* @domain, i32 %347)
  store double %346, double* %348, !tbaa !7
  br label %349

; <label>:349                                     ; preds = %338
  %350 = load i32, i32* %i16, align 4, !tbaa !5
  %351 = add nsw i32 %350, 1
  store i32 %351, i32* %i16, align 4, !tbaa !5
  br label %334

; <label>:352                                     ; preds = %334
  %353 = load double*, double** %1, align 8, !tbaa !1
  %354 = load double, double* %rho0, align 8, !tbaa !7
  %355 = load double*, double** %e_new, align 8, !tbaa !1
  %356 = load double*, double** %p_new, align 8, !tbaa !1
  %357 = load double*, double** %pbvc, align 8, !tbaa !1
  %358 = load double*, double** %bvc, align 8, !tbaa !1
  %359 = load double, double* %ss4o3, align 8, !tbaa !7
  %360 = load i32, i32* %2, align 4, !tbaa !5
  call void @_ZL22CalcSoundSpeedForElemsPddS_S_S_S_di(double* %353, double %354, double* %355, double* %356, double* %357, double* %358, double %359, i32 %360)
  call void @_Z7ReleaseIdEvPPT_(double** %pbvc)
  call void @_Z7ReleaseIdEvPPT_(double** %bvc)
  call void @_Z7ReleaseIdEvPPT_(double** %q_new)
  call void @_Z7ReleaseIdEvPPT_(double** %e_new)
  call void @_Z7ReleaseIdEvPPT_(double** %p_new)
  call void @_Z7ReleaseIdEvPPT_(double** %work)
  call void @_Z7ReleaseIdEvPPT_(double** %ql)
  call void @_Z7ReleaseIdEvPPT_(double** %qq)
  call void @_Z7ReleaseIdEvPPT_(double** %compHalfStep)
  call void @_Z7ReleaseIdEvPPT_(double** %compression)
  call void @_Z7ReleaseIdEvPPT_(double** %q_old)
  call void @_Z7ReleaseIdEvPPT_(double** %p_old)
  call void @_Z7ReleaseIdEvPPT_(double** %delvc)
  call void @_Z7ReleaseIdEvPPT_(double** %e_old)
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL18CalcEnergyForElemsPdS_S_S_S_S_S_S_S_S_S_S_S_dddddS_S_ddi(double* %p_new, double* %e_new, double* %q_new, double* %bvc, double* %pbvc, double* %p_old, double* %e_old, double* %q_old, double* %compression, double* %compHalfStep, double* %vnewc, double* %work, double* %delvc, double %pmin, double %p_cut, double %e_cut, double %q_cut, double %emin, double* %qq, double* %ql, double %rho0, double %eosvmax, i32 %length) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double*, align 8
  %20 = alloca double*, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca i32, align 4
  %pHalfStep = alloca double*, align 8
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %vhalf = alloca double, align 8
  %ssc = alloca double, align 8
  %i2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %sixth = alloca double, align 8
  %q_tilde = alloca double, align 8
  %ssc4 = alloca double, align 8
  %i5 = alloca i32, align 4
  %ssc6 = alloca double, align 8
  store double* %p_new, double** %1, align 8, !tbaa !1
  store double* %e_new, double** %2, align 8, !tbaa !1
  store double* %q_new, double** %3, align 8, !tbaa !1
  store double* %bvc, double** %4, align 8, !tbaa !1
  store double* %pbvc, double** %5, align 8, !tbaa !1
  store double* %p_old, double** %6, align 8, !tbaa !1
  store double* %e_old, double** %7, align 8, !tbaa !1
  store double* %q_old, double** %8, align 8, !tbaa !1
  store double* %compression, double** %9, align 8, !tbaa !1
  store double* %compHalfStep, double** %10, align 8, !tbaa !1
  store double* %vnewc, double** %11, align 8, !tbaa !1
  store double* %work, double** %12, align 8, !tbaa !1
  store double* %delvc, double** %13, align 8, !tbaa !1
  store double %pmin, double* %14, align 8, !tbaa !7
  store double %p_cut, double* %15, align 8, !tbaa !7
  store double %e_cut, double* %16, align 8, !tbaa !7
  store double %q_cut, double* %17, align 8, !tbaa !7
  store double %emin, double* %18, align 8, !tbaa !7
  store double* %qq, double** %19, align 8, !tbaa !1
  store double* %ql, double** %20, align 8, !tbaa !1
  store double %rho0, double* %21, align 8, !tbaa !7
  store double %eosvmax, double* %22, align 8, !tbaa !7
  store i32 %length, i32* %23, align 4, !tbaa !5
  %24 = load i32, i32* %23, align 4, !tbaa !5
  %25 = sext i32 %24 to i64
  %26 = call double* @_Z8AllocateIdEPT_m(i64 %25)
  store double* %26, double** %pHalfStep, align 8, !tbaa !1
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %27

; <label>:27                                      ; preds = %81, %0
  %28 = load i32, i32* %i, align 4, !tbaa !5
  %29 = load i32, i32* %23, align 4, !tbaa !5
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %84

; <label>:31                                      ; preds = %27
  %32 = load i32, i32* %i, align 4, !tbaa !5
  %33 = sext i32 %32 to i64
  %34 = load double*, double** %7, align 8, !tbaa !1
  %35 = getelementptr inbounds double, double* %34, i64 %33
  %36 = load double, double* %35, align 8, !tbaa !7
  %37 = load i32, i32* %i, align 4, !tbaa !5
  %38 = sext i32 %37 to i64
  %39 = load double*, double** %13, align 8, !tbaa !1
  %40 = getelementptr inbounds double, double* %39, i64 %38
  %41 = load double, double* %40, align 8, !tbaa !7
  %42 = fmul double 5.000000e-01, %41
  %43 = load i32, i32* %i, align 4, !tbaa !5
  %44 = sext i32 %43 to i64
  %45 = load double*, double** %6, align 8, !tbaa !1
  %46 = getelementptr inbounds double, double* %45, i64 %44
  %47 = load double, double* %46, align 8, !tbaa !7
  %48 = load i32, i32* %i, align 4, !tbaa !5
  %49 = sext i32 %48 to i64
  %50 = load double*, double** %8, align 8, !tbaa !1
  %51 = getelementptr inbounds double, double* %50, i64 %49
  %52 = load double, double* %51, align 8, !tbaa !7
  %53 = fadd double %47, %52
  %54 = fmul double %42, %53
  %55 = fsub double %36, %54
  %56 = load i32, i32* %i, align 4, !tbaa !5
  %57 = sext i32 %56 to i64
  %58 = load double*, double** %12, align 8, !tbaa !1
  %59 = getelementptr inbounds double, double* %58, i64 %57
  %60 = load double, double* %59, align 8, !tbaa !7
  %61 = fmul double 5.000000e-01, %60
  %62 = fadd double %55, %61
  %63 = load i32, i32* %i, align 4, !tbaa !5
  %64 = sext i32 %63 to i64
  %65 = load double*, double** %2, align 8, !tbaa !1
  %66 = getelementptr inbounds double, double* %65, i64 %64
  store double %62, double* %66, align 8, !tbaa !7
  %67 = load i32, i32* %i, align 4, !tbaa !5
  %68 = sext i32 %67 to i64
  %69 = load double*, double** %2, align 8, !tbaa !1
  %70 = getelementptr inbounds double, double* %69, i64 %68
  %71 = load double, double* %70, align 8, !tbaa !7
  %72 = load double, double* %18, align 8, !tbaa !7
  %73 = fcmp olt double %71, %72
  br i1 %73, label %74, label %80

; <label>:74                                      ; preds = %31
  %75 = load double, double* %18, align 8, !tbaa !7
  %76 = load i32, i32* %i, align 4, !tbaa !5
  %77 = sext i32 %76 to i64
  %78 = load double*, double** %2, align 8, !tbaa !1
  %79 = getelementptr inbounds double, double* %78, i64 %77
  store double %75, double* %79, align 8, !tbaa !7
  br label %80

; <label>:80                                      ; preds = %74, %31
  br label %81

; <label>:81                                      ; preds = %80
  %82 = load i32, i32* %i, align 4, !tbaa !5
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %i, align 4, !tbaa !5
  br label %27

; <label>:84                                      ; preds = %27
  %85 = load double*, double** %pHalfStep, align 8, !tbaa !1
  %86 = load double*, double** %4, align 8, !tbaa !1
  %87 = load double*, double** %5, align 8, !tbaa !1
  %88 = load double*, double** %2, align 8, !tbaa !1
  %89 = load double*, double** %10, align 8, !tbaa !1
  %90 = load double*, double** %11, align 8, !tbaa !1
  %91 = load double, double* %14, align 8, !tbaa !7
  %92 = load double, double* %15, align 8, !tbaa !7
  %93 = load double, double* %22, align 8, !tbaa !7
  %94 = load i32, i32* %23, align 4, !tbaa !5
  call void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddi(double* %85, double* %86, double* %87, double* %88, double* %89, double* %90, double %91, double %92, double %93, i32 %94)
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %95

; <label>:95                                      ; preds = %215, %84
  %96 = load i32, i32* %i1, align 4, !tbaa !5
  %97 = load i32, i32* %23, align 4, !tbaa !5
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %99, label %218

; <label>:99                                      ; preds = %95
  %100 = load i32, i32* %i1, align 4, !tbaa !5
  %101 = sext i32 %100 to i64
  %102 = load double*, double** %10, align 8, !tbaa !1
  %103 = getelementptr inbounds double, double* %102, i64 %101
  %104 = load double, double* %103, align 8, !tbaa !7
  %105 = fadd double 1.000000e+00, %104
  %106 = fdiv double 1.000000e+00, %105
  store double %106, double* %vhalf, align 8, !tbaa !7
  %107 = load i32, i32* %i1, align 4, !tbaa !5
  %108 = sext i32 %107 to i64
  %109 = load double*, double** %13, align 8, !tbaa !1
  %110 = getelementptr inbounds double, double* %109, i64 %108
  %111 = load double, double* %110, align 8, !tbaa !7
  %112 = fcmp ogt double %111, 0.000000e+00
  br i1 %112, label %113, label %118

; <label>:113                                     ; preds = %99
  %114 = load i32, i32* %i1, align 4, !tbaa !5
  %115 = sext i32 %114 to i64
  %116 = load double*, double** %3, align 8, !tbaa !1
  %117 = getelementptr inbounds double, double* %116, i64 %115
  store double 0.000000e+00, double* %117, align 8, !tbaa !7
  br label %172

; <label>:118                                     ; preds = %99
  %119 = load i32, i32* %i1, align 4, !tbaa !5
  %120 = sext i32 %119 to i64
  %121 = load double*, double** %5, align 8, !tbaa !1
  %122 = getelementptr inbounds double, double* %121, i64 %120
  %123 = load double, double* %122, align 8, !tbaa !7
  %124 = load i32, i32* %i1, align 4, !tbaa !5
  %125 = sext i32 %124 to i64
  %126 = load double*, double** %2, align 8, !tbaa !1
  %127 = getelementptr inbounds double, double* %126, i64 %125
  %128 = load double, double* %127, align 8, !tbaa !7
  %129 = fmul double %123, %128
  %130 = load double, double* %vhalf, align 8, !tbaa !7
  %131 = load double, double* %vhalf, align 8, !tbaa !7
  %132 = fmul double %130, %131
  %133 = load i32, i32* %i1, align 4, !tbaa !5
  %134 = sext i32 %133 to i64
  %135 = load double*, double** %4, align 8, !tbaa !1
  %136 = getelementptr inbounds double, double* %135, i64 %134
  %137 = load double, double* %136, align 8, !tbaa !7
  %138 = fmul double %132, %137
  %139 = load i32, i32* %i1, align 4, !tbaa !5
  %140 = sext i32 %139 to i64
  %141 = load double*, double** %pHalfStep, align 8, !tbaa !1
  %142 = getelementptr inbounds double, double* %141, i64 %140
  %143 = load double, double* %142, align 8, !tbaa !7
  %144 = fmul double %138, %143
  %145 = fadd double %129, %144
  %146 = load double, double* %21, align 8, !tbaa !7
  %147 = fdiv double %145, %146
  store double %147, double* %ssc, align 8, !tbaa !7
  %148 = load double, double* %ssc, align 8, !tbaa !7
  %149 = fcmp ole double %148, 1.111110e-37
  br i1 %149, label %150, label %151

; <label>:150                                     ; preds = %118
  store double 3.333330e-19, double* %ssc, align 8, !tbaa !7
  br label %154

; <label>:151                                     ; preds = %118
  %152 = load double, double* %ssc, align 8, !tbaa !7
  %153 = call double @_Z4SQRTd(double %152)
  store double %153, double* %ssc, align 8, !tbaa !7
  br label %154

; <label>:154                                     ; preds = %151, %150
  %155 = load double, double* %ssc, align 8, !tbaa !7
  %156 = load i32, i32* %i1, align 4, !tbaa !5
  %157 = sext i32 %156 to i64
  %158 = load double*, double** %20, align 8, !tbaa !1
  %159 = getelementptr inbounds double, double* %158, i64 %157
  %160 = load double, double* %159, align 8, !tbaa !7
  %161 = fmul double %155, %160
  %162 = load i32, i32* %i1, align 4, !tbaa !5
  %163 = sext i32 %162 to i64
  %164 = load double*, double** %19, align 8, !tbaa !1
  %165 = getelementptr inbounds double, double* %164, i64 %163
  %166 = load double, double* %165, align 8, !tbaa !7
  %167 = fadd double %161, %166
  %168 = load i32, i32* %i1, align 4, !tbaa !5
  %169 = sext i32 %168 to i64
  %170 = load double*, double** %3, align 8, !tbaa !1
  %171 = getelementptr inbounds double, double* %170, i64 %169
  store double %167, double* %171, align 8, !tbaa !7
  br label %172

; <label>:172                                     ; preds = %154, %113
  %173 = load i32, i32* %i1, align 4, !tbaa !5
  %174 = sext i32 %173 to i64
  %175 = load double*, double** %2, align 8, !tbaa !1
  %176 = getelementptr inbounds double, double* %175, i64 %174
  %177 = load double, double* %176, align 8, !tbaa !7
  %178 = load i32, i32* %i1, align 4, !tbaa !5
  %179 = sext i32 %178 to i64
  %180 = load double*, double** %13, align 8, !tbaa !1
  %181 = getelementptr inbounds double, double* %180, i64 %179
  %182 = load double, double* %181, align 8, !tbaa !7
  %183 = fmul double 5.000000e-01, %182
  %184 = load i32, i32* %i1, align 4, !tbaa !5
  %185 = sext i32 %184 to i64
  %186 = load double*, double** %6, align 8, !tbaa !1
  %187 = getelementptr inbounds double, double* %186, i64 %185
  %188 = load double, double* %187, align 8, !tbaa !7
  %189 = load i32, i32* %i1, align 4, !tbaa !5
  %190 = sext i32 %189 to i64
  %191 = load double*, double** %8, align 8, !tbaa !1
  %192 = getelementptr inbounds double, double* %191, i64 %190
  %193 = load double, double* %192, align 8, !tbaa !7
  %194 = fadd double %188, %193
  %195 = fmul double 3.000000e+00, %194
  %196 = load i32, i32* %i1, align 4, !tbaa !5
  %197 = sext i32 %196 to i64
  %198 = load double*, double** %pHalfStep, align 8, !tbaa !1
  %199 = getelementptr inbounds double, double* %198, i64 %197
  %200 = load double, double* %199, align 8, !tbaa !7
  %201 = load i32, i32* %i1, align 4, !tbaa !5
  %202 = sext i32 %201 to i64
  %203 = load double*, double** %3, align 8, !tbaa !1
  %204 = getelementptr inbounds double, double* %203, i64 %202
  %205 = load double, double* %204, align 8, !tbaa !7
  %206 = fadd double %200, %205
  %207 = fmul double 4.000000e+00, %206
  %208 = fsub double %195, %207
  %209 = fmul double %183, %208
  %210 = fadd double %177, %209
  %211 = load i32, i32* %i1, align 4, !tbaa !5
  %212 = sext i32 %211 to i64
  %213 = load double*, double** %2, align 8, !tbaa !1
  %214 = getelementptr inbounds double, double* %213, i64 %212
  store double %210, double* %214, align 8, !tbaa !7
  br label %215

; <label>:215                                     ; preds = %172
  %216 = load i32, i32* %i1, align 4, !tbaa !5
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %i1, align 4, !tbaa !5
  br label %95

; <label>:218                                     ; preds = %95
  store i32 0, i32* %i2, align 4, !tbaa !5
  br label %219

; <label>:219                                     ; preds = %264, %218
  %220 = load i32, i32* %i2, align 4, !tbaa !5
  %221 = load i32, i32* %23, align 4, !tbaa !5
  %222 = icmp slt i32 %220, %221
  br i1 %222, label %223, label %267

; <label>:223                                     ; preds = %219
  %224 = load i32, i32* %i2, align 4, !tbaa !5
  %225 = sext i32 %224 to i64
  %226 = load double*, double** %12, align 8, !tbaa !1
  %227 = getelementptr inbounds double, double* %226, i64 %225
  %228 = load double, double* %227, align 8, !tbaa !7
  %229 = fmul double 5.000000e-01, %228
  %230 = load i32, i32* %i2, align 4, !tbaa !5
  %231 = sext i32 %230 to i64
  %232 = load double*, double** %2, align 8, !tbaa !1
  %233 = getelementptr inbounds double, double* %232, i64 %231
  %234 = load double, double* %233, align 8, !tbaa !7
  %235 = fadd double %234, %229
  store double %235, double* %233, align 8, !tbaa !7
  %236 = load i32, i32* %i2, align 4, !tbaa !5
  %237 = sext i32 %236 to i64
  %238 = load double*, double** %2, align 8, !tbaa !1
  %239 = getelementptr inbounds double, double* %238, i64 %237
  %240 = load double, double* %239, align 8, !tbaa !7
  %241 = call double @_Z4FABSd(double %240)
  %242 = load double, double* %16, align 8, !tbaa !7
  %243 = fcmp olt double %241, %242
  br i1 %243, label %244, label %249

; <label>:244                                     ; preds = %223
  %245 = load i32, i32* %i2, align 4, !tbaa !5
  %246 = sext i32 %245 to i64
  %247 = load double*, double** %2, align 8, !tbaa !1
  %248 = getelementptr inbounds double, double* %247, i64 %246
  store double 0.000000e+00, double* %248, align 8, !tbaa !7
  br label %249

; <label>:249                                     ; preds = %244, %223
  %250 = load i32, i32* %i2, align 4, !tbaa !5
  %251 = sext i32 %250 to i64
  %252 = load double*, double** %2, align 8, !tbaa !1
  %253 = getelementptr inbounds double, double* %252, i64 %251
  %254 = load double, double* %253, align 8, !tbaa !7
  %255 = load double, double* %18, align 8, !tbaa !7
  %256 = fcmp olt double %254, %255
  br i1 %256, label %257, label %263

; <label>:257                                     ; preds = %249
  %258 = load double, double* %18, align 8, !tbaa !7
  %259 = load i32, i32* %i2, align 4, !tbaa !5
  %260 = sext i32 %259 to i64
  %261 = load double*, double** %2, align 8, !tbaa !1
  %262 = getelementptr inbounds double, double* %261, i64 %260
  store double %258, double* %262, align 8, !tbaa !7
  br label %263

; <label>:263                                     ; preds = %257, %249
  br label %264

; <label>:264                                     ; preds = %263
  %265 = load i32, i32* %i2, align 4, !tbaa !5
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %i2, align 4, !tbaa !5
  br label %219

; <label>:267                                     ; preds = %219
  %268 = load double*, double** %1, align 8, !tbaa !1
  %269 = load double*, double** %4, align 8, !tbaa !1
  %270 = load double*, double** %5, align 8, !tbaa !1
  %271 = load double*, double** %2, align 8, !tbaa !1
  %272 = load double*, double** %9, align 8, !tbaa !1
  %273 = load double*, double** %11, align 8, !tbaa !1
  %274 = load double, double* %14, align 8, !tbaa !7
  %275 = load double, double* %15, align 8, !tbaa !7
  %276 = load double, double* %22, align 8, !tbaa !7
  %277 = load i32, i32* %23, align 4, !tbaa !5
  call void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddi(double* %268, double* %269, double* %270, double* %271, double* %272, double* %273, double %274, double %275, double %276, i32 %277)
  store i32 0, i32* %i3, align 4, !tbaa !5
  br label %278

; <label>:278                                     ; preds = %427, %267
  %279 = load i32, i32* %i3, align 4, !tbaa !5
  %280 = load i32, i32* %23, align 4, !tbaa !5
  %281 = icmp slt i32 %279, %280
  br i1 %281, label %282, label %430

; <label>:282                                     ; preds = %278
  store double 0x3FC5555555555555, double* %sixth, align 8, !tbaa !7
  %283 = load i32, i32* %i3, align 4, !tbaa !5
  %284 = sext i32 %283 to i64
  %285 = load double*, double** %13, align 8, !tbaa !1
  %286 = getelementptr inbounds double, double* %285, i64 %284
  %287 = load double, double* %286, align 8, !tbaa !7
  %288 = fcmp ogt double %287, 0.000000e+00
  br i1 %288, label %289, label %290

; <label>:289                                     ; preds = %282
  store double 0.000000e+00, double* %q_tilde, align 8, !tbaa !7
  br label %348

; <label>:290                                     ; preds = %282
  %291 = load i32, i32* %i3, align 4, !tbaa !5
  %292 = sext i32 %291 to i64
  %293 = load double*, double** %5, align 8, !tbaa !1
  %294 = getelementptr inbounds double, double* %293, i64 %292
  %295 = load double, double* %294, align 8, !tbaa !7
  %296 = load i32, i32* %i3, align 4, !tbaa !5
  %297 = sext i32 %296 to i64
  %298 = load double*, double** %2, align 8, !tbaa !1
  %299 = getelementptr inbounds double, double* %298, i64 %297
  %300 = load double, double* %299, align 8, !tbaa !7
  %301 = fmul double %295, %300
  %302 = load i32, i32* %i3, align 4, !tbaa !5
  %303 = sext i32 %302 to i64
  %304 = load double*, double** %11, align 8, !tbaa !1
  %305 = getelementptr inbounds double, double* %304, i64 %303
  %306 = load double, double* %305, align 8, !tbaa !7
  %307 = load i32, i32* %i3, align 4, !tbaa !5
  %308 = sext i32 %307 to i64
  %309 = load double*, double** %11, align 8, !tbaa !1
  %310 = getelementptr inbounds double, double* %309, i64 %308
  %311 = load double, double* %310, align 8, !tbaa !7
  %312 = fmul double %306, %311
  %313 = load i32, i32* %i3, align 4, !tbaa !5
  %314 = sext i32 %313 to i64
  %315 = load double*, double** %4, align 8, !tbaa !1
  %316 = getelementptr inbounds double, double* %315, i64 %314
  %317 = load double, double* %316, align 8, !tbaa !7
  %318 = fmul double %312, %317
  %319 = load i32, i32* %i3, align 4, !tbaa !5
  %320 = sext i32 %319 to i64
  %321 = load double*, double** %1, align 8, !tbaa !1
  %322 = getelementptr inbounds double, double* %321, i64 %320
  %323 = load double, double* %322, align 8, !tbaa !7
  %324 = fmul double %318, %323
  %325 = fadd double %301, %324
  %326 = load double, double* %21, align 8, !tbaa !7
  %327 = fdiv double %325, %326
  store double %327, double* %ssc4, align 8, !tbaa !7
  %328 = load double, double* %ssc4, align 8, !tbaa !7
  %329 = fcmp ole double %328, 1.111110e-37
  br i1 %329, label %330, label %331

; <label>:330                                     ; preds = %290
  store double 3.333330e-19, double* %ssc4, align 8, !tbaa !7
  br label %334

; <label>:331                                     ; preds = %290
  %332 = load double, double* %ssc4, align 8, !tbaa !7
  %333 = call double @_Z4SQRTd(double %332)
  store double %333, double* %ssc4, align 8, !tbaa !7
  br label %334

; <label>:334                                     ; preds = %331, %330
  %335 = load double, double* %ssc4, align 8, !tbaa !7
  %336 = load i32, i32* %i3, align 4, !tbaa !5
  %337 = sext i32 %336 to i64
  %338 = load double*, double** %20, align 8, !tbaa !1
  %339 = getelementptr inbounds double, double* %338, i64 %337
  %340 = load double, double* %339, align 8, !tbaa !7
  %341 = fmul double %335, %340
  %342 = load i32, i32* %i3, align 4, !tbaa !5
  %343 = sext i32 %342 to i64
  %344 = load double*, double** %19, align 8, !tbaa !1
  %345 = getelementptr inbounds double, double* %344, i64 %343
  %346 = load double, double* %345, align 8, !tbaa !7
  %347 = fadd double %341, %346
  store double %347, double* %q_tilde, align 8, !tbaa !7
  br label %348

; <label>:348                                     ; preds = %334, %289
  %349 = load i32, i32* %i3, align 4, !tbaa !5
  %350 = sext i32 %349 to i64
  %351 = load double*, double** %2, align 8, !tbaa !1
  %352 = getelementptr inbounds double, double* %351, i64 %350
  %353 = load double, double* %352, align 8, !tbaa !7
  %354 = load i32, i32* %i3, align 4, !tbaa !5
  %355 = sext i32 %354 to i64
  %356 = load double*, double** %6, align 8, !tbaa !1
  %357 = getelementptr inbounds double, double* %356, i64 %355
  %358 = load double, double* %357, align 8, !tbaa !7
  %359 = load i32, i32* %i3, align 4, !tbaa !5
  %360 = sext i32 %359 to i64
  %361 = load double*, double** %8, align 8, !tbaa !1
  %362 = getelementptr inbounds double, double* %361, i64 %360
  %363 = load double, double* %362, align 8, !tbaa !7
  %364 = fadd double %358, %363
  %365 = fmul double 7.000000e+00, %364
  %366 = load i32, i32* %i3, align 4, !tbaa !5
  %367 = sext i32 %366 to i64
  %368 = load double*, double** %pHalfStep, align 8, !tbaa !1
  %369 = getelementptr inbounds double, double* %368, i64 %367
  %370 = load double, double* %369, align 8, !tbaa !7
  %371 = load i32, i32* %i3, align 4, !tbaa !5
  %372 = sext i32 %371 to i64
  %373 = load double*, double** %3, align 8, !tbaa !1
  %374 = getelementptr inbounds double, double* %373, i64 %372
  %375 = load double, double* %374, align 8, !tbaa !7
  %376 = fadd double %370, %375
  %377 = fmul double 8.000000e+00, %376
  %378 = fsub double %365, %377
  %379 = load i32, i32* %i3, align 4, !tbaa !5
  %380 = sext i32 %379 to i64
  %381 = load double*, double** %1, align 8, !tbaa !1
  %382 = getelementptr inbounds double, double* %381, i64 %380
  %383 = load double, double* %382, align 8, !tbaa !7
  %384 = load double, double* %q_tilde, align 8, !tbaa !7
  %385 = fadd double %383, %384
  %386 = fadd double %378, %385
  %387 = load i32, i32* %i3, align 4, !tbaa !5
  %388 = sext i32 %387 to i64
  %389 = load double*, double** %13, align 8, !tbaa !1
  %390 = getelementptr inbounds double, double* %389, i64 %388
  %391 = load double, double* %390, align 8, !tbaa !7
  %392 = fmul double %386, %391
  %393 = fmul double %392, 0x3FC5555555555555
  %394 = fsub double %353, %393
  %395 = load i32, i32* %i3, align 4, !tbaa !5
  %396 = sext i32 %395 to i64
  %397 = load double*, double** %2, align 8, !tbaa !1
  %398 = getelementptr inbounds double, double* %397, i64 %396
  store double %394, double* %398, align 8, !tbaa !7
  %399 = load i32, i32* %i3, align 4, !tbaa !5
  %400 = sext i32 %399 to i64
  %401 = load double*, double** %2, align 8, !tbaa !1
  %402 = getelementptr inbounds double, double* %401, i64 %400
  %403 = load double, double* %402, align 8, !tbaa !7
  %404 = call double @_Z4FABSd(double %403)
  %405 = load double, double* %16, align 8, !tbaa !7
  %406 = fcmp olt double %404, %405
  br i1 %406, label %407, label %412

; <label>:407                                     ; preds = %348
  %408 = load i32, i32* %i3, align 4, !tbaa !5
  %409 = sext i32 %408 to i64
  %410 = load double*, double** %2, align 8, !tbaa !1
  %411 = getelementptr inbounds double, double* %410, i64 %409
  store double 0.000000e+00, double* %411, align 8, !tbaa !7
  br label %412

; <label>:412                                     ; preds = %407, %348
  %413 = load i32, i32* %i3, align 4, !tbaa !5
  %414 = sext i32 %413 to i64
  %415 = load double*, double** %2, align 8, !tbaa !1
  %416 = getelementptr inbounds double, double* %415, i64 %414
  %417 = load double, double* %416, align 8, !tbaa !7
  %418 = load double, double* %18, align 8, !tbaa !7
  %419 = fcmp olt double %417, %418
  br i1 %419, label %420, label %426

; <label>:420                                     ; preds = %412
  %421 = load double, double* %18, align 8, !tbaa !7
  %422 = load i32, i32* %i3, align 4, !tbaa !5
  %423 = sext i32 %422 to i64
  %424 = load double*, double** %2, align 8, !tbaa !1
  %425 = getelementptr inbounds double, double* %424, i64 %423
  store double %421, double* %425, align 8, !tbaa !7
  br label %426

; <label>:426                                     ; preds = %420, %412
  br label %427

; <label>:427                                     ; preds = %426
  %428 = load i32, i32* %i3, align 4, !tbaa !5
  %429 = add nsw i32 %428, 1
  store i32 %429, i32* %i3, align 4, !tbaa !5
  br label %278

; <label>:430                                     ; preds = %278
  %431 = load double*, double** %1, align 8, !tbaa !1
  %432 = load double*, double** %4, align 8, !tbaa !1
  %433 = load double*, double** %5, align 8, !tbaa !1
  %434 = load double*, double** %2, align 8, !tbaa !1
  %435 = load double*, double** %9, align 8, !tbaa !1
  %436 = load double*, double** %11, align 8, !tbaa !1
  %437 = load double, double* %14, align 8, !tbaa !7
  %438 = load double, double* %15, align 8, !tbaa !7
  %439 = load double, double* %22, align 8, !tbaa !7
  %440 = load i32, i32* %23, align 4, !tbaa !5
  call void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddi(double* %431, double* %432, double* %433, double* %434, double* %435, double* %436, double %437, double %438, double %439, i32 %440)
  store i32 0, i32* %i5, align 4, !tbaa !5
  br label %441

; <label>:441                                     ; preds = %529, %430
  %442 = load i32, i32* %i5, align 4, !tbaa !5
  %443 = load i32, i32* %23, align 4, !tbaa !5
  %444 = icmp slt i32 %442, %443
  br i1 %444, label %445, label %532

; <label>:445                                     ; preds = %441
  %446 = load i32, i32* %i5, align 4, !tbaa !5
  %447 = sext i32 %446 to i64
  %448 = load double*, double** %13, align 8, !tbaa !1
  %449 = getelementptr inbounds double, double* %448, i64 %447
  %450 = load double, double* %449, align 8, !tbaa !7
  %451 = fcmp ole double %450, 0.000000e+00
  br i1 %451, label %452, label %528

; <label>:452                                     ; preds = %445
  %453 = load i32, i32* %i5, align 4, !tbaa !5
  %454 = sext i32 %453 to i64
  %455 = load double*, double** %5, align 8, !tbaa !1
  %456 = getelementptr inbounds double, double* %455, i64 %454
  %457 = load double, double* %456, align 8, !tbaa !7
  %458 = load i32, i32* %i5, align 4, !tbaa !5
  %459 = sext i32 %458 to i64
  %460 = load double*, double** %2, align 8, !tbaa !1
  %461 = getelementptr inbounds double, double* %460, i64 %459
  %462 = load double, double* %461, align 8, !tbaa !7
  %463 = fmul double %457, %462
  %464 = load i32, i32* %i5, align 4, !tbaa !5
  %465 = sext i32 %464 to i64
  %466 = load double*, double** %11, align 8, !tbaa !1
  %467 = getelementptr inbounds double, double* %466, i64 %465
  %468 = load double, double* %467, align 8, !tbaa !7
  %469 = load i32, i32* %i5, align 4, !tbaa !5
  %470 = sext i32 %469 to i64
  %471 = load double*, double** %11, align 8, !tbaa !1
  %472 = getelementptr inbounds double, double* %471, i64 %470
  %473 = load double, double* %472, align 8, !tbaa !7
  %474 = fmul double %468, %473
  %475 = load i32, i32* %i5, align 4, !tbaa !5
  %476 = sext i32 %475 to i64
  %477 = load double*, double** %4, align 8, !tbaa !1
  %478 = getelementptr inbounds double, double* %477, i64 %476
  %479 = load double, double* %478, align 8, !tbaa !7
  %480 = fmul double %474, %479
  %481 = load i32, i32* %i5, align 4, !tbaa !5
  %482 = sext i32 %481 to i64
  %483 = load double*, double** %1, align 8, !tbaa !1
  %484 = getelementptr inbounds double, double* %483, i64 %482
  %485 = load double, double* %484, align 8, !tbaa !7
  %486 = fmul double %480, %485
  %487 = fadd double %463, %486
  %488 = load double, double* %21, align 8, !tbaa !7
  %489 = fdiv double %487, %488
  store double %489, double* %ssc6, align 8, !tbaa !7
  %490 = load double, double* %ssc6, align 8, !tbaa !7
  %491 = fcmp ole double %490, 1.111110e-37
  br i1 %491, label %492, label %493

; <label>:492                                     ; preds = %452
  store double 3.333330e-19, double* %ssc6, align 8, !tbaa !7
  br label %496

; <label>:493                                     ; preds = %452
  %494 = load double, double* %ssc6, align 8, !tbaa !7
  %495 = call double @_Z4SQRTd(double %494)
  store double %495, double* %ssc6, align 8, !tbaa !7
  br label %496

; <label>:496                                     ; preds = %493, %492
  %497 = load double, double* %ssc6, align 8, !tbaa !7
  %498 = load i32, i32* %i5, align 4, !tbaa !5
  %499 = sext i32 %498 to i64
  %500 = load double*, double** %20, align 8, !tbaa !1
  %501 = getelementptr inbounds double, double* %500, i64 %499
  %502 = load double, double* %501, align 8, !tbaa !7
  %503 = fmul double %497, %502
  %504 = load i32, i32* %i5, align 4, !tbaa !5
  %505 = sext i32 %504 to i64
  %506 = load double*, double** %19, align 8, !tbaa !1
  %507 = getelementptr inbounds double, double* %506, i64 %505
  %508 = load double, double* %507, align 8, !tbaa !7
  %509 = fadd double %503, %508
  %510 = load i32, i32* %i5, align 4, !tbaa !5
  %511 = sext i32 %510 to i64
  %512 = load double*, double** %3, align 8, !tbaa !1
  %513 = getelementptr inbounds double, double* %512, i64 %511
  store double %509, double* %513, align 8, !tbaa !7
  %514 = load i32, i32* %i5, align 4, !tbaa !5
  %515 = sext i32 %514 to i64
  %516 = load double*, double** %3, align 8, !tbaa !1
  %517 = getelementptr inbounds double, double* %516, i64 %515
  %518 = load double, double* %517, align 8, !tbaa !7
  %519 = call double @_Z4FABSd(double %518)
  %520 = load double, double* %17, align 8, !tbaa !7
  %521 = fcmp olt double %519, %520
  br i1 %521, label %522, label %527

; <label>:522                                     ; preds = %496
  %523 = load i32, i32* %i5, align 4, !tbaa !5
  %524 = sext i32 %523 to i64
  %525 = load double*, double** %3, align 8, !tbaa !1
  %526 = getelementptr inbounds double, double* %525, i64 %524
  store double 0.000000e+00, double* %526, align 8, !tbaa !7
  br label %527

; <label>:527                                     ; preds = %522, %496
  br label %528

; <label>:528                                     ; preds = %527, %445
  br label %529

; <label>:529                                     ; preds = %528
  %530 = load i32, i32* %i5, align 4, !tbaa !5
  %531 = add nsw i32 %530, 1
  store i32 %531, i32* %i5, align 4, !tbaa !5
  br label %441

; <label>:532                                     ; preds = %441
  call void @_Z7ReleaseIdEvPPT_(double** %pHalfStep)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL22CalcSoundSpeedForElemsPddS_S_S_S_di(double* %vnewc, double %rho0, double* %enewc, double* %pnewc, double* %pbvc, double* %bvc, double %ss4o3, i32 %nz) #6 {
  %1 = alloca double*, align 8
  %2 = alloca double, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %i = alloca i32, align 4
  %iz = alloca i32, align 4
  %ssTmp = alloca double, align 8
  store double* %vnewc, double** %1, align 8, !tbaa !1
  store double %rho0, double* %2, align 8, !tbaa !7
  store double* %enewc, double** %3, align 8, !tbaa !1
  store double* %pnewc, double** %4, align 8, !tbaa !1
  store double* %pbvc, double** %5, align 8, !tbaa !1
  store double* %bvc, double** %6, align 8, !tbaa !1
  store double %ss4o3, double* %7, align 8, !tbaa !7
  store i32 %nz, i32* %8, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %9

; <label>:9                                       ; preds = %64, %0
  %10 = load i32, i32* %i, align 4, !tbaa !5
  %11 = load i32, i32* %8, align 4, !tbaa !5
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %67

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %i, align 4, !tbaa !5
  %15 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %14)
  %16 = load i32, i32* %15, !tbaa !5
  store i32 %16, i32* %iz, align 4, !tbaa !5
  %17 = load i32, i32* %i, align 4, !tbaa !5
  %18 = sext i32 %17 to i64
  %19 = load double*, double** %5, align 8, !tbaa !1
  %20 = getelementptr inbounds double, double* %19, i64 %18
  %21 = load double, double* %20, align 8, !tbaa !7
  %22 = load i32, i32* %i, align 4, !tbaa !5
  %23 = sext i32 %22 to i64
  %24 = load double*, double** %3, align 8, !tbaa !1
  %25 = getelementptr inbounds double, double* %24, i64 %23
  %26 = load double, double* %25, align 8, !tbaa !7
  %27 = fmul double %21, %26
  %28 = load i32, i32* %i, align 4, !tbaa !5
  %29 = sext i32 %28 to i64
  %30 = load double*, double** %1, align 8, !tbaa !1
  %31 = getelementptr inbounds double, double* %30, i64 %29
  %32 = load double, double* %31, align 8, !tbaa !7
  %33 = load i32, i32* %i, align 4, !tbaa !5
  %34 = sext i32 %33 to i64
  %35 = load double*, double** %1, align 8, !tbaa !1
  %36 = getelementptr inbounds double, double* %35, i64 %34
  %37 = load double, double* %36, align 8, !tbaa !7
  %38 = fmul double %32, %37
  %39 = load i32, i32* %i, align 4, !tbaa !5
  %40 = sext i32 %39 to i64
  %41 = load double*, double** %6, align 8, !tbaa !1
  %42 = getelementptr inbounds double, double* %41, i64 %40
  %43 = load double, double* %42, align 8, !tbaa !7
  %44 = fmul double %38, %43
  %45 = load i32, i32* %i, align 4, !tbaa !5
  %46 = sext i32 %45 to i64
  %47 = load double*, double** %4, align 8, !tbaa !1
  %48 = getelementptr inbounds double, double* %47, i64 %46
  %49 = load double, double* %48, align 8, !tbaa !7
  %50 = fmul double %44, %49
  %51 = fadd double %27, %50
  %52 = load double, double* %2, align 8, !tbaa !7
  %53 = fdiv double %51, %52
  store double %53, double* %ssTmp, align 8, !tbaa !7
  %54 = load double, double* %ssTmp, align 8, !tbaa !7
  %55 = fcmp ole double %54, 1.111110e-37
  br i1 %55, label %56, label %57

; <label>:56                                      ; preds = %13
  store double 3.333330e-19, double* %ssTmp, align 8, !tbaa !7
  br label %60

; <label>:57                                      ; preds = %13
  %58 = load double, double* %ssTmp, align 8, !tbaa !7
  %59 = call double @_Z4SQRTd(double %58)
  store double %59, double* %ssTmp, align 8, !tbaa !7
  br label %60

; <label>:60                                      ; preds = %57, %56
  %61 = load double, double* %ssTmp, align 8, !tbaa !7
  %62 = load i32, i32* %iz, align 4, !tbaa !5
  %63 = call dereferenceable(8) double* @_ZN6Domain2ssEi(%struct.Domain* @domain, i32 %62)
  store double %61, double* %63, !tbaa !7
  br label %64

; <label>:64                                      ; preds = %60
  %65 = load i32, i32* %i, align 4, !tbaa !5
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %i, align 4, !tbaa !5
  br label %9

; <label>:67                                      ; preds = %9
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL20CalcPressureForElemsPdS_S_S_S_S_dddi(double* %p_new, double* %bvc, double* %pbvc, double* %e_old, double* %compression, double* %vnewc, double %pmin, double %p_cut, double %eosvmax, i32 %length) #0 {
  %1 = alloca double*, align 8
  %2 = alloca double*, align 8
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %i = alloca i32, align 4
  %c1s = alloca double, align 8
  %i1 = alloca i32, align 4
  store double* %p_new, double** %1, align 8, !tbaa !1
  store double* %bvc, double** %2, align 8, !tbaa !1
  store double* %pbvc, double** %3, align 8, !tbaa !1
  store double* %e_old, double** %4, align 8, !tbaa !1
  store double* %compression, double** %5, align 8, !tbaa !1
  store double* %vnewc, double** %6, align 8, !tbaa !1
  store double %pmin, double* %7, align 8, !tbaa !7
  store double %p_cut, double* %8, align 8, !tbaa !7
  store double %eosvmax, double* %9, align 8, !tbaa !7
  store i32 %length, i32* %10, align 4, !tbaa !5
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %11

; <label>:11                                      ; preds = %33, %0
  %12 = load i32, i32* %i, align 4, !tbaa !5
  %13 = load i32, i32* %10, align 4, !tbaa !5
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %36

; <label>:15                                      ; preds = %11
  store double 0x3FE5555555555555, double* %c1s, align 8, !tbaa !7
  %16 = load double, double* %c1s, align 8, !tbaa !7
  %17 = load i32, i32* %i, align 4, !tbaa !5
  %18 = sext i32 %17 to i64
  %19 = load double*, double** %5, align 8, !tbaa !1
  %20 = getelementptr inbounds double, double* %19, i64 %18
  %21 = load double, double* %20, align 8, !tbaa !7
  %22 = fadd double %21, 1.000000e+00
  %23 = fmul double %16, %22
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = sext i32 %24 to i64
  %26 = load double*, double** %2, align 8, !tbaa !1
  %27 = getelementptr inbounds double, double* %26, i64 %25
  store double %23, double* %27, align 8, !tbaa !7
  %28 = load double, double* %c1s, align 8, !tbaa !7
  %29 = load i32, i32* %i, align 4, !tbaa !5
  %30 = sext i32 %29 to i64
  %31 = load double*, double** %3, align 8, !tbaa !1
  %32 = getelementptr inbounds double, double* %31, i64 %30
  store double %28, double* %32, align 8, !tbaa !7
  br label %33

; <label>:33                                      ; preds = %15
  %34 = load i32, i32* %i, align 4, !tbaa !5
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %i, align 4, !tbaa !5
  br label %11

; <label>:36                                      ; preds = %11
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %37

; <label>:37                                      ; preds = %98, %36
  %38 = load i32, i32* %i1, align 4, !tbaa !5
  %39 = load i32, i32* %10, align 4, !tbaa !5
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %41, label %101

; <label>:41                                      ; preds = %37
  %42 = load i32, i32* %i1, align 4, !tbaa !5
  %43 = sext i32 %42 to i64
  %44 = load double*, double** %2, align 8, !tbaa !1
  %45 = getelementptr inbounds double, double* %44, i64 %43
  %46 = load double, double* %45, align 8, !tbaa !7
  %47 = load i32, i32* %i1, align 4, !tbaa !5
  %48 = sext i32 %47 to i64
  %49 = load double*, double** %4, align 8, !tbaa !1
  %50 = getelementptr inbounds double, double* %49, i64 %48
  %51 = load double, double* %50, align 8, !tbaa !7
  %52 = fmul double %46, %51
  %53 = load i32, i32* %i1, align 4, !tbaa !5
  %54 = sext i32 %53 to i64
  %55 = load double*, double** %1, align 8, !tbaa !1
  %56 = getelementptr inbounds double, double* %55, i64 %54
  store double %52, double* %56, align 8, !tbaa !7
  %57 = load i32, i32* %i1, align 4, !tbaa !5
  %58 = sext i32 %57 to i64
  %59 = load double*, double** %1, align 8, !tbaa !1
  %60 = getelementptr inbounds double, double* %59, i64 %58
  %61 = load double, double* %60, align 8, !tbaa !7
  %62 = call double @_Z4FABSd(double %61)
  %63 = load double, double* %8, align 8, !tbaa !7
  %64 = fcmp olt double %62, %63
  br i1 %64, label %65, label %70

; <label>:65                                      ; preds = %41
  %66 = load i32, i32* %i1, align 4, !tbaa !5
  %67 = sext i32 %66 to i64
  %68 = load double*, double** %1, align 8, !tbaa !1
  %69 = getelementptr inbounds double, double* %68, i64 %67
  store double 0.000000e+00, double* %69, align 8, !tbaa !7
  br label %70

; <label>:70                                      ; preds = %65, %41
  %71 = load i32, i32* %i1, align 4, !tbaa !5
  %72 = sext i32 %71 to i64
  %73 = load double*, double** %6, align 8, !tbaa !1
  %74 = getelementptr inbounds double, double* %73, i64 %72
  %75 = load double, double* %74, align 8, !tbaa !7
  %76 = load double, double* %9, align 8, !tbaa !7
  %77 = fcmp oge double %75, %76
  br i1 %77, label %78, label %83

; <label>:78                                      ; preds = %70
  %79 = load i32, i32* %i1, align 4, !tbaa !5
  %80 = sext i32 %79 to i64
  %81 = load double*, double** %1, align 8, !tbaa !1
  %82 = getelementptr inbounds double, double* %81, i64 %80
  store double 0.000000e+00, double* %82, align 8, !tbaa !7
  br label %83

; <label>:83                                      ; preds = %78, %70
  %84 = load i32, i32* %i1, align 4, !tbaa !5
  %85 = sext i32 %84 to i64
  %86 = load double*, double** %1, align 8, !tbaa !1
  %87 = getelementptr inbounds double, double* %86, i64 %85
  %88 = load double, double* %87, align 8, !tbaa !7
  %89 = load double, double* %7, align 8, !tbaa !7
  %90 = fcmp olt double %88, %89
  br i1 %90, label %91, label %97

; <label>:91                                      ; preds = %83
  %92 = load double, double* %7, align 8, !tbaa !7
  %93 = load i32, i32* %i1, align 4, !tbaa !5
  %94 = sext i32 %93 to i64
  %95 = load double*, double** %1, align 8, !tbaa !1
  %96 = getelementptr inbounds double, double* %95, i64 %94
  store double %92, double* %96, align 8, !tbaa !7
  br label %97

; <label>:97                                      ; preds = %91, %83
  br label %98

; <label>:98                                      ; preds = %97
  %99 = load i32, i32* %i1, align 4, !tbaa !5
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %i1, align 4, !tbaa !5
  br label %37

; <label>:101                                     ; preds = %37
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_ZL29CalcCourantConstraintForElemsv() #6 {
  %dtcourant = alloca double, align 8
  %courant_elem = alloca i32, align 4
  %qqc = alloca double, align 8
  %length = alloca i32, align 4
  %qqc2 = alloca double, align 8
  %threads = alloca i32, align 4
  %1 = alloca i8*
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %indx = alloca i32, align 4
  %dtf = alloca double, align 8
  %thread_num = alloca i32, align 4
  %i2 = alloca i32, align 4
  %2 = alloca i32
  store double 1.000000e+20, double* %dtcourant, align 8, !tbaa !7
  store i32 -1, i32* %courant_elem, align 4, !tbaa !5
  %3 = call dereferenceable(8) double* @_ZN6Domain3qqcEv(%struct.Domain* @domain)
  %4 = load double, double* %3, !tbaa !7
  store double %4, double* %qqc, align 8, !tbaa !7
  %5 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %6 = load i32, i32* %5, !tbaa !5
  store i32 %6, i32* %length, align 4, !tbaa !5
  %7 = load double, double* %qqc, align 8, !tbaa !7
  %8 = fmul double 6.400000e+01, %7
  %9 = load double, double* %qqc, align 8, !tbaa !7
  %10 = fmul double %8, %9
  store double %10, double* %qqc2, align 8, !tbaa !7
  %11 = call i32 @omp_get_max_threads() #1
  store i32 %11, i32* %threads, align 4, !tbaa !5
  %12 = load i32, i32* %threads, align 4, !tbaa !5
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %1
  %15 = alloca i32, i64 %13, align 16
  %16 = load i32, i32* %threads, align 4, !tbaa !5
  %17 = zext i32 %16 to i64
  %18 = alloca double, i64 %17, align 16
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %19

; <label>:19                                      ; preds = %30, %0
  %20 = load i32, i32* %i, align 4, !tbaa !5
  %21 = load i32, i32* %threads, align 4, !tbaa !5
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %33

; <label>:23                                      ; preds = %19
  %24 = load i32, i32* %i, align 4, !tbaa !5
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %15, i64 %25
  store i32 -1, i32* %26, align 4, !tbaa !5
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds double, double* %18, i64 %28
  store double 1.000000e+20, double* %29, align 8, !tbaa !7
  br label %30

; <label>:30                                      ; preds = %23
  %31 = load i32, i32* %i, align 4, !tbaa !5
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %i, align 4, !tbaa !5
  br label %19

; <label>:33                                      ; preds = %19
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %34

; <label>:34                                      ; preds = %104, %33
  %35 = load i32, i32* %i1, align 4, !tbaa !5
  %36 = load i32, i32* %length, align 4, !tbaa !5
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %107

; <label>:38                                      ; preds = %34
  %39 = load i32, i32* %i1, align 4, !tbaa !5
  %40 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %39)
  %41 = load i32, i32* %40, !tbaa !5
  store i32 %41, i32* %indx, align 4, !tbaa !5
  %42 = load i32, i32* %indx, align 4, !tbaa !5
  %43 = call dereferenceable(8) double* @_ZN6Domain2ssEi(%struct.Domain* @domain, i32 %42)
  %44 = load double, double* %43, !tbaa !7
  %45 = load i32, i32* %indx, align 4, !tbaa !5
  %46 = call dereferenceable(8) double* @_ZN6Domain2ssEi(%struct.Domain* @domain, i32 %45)
  %47 = load double, double* %46, !tbaa !7
  %48 = fmul double %44, %47
  store double %48, double* %dtf, align 8, !tbaa !7
  %49 = load i32, i32* %indx, align 4, !tbaa !5
  %50 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %49)
  %51 = load double, double* %50, !tbaa !7
  %52 = fcmp olt double %51, 0.000000e+00
  br i1 %52, label %53, label %73

; <label>:53                                      ; preds = %38
  %54 = load double, double* %dtf, align 8, !tbaa !7
  %55 = load double, double* %qqc2, align 8, !tbaa !7
  %56 = load i32, i32* %indx, align 4, !tbaa !5
  %57 = call dereferenceable(8) double* @_ZN6Domain6arealgEi(%struct.Domain* @domain, i32 %56)
  %58 = load double, double* %57, !tbaa !7
  %59 = fmul double %55, %58
  %60 = load i32, i32* %indx, align 4, !tbaa !5
  %61 = call dereferenceable(8) double* @_ZN6Domain6arealgEi(%struct.Domain* @domain, i32 %60)
  %62 = load double, double* %61, !tbaa !7
  %63 = fmul double %59, %62
  %64 = load i32, i32* %indx, align 4, !tbaa !5
  %65 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %64)
  %66 = load double, double* %65, !tbaa !7
  %67 = fmul double %63, %66
  %68 = load i32, i32* %indx, align 4, !tbaa !5
  %69 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %68)
  %70 = load double, double* %69, !tbaa !7
  %71 = fmul double %67, %70
  %72 = fadd double %54, %71
  store double %72, double* %dtf, align 8, !tbaa !7
  br label %73

; <label>:73                                      ; preds = %53, %38
  %74 = load double, double* %dtf, align 8, !tbaa !7
  %75 = call double @_Z4SQRTd(double %74)
  store double %75, double* %dtf, align 8, !tbaa !7
  %76 = load i32, i32* %indx, align 4, !tbaa !5
  %77 = call dereferenceable(8) double* @_ZN6Domain6arealgEi(%struct.Domain* @domain, i32 %76)
  %78 = load double, double* %77, !tbaa !7
  %79 = load double, double* %dtf, align 8, !tbaa !7
  %80 = fdiv double %78, %79
  store double %80, double* %dtf, align 8, !tbaa !7
  %81 = load i32, i32* %indx, align 4, !tbaa !5
  %82 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %81)
  %83 = load double, double* %82, !tbaa !7
  %84 = fcmp une double %83, 0.000000e+00
  br i1 %84, label %85, label %103

; <label>:85                                      ; preds = %73
  %86 = call i32 @omp_get_thread_num() #1
  store i32 %86, i32* %thread_num, align 4, !tbaa !5
  %87 = load double, double* %dtf, align 8, !tbaa !7
  %88 = load i32, i32* %thread_num, align 4, !tbaa !5
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %18, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !7
  %92 = fcmp olt double %87, %91
  br i1 %92, label %93, label %102

; <label>:93                                      ; preds = %85
  %94 = load double, double* %dtf, align 8, !tbaa !7
  %95 = load i32, i32* %thread_num, align 4, !tbaa !5
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds double, double* %18, i64 %96
  store double %94, double* %97, align 8, !tbaa !7
  %98 = load i32, i32* %indx, align 4, !tbaa !5
  %99 = load i32, i32* %thread_num, align 4, !tbaa !5
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %15, i64 %100
  store i32 %98, i32* %101, align 4, !tbaa !5
  br label %102

; <label>:102                                     ; preds = %93, %85
  br label %103

; <label>:103                                     ; preds = %102, %73
  br label %104

; <label>:104                                     ; preds = %103
  %105 = load i32, i32* %i1, align 4, !tbaa !5
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %i1, align 4, !tbaa !5
  br label %34

; <label>:107                                     ; preds = %34
  store i32 0, i32* %i2, align 4, !tbaa !5
  br label %108

; <label>:108                                     ; preds = %129, %107
  %109 = load i32, i32* %i2, align 4, !tbaa !5
  %110 = load i32, i32* %threads, align 4, !tbaa !5
  %111 = icmp slt i32 %109, %110
  br i1 %111, label %112, label %132

; <label>:112                                     ; preds = %108
  %113 = load i32, i32* %i2, align 4, !tbaa !5
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds double, double* %18, i64 %114
  %116 = load double, double* %115, align 8, !tbaa !7
  %117 = load double, double* %dtcourant, align 8, !tbaa !7
  %118 = fcmp olt double %116, %117
  br i1 %118, label %119, label %128

; <label>:119                                     ; preds = %112
  %120 = load i32, i32* %i2, align 4, !tbaa !5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double, double* %18, i64 %121
  %123 = load double, double* %122, align 8, !tbaa !7
  store double %123, double* %dtcourant, align 8, !tbaa !7
  %124 = load i32, i32* %i2, align 4, !tbaa !5
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %15, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !5
  store i32 %127, i32* %courant_elem, align 4, !tbaa !5
  br label %128

; <label>:128                                     ; preds = %119, %112
  br label %129

; <label>:129                                     ; preds = %128
  %130 = load i32, i32* %i2, align 4, !tbaa !5
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %i2, align 4, !tbaa !5
  br label %108

; <label>:132                                     ; preds = %108
  %133 = load i32, i32* %courant_elem, align 4, !tbaa !5
  %134 = icmp ne i32 %133, -1
  br i1 %134, label %135, label %138

; <label>:135                                     ; preds = %132
  %136 = load double, double* %dtcourant, align 8, !tbaa !7
  %137 = call dereferenceable(8) double* @_ZN6Domain9dtcourantEv(%struct.Domain* @domain)
  store double %136, double* %137, !tbaa !7
  br label %138

; <label>:138                                     ; preds = %135, %132
  store i32 1, i32* %2
  %139 = load i8*, i8** %1
  call void @llvm.stackrestore(i8* %139)
  ret void
}

; Function Attrs: inlinehint uwtable
define internal void @_ZL27CalcHydroConstraintForElemsv() #0 {
  %dthydro = alloca double, align 8
  %hydro_elem = alloca i32, align 4
  %dvovmax = alloca double, align 8
  %length = alloca i32, align 4
  %threads = alloca i32, align 4
  %1 = alloca i8*
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %indx = alloca i32, align 4
  %dtdvov = alloca double, align 8
  %thread_num = alloca i32, align 4
  %i2 = alloca i32, align 4
  %2 = alloca i32
  store double 1.000000e+20, double* %dthydro, align 8, !tbaa !7
  store i32 -1, i32* %hydro_elem, align 4, !tbaa !5
  %3 = call dereferenceable(8) double* @_ZN6Domain7dvovmaxEv(%struct.Domain* @domain)
  %4 = load double, double* %3, !tbaa !7
  store double %4, double* %dvovmax, align 8, !tbaa !7
  %5 = call dereferenceable(4) i32* @_ZN6Domain7numElemEv(%struct.Domain* @domain)
  %6 = load i32, i32* %5, !tbaa !5
  store i32 %6, i32* %length, align 4, !tbaa !5
  %7 = call i32 @omp_get_max_threads() #1
  store i32 %7, i32* %threads, align 4, !tbaa !5
  %8 = load i32, i32* %threads, align 4, !tbaa !5
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %1
  %11 = alloca double, i64 %9, align 16
  %12 = load i32, i32* %threads, align 4, !tbaa !5
  %13 = zext i32 %12 to i64
  %14 = alloca i32, i64 %13, align 16
  store i32 0, i32* %i, align 4, !tbaa !5
  br label %15

; <label>:15                                      ; preds = %26, %0
  %16 = load i32, i32* %i, align 4, !tbaa !5
  %17 = load i32, i32* %threads, align 4, !tbaa !5
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %29

; <label>:19                                      ; preds = %15
  %20 = load i32, i32* %i, align 4, !tbaa !5
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %14, i64 %21
  store i32 -1, i32* %22, align 4, !tbaa !5
  %23 = load i32, i32* %i, align 4, !tbaa !5
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds double, double* %11, i64 %24
  store double 1.000000e+20, double* %25, align 8, !tbaa !7
  br label %26

; <label>:26                                      ; preds = %19
  %27 = load i32, i32* %i, align 4, !tbaa !5
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %i, align 4, !tbaa !5
  br label %15

; <label>:29                                      ; preds = %15
  store i32 0, i32* %i1, align 4, !tbaa !5
  br label %30

; <label>:30                                      ; preds = %68, %29
  %31 = load i32, i32* %i1, align 4, !tbaa !5
  %32 = load i32, i32* %length, align 4, !tbaa !5
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %71

; <label>:34                                      ; preds = %30
  %35 = load i32, i32* %i1, align 4, !tbaa !5
  %36 = call dereferenceable(4) i32* @_ZN6Domain11matElemlistEi(%struct.Domain* @domain, i32 %35)
  %37 = load i32, i32* %36, !tbaa !5
  store i32 %37, i32* %indx, align 4, !tbaa !5
  %38 = load i32, i32* %indx, align 4, !tbaa !5
  %39 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %38)
  %40 = load double, double* %39, !tbaa !7
  %41 = fcmp une double %40, 0.000000e+00
  br i1 %41, label %42, label %67

; <label>:42                                      ; preds = %34
  %43 = load double, double* %dvovmax, align 8, !tbaa !7
  %44 = load i32, i32* %indx, align 4, !tbaa !5
  %45 = call dereferenceable(8) double* @_ZN6Domain4vdovEi(%struct.Domain* @domain, i32 %44)
  %46 = load double, double* %45, !tbaa !7
  %47 = call double @_Z4FABSd(double %46)
  %48 = fadd double %47, 1.000000e-20
  %49 = fdiv double %43, %48
  store double %49, double* %dtdvov, align 8, !tbaa !7
  %50 = call i32 @omp_get_thread_num() #1
  store i32 %50, i32* %thread_num, align 4, !tbaa !5
  %51 = load i32, i32* %thread_num, align 4, !tbaa !5
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %11, i64 %52
  %54 = load double, double* %53, align 8, !tbaa !7
  %55 = load double, double* %dtdvov, align 8, !tbaa !7
  %56 = fcmp ogt double %54, %55
  br i1 %56, label %57, label %66

; <label>:57                                      ; preds = %42
  %58 = load double, double* %dtdvov, align 8, !tbaa !7
  %59 = load i32, i32* %thread_num, align 4, !tbaa !5
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds double, double* %11, i64 %60
  store double %58, double* %61, align 8, !tbaa !7
  %62 = load i32, i32* %indx, align 4, !tbaa !5
  %63 = load i32, i32* %thread_num, align 4, !tbaa !5
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %14, i64 %64
  store i32 %62, i32* %65, align 4, !tbaa !5
  br label %66

; <label>:66                                      ; preds = %57, %42
  br label %67

; <label>:67                                      ; preds = %66, %34
  br label %68

; <label>:68                                      ; preds = %67
  %69 = load i32, i32* %i1, align 4, !tbaa !5
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %i1, align 4, !tbaa !5
  br label %30

; <label>:71                                      ; preds = %30
  store i32 0, i32* %i2, align 4, !tbaa !5
  br label %72

; <label>:72                                      ; preds = %93, %71
  %73 = load i32, i32* %i2, align 4, !tbaa !5
  %74 = load i32, i32* %threads, align 4, !tbaa !5
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %76, label %96

; <label>:76                                      ; preds = %72
  %77 = load i32, i32* %i2, align 4, !tbaa !5
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double, double* %11, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !7
  %81 = load double, double* %dthydro, align 8, !tbaa !7
  %82 = fcmp olt double %80, %81
  br i1 %82, label %83, label %92

; <label>:83                                      ; preds = %76
  %84 = load i32, i32* %i2, align 4, !tbaa !5
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double, double* %11, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !7
  store double %87, double* %dthydro, align 8, !tbaa !7
  %88 = load i32, i32* %i2, align 4, !tbaa !5
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %14, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !5
  store i32 %91, i32* %hydro_elem, align 4, !tbaa !5
  br label %92

; <label>:92                                      ; preds = %83, %76
  br label %93

; <label>:93                                      ; preds = %92
  %94 = load i32, i32* %i2, align 4, !tbaa !5
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %i2, align 4, !tbaa !5
  br label %72

; <label>:96                                      ; preds = %72
  %97 = load i32, i32* %hydro_elem, align 4, !tbaa !5
  %98 = icmp ne i32 %97, -1
  br i1 %98, label %99, label %102

; <label>:99                                      ; preds = %96
  %100 = load double, double* %dthydro, align 8, !tbaa !7
  %101 = call dereferenceable(8) double* @_ZN6Domain7dthydroEv(%struct.Domain* @domain)
  store double %100, double* %101, !tbaa !7
  br label %102

; <label>:102                                     ; preds = %99, %96
  store i32 1, i32* %2
  %103 = load i8*, i8** %1
  call void @llvm.stackrestore(i8* %103)
  ret void
}

; Function Attrs: nounwind
declare i32 @omp_get_max_threads() #5

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare i32 @omp_get_thread_num() #5

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

; Function Attrs: nounwind readnone
declare double @fabs(double) #13

define internal void @_GLOBAL__sub_I_lulesh_omp.cc() section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { inlinehint uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline noreturn nounwind }
attributes #9 = { nobuiltin nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind readonly }
attributes #16 = { nounwind readnone }
attributes #17 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (http://llvm.org/git/clang.git 5f500baea18887d19d373a9bdbb91e0bb675f7bd) (http://llvm.org/git/llvm.git 653997ebc2faf89d9af220279347c3f913c03ec9)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !3, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"double", !3, i64 0}
!9 = !{!10, !11, i64 0}
!10 = !{!"_ZTS7timeval", !11, i64 0, !11, i64 8}
!11 = !{!"long", !3, i64 0}
!12 = !{!10, !11, i64 8}
!13 = !{!11, !11, i64 0}
!14 = !{!15, !2, i64 0}
!15 = !{!"_ZTSSt12_Vector_baseIdSaIdEE", !16, i64 0}
!16 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE12_Vector_implE", !2, i64 0, !2, i64 8, !2, i64 16}
!17 = !{!15, !2, i64 8}
!18 = !{!19, !2, i64 0}
!19 = !{!"_ZTSSt12_Vector_baseIiSaIiEE", !20, i64 0}
!20 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE12_Vector_implE", !2, i64 0, !2, i64 8, !2, i64 16}
!21 = !{!19, !2, i64 8}
!22 = !{!16, !2, i64 0}
!23 = !{!16, !2, i64 8}
!24 = !{!16, !2, i64 16}
!25 = !{!20, !2, i64 0}
!26 = !{!20, !2, i64 8}
!27 = !{!20, !2, i64 16}
!28 = !{!3, !3, i64 0}
!29 = !{!15, !2, i64 16}
!30 = !{!19, !2, i64 16}
!31 = !{i64 0, i64 8, !1}
!32 = !{!33, !33, i64 0}
!33 = !{!"bool", !3, i64 0}
!34 = !{!35, !2, i64 0}
!35 = !{!"_ZTSN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEE", !2, i64 0}
!36 = !{!37, !2, i64 0}
!37 = !{!"_ZTSN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEE", !2, i64 0}
